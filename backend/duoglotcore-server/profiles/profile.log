=============== Initialization BEGIN ===============

# grm_preprocess py _external_symbols: ['_newline', '_indent', '_dedent', '_string_start', 'string_content', '_string_end']
# grm_preprocess py _aliased_symbols: {'parenthesized_expression', 'block', 'list_splat_pattern', 'lambda', 'identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
# Logging JSON to ./logs/py_grammar.json (NOTICE: Not for accurate serializing)...

# grm_preprocess js _external_symbols: ['_automatic_semicolon', '_template_chars', '_ternary_qmark']
# grm_preprocess js _aliased_symbols: {'namespace_export', 'export_specifier', 'namespace_import', 'import_specifier', 'statement_identifier', 'identifier', 'shorthand_property_identifier', 'shorthand_property_identifier_pattern', 'property_identifier', 'string_fragment', 'member_expression', 'call_expression'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
# Logging JSON to ./logs/js_grammar.json (NOTICE: Not for accurate serializing)...

# grm_preprocess cpp _external_symbols: ['raw_string_literal']
# grm_preprocess cpp _aliased_symbols: {'function_definition', 'declaration', 'call_expression', 'preproc_else', 'preproc_elif', 'unary_expression', 'binary_expression', 'parenthesized_expression', 'argument_list', 'attributed_declarator', 'pointer_declarator', 'function_declarator', 'array_declarator', 'parenthesized_declarator', 'reference_declarator', 'qualified_identifier', 'preproc_if', 'preproc_ifdef', 'attributed_statement', 'dependent_name', 'type_identifier', 'field_identifier', 'statement_identifier', 'parameter_pack_expansion', 'namespace_identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
# Logging JSON to ./logs/cpp_grammar.json (NOTICE: Not for accurate serializing)...

# grm_preprocess cs _external_symbols: ['_preproc_directive_end']
# grm_preprocess cs _aliased_symbols: {'parameter_modifier', 'base_list', 'label_name', 'integer_literal', 'verbatim_string_literal', 'prefix_unary_expression', 'binary_expression', 'parenthesized_expression'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
# Logging JSON to ./logs/cs_grammar.json (NOTICE: Not for accurate serializing)...

# grm_preprocess java _external_symbols: []
# grm_preprocess java _aliased_symbols: {'type_identifier', 'identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
# Logging JSON to ./logs/java_grammar.json (NOTICE: Not for accurate serializing)...
=============== Initialization END ===============
 * Serving Flask app 'cProfile' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: on
=============== Initialization BEGIN ===============

# grm_preprocess py _external_symbols: ['_newline', '_indent', '_dedent', '_string_start', 'string_content', '_string_end']
# grm_preprocess py _aliased_symbols: {'parenthesized_expression', 'block', 'list_splat_pattern', 'lambda', 'identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
# Logging JSON to ./logs/py_grammar.json (NOTICE: Not for accurate serializing)...

# grm_preprocess js _external_symbols: ['_automatic_semicolon', '_template_chars', '_ternary_qmark']
# grm_preprocess js _aliased_symbols: {'namespace_export', 'export_specifier', 'namespace_import', 'import_specifier', 'statement_identifier', 'identifier', 'shorthand_property_identifier', 'shorthand_property_identifier_pattern', 'property_identifier', 'string_fragment', 'member_expression', 'call_expression'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
# Logging JSON to ./logs/js_grammar.json (NOTICE: Not for accurate serializing)...

# grm_preprocess cpp _external_symbols: ['raw_string_literal']
# grm_preprocess cpp _aliased_symbols: {'function_definition', 'declaration', 'call_expression', 'preproc_else', 'preproc_elif', 'unary_expression', 'binary_expression', 'parenthesized_expression', 'argument_list', 'attributed_declarator', 'pointer_declarator', 'function_declarator', 'array_declarator', 'parenthesized_declarator', 'reference_declarator', 'qualified_identifier', 'preproc_if', 'preproc_ifdef', 'attributed_statement', 'dependent_name', 'type_identifier', 'field_identifier', 'statement_identifier', 'parameter_pack_expansion', 'namespace_identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
# Logging JSON to ./logs/cpp_grammar.json (NOTICE: Not for accurate serializing)...

# grm_preprocess cs _external_symbols: ['_preproc_directive_end']
# grm_preprocess cs _aliased_symbols: {'parameter_modifier', 'base_list', 'label_name', 'integer_literal', 'verbatim_string_literal', 'prefix_unary_expression', 'binary_expression', 'parenthesized_expression'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
# Logging JSON to ./logs/cs_grammar.json (NOTICE: Not for accurate serializing)...

# grm_preprocess java _external_symbols: []
# grm_preprocess java _aliased_symbols: {'type_identifier', 'identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
# Logging JSON to ./logs/java_grammar.json (NOTICE: Not for accurate serializing)...
=============== Initialization END ===============


++++++++++++++++++++++++++++++++++++++++ _set_program_str. 2421 ++++++++++++++++++++++++++++++++++++++++

++++++++++++  set self.expansion_programs
# grm_get_start_NT: program
# Slot create: 0  belong_ex_id: None
_expand
# Expansion create: ['fragment', ['"js.program"', '"*1"']]
# Slot create: 1  belong_ex_id: 1
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.program"', ['"*1"', 1]]]
# _apply_expansion_func: 0 ['fragment', ['"js.program"', ['"*1"', 1]]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 1 apply_expand_func SUCCEED on exid:1 (corres_slot_id:0). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 2  belong_ex_id: 2
# Slot create: 3  belong_ex_id: 2
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 2]], ['"*2"', 3]]
# _apply_expansion_func: 1 ['fragment', ['"js.lexical_declaration"', ['"*1"', 2]], ['"*2"', 3]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 2 apply_expand_func SUCCEED on exid:2 (corres_slot_id:1). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 4  belong_ex_id: 3
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 4]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 4]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 3 apply_expand_func SUCCEED on exid:3 (corres_slot_id:2). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 5  belong_ex_id: 4
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 5]]
# _apply_expansion_func: 4 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 5]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 4 apply_expand_func SUCCEED on exid:4 (corres_slot_id:4). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.true"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 5 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 5 apply_expand_func SUCCEED on exid:5 (corres_slot_id:5). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 6  belong_ex_id: 6
# Slot create: 7  belong_ex_id: 6
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 6]], ['"*2"', 7]]
# _apply_expansion_func: 3 ['fragment', ['"js.lexical_declaration"', ['"*1"', 6]], ['"*2"', 7]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 6 apply_expand_func SUCCEED on exid:6 (corres_slot_id:3). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 8  belong_ex_id: 7
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 8]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 6 ['fragment', ['"js.variable_declarator"', ['"*1"', 8]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 7 apply_expand_func SUCCEED on exid:7 (corres_slot_id:6). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 9  belong_ex_id: 8
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 9]]
# _apply_expansion_func: 8 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 9]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 8 apply_expand_func SUCCEED on exid:8 (corres_slot_id:8). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"1"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 9 ['fragment', ['"js.number"', ['"_val1_"', '"1"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 9 apply_expand_func SUCCEED on exid:9 (corres_slot_id:9). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 10  belong_ex_id: 10
# Slot create: 11  belong_ex_id: 10
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 10]], ['"*2"', 11]]
# _apply_expansion_func: 7 ['fragment', ['"js.lexical_declaration"', ['"*1"', 10]], ['"*2"', 11]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 10 apply_expand_func SUCCEED on exid:10 (corres_slot_id:7). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 12  belong_ex_id: 11
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 12]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 10 ['fragment', ['"js.variable_declarator"', ['"*1"', 12]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 11 apply_expand_func SUCCEED on exid:11 (corres_slot_id:10). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 13  belong_ex_id: 12
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 13]]
# _apply_expansion_func: 12 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 13]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 12 apply_expand_func SUCCEED on exid:12 (corres_slot_id:12). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"3"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 13 ['fragment', ['"js.number"', ['"_val1_"', '"3"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 13 apply_expand_func SUCCEED on exid:13 (corres_slot_id:13). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.function_declaration"', '"*1"'], '"*2"']
# Slot create: 14  belong_ex_id: 14
# Slot create: 15  belong_ex_id: 14
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.function_declaration"', ['"*1"', 14]], ['"*2"', 15]]
# _apply_expansion_func: 11 ['fragment', ['"js.function_declaration"', ['"*1"', 14]], ['"*2"', 15]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 14 apply_expand_func SUCCEED on exid:14 (corres_slot_id:11). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 16  belong_ex_id: 15
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"baz"']], ['"*1"', 16]]
# _apply_expansion_func: 14 ['fragment', ['"js.identifier"', ['"_val1_"', '"baz"']], ['"*1"', 16]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 15 apply_expand_func SUCCEED on exid:15 (corres_slot_id:14). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.formal_parameters"', '"*1"'], '"*2"']
# Slot create: 17  belong_ex_id: 16
# Slot create: 18  belong_ex_id: 16
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.formal_parameters"', ['"*1"', 17]], ['"*2"', 18]]
# _apply_expansion_func: 16 ['fragment', ['"js.formal_parameters"', ['"*1"', 17]], ['"*2"', 18]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 16 apply_expand_func SUCCEED on exid:16 (corres_slot_id:16). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 19  belong_ex_id: 17
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 19]]
# _apply_expansion_func: 17 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 19]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 17 apply_expand_func SUCCEED on exid:17 (corres_slot_id:17). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 20  belong_ex_id: 18
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 20]]
# _apply_expansion_func: 19 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 20]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 18 apply_expand_func SUCCEED on exid:18 (corres_slot_id:19). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 20 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 19 apply_expand_func SUCCEED on exid:19 (corres_slot_id:20). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 21  belong_ex_id: 20
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 21]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 18 ['fragment', ['"js.statement_block"', ['"*1"', 21]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 20 apply_expand_func SUCCEED on exid:20 (corres_slot_id:18). will pushleft 1 new slots
# Expansion create: ['fragment', '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"*1"', 'EMPTY']]
# _apply_expansion_func: 21 ['fragment', ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 21 apply_expand_func SUCCEED on exid:21 (corres_slot_id:21). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.function_declaration"', '"*1"'], '"*2"']
# Slot create: 22  belong_ex_id: 22
# Slot create: 23  belong_ex_id: 22
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.function_declaration"', ['"*1"', 22]], ['"*2"', 23]]
# _apply_expansion_func: 15 ['fragment', ['"js.function_declaration"', ['"*1"', 22]], ['"*2"', 23]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 22 apply_expand_func SUCCEED on exid:22 (corres_slot_id:15). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 24  belong_ex_id: 23
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"good"']], ['"*1"', 24]]
# _apply_expansion_func: 22 ['fragment', ['"js.identifier"', ['"_val1_"', '"good"']], ['"*1"', 24]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 23 apply_expand_func SUCCEED on exid:23 (corres_slot_id:22). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.formal_parameters"', '"*1"'], '"*2"']
# Slot create: 25  belong_ex_id: 24
# Slot create: 26  belong_ex_id: 24
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.formal_parameters"', ['"*1"', 25]], ['"*2"', 26]]
# _apply_expansion_func: 24 ['fragment', ['"js.formal_parameters"', ['"*1"', 25]], ['"*2"', 26]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 24 apply_expand_func SUCCEED on exid:24 (corres_slot_id:24). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 27  belong_ex_id: 25
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 27]]
# _apply_expansion_func: 25 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 27]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 25 apply_expand_func SUCCEED on exid:25 (corres_slot_id:25). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 27 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 26 apply_expand_func SUCCEED on exid:26 (corres_slot_id:27). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 28  belong_ex_id: 27
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 28]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 26 ['fragment', ['"js.statement_block"', ['"*1"', 28]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 27 apply_expand_func SUCCEED on exid:27 (corres_slot_id:26). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 29  belong_ex_id: 28
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 29]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 28 ['fragment', ['"js.lexical_declaration"', ['"*1"', 29]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 28 apply_expand_func SUCCEED on exid:28 (corres_slot_id:28). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 30  belong_ex_id: 29
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 30]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 29 ['fragment', ['"js.variable_declarator"', ['"*1"', 30]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 29 apply_expand_func SUCCEED on exid:29 (corres_slot_id:29). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 31  belong_ex_id: 30
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 31]]
# _apply_expansion_func: 30 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 31]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 30 apply_expand_func SUCCEED on exid:30 (corres_slot_id:30). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 32  belong_ex_id: 31
# Slot create: 33  belong_ex_id: 31
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 32], ['"_str1_"', '"+"'], ['".2"', 33]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 31 ['fragment', ['"js.binary_expression"', ['".1"', 32], ['"_str1_"', '"+"'], ['".2"', 33]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 31 apply_expand_func SUCCEED on exid:31 (corres_slot_id:31). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 32 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 32 apply_expand_func SUCCEED on exid:32 (corres_slot_id:32). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 33 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 33 apply_expand_func SUCCEED on exid:33 (corres_slot_id:33). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 34  belong_ex_id: 34
# Slot create: 35  belong_ex_id: 34
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 34]], ['"*2"', 35]]
# _apply_expansion_func: 23 ['fragment', ['"js.lexical_declaration"', ['"*1"', 34]], ['"*2"', 35]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 34 apply_expand_func SUCCEED on exid:34 (corres_slot_id:23). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 36  belong_ex_id: 35
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 36]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 34 ['fragment', ['"js.variable_declarator"', ['"*1"', 36]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 35 apply_expand_func SUCCEED on exid:35 (corres_slot_id:34). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 37  belong_ex_id: 36
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 37]]
# _apply_expansion_func: 36 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 37]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 36 apply_expand_func SUCCEED on exid:36 (corres_slot_id:36). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 38  belong_ex_id: 37
# Slot create: 39  belong_ex_id: 37
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 38], ['"_str1_"', '"*"'], ['".2"', 39]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 37 ['fragment', ['"js.binary_expression"', ['".1"', 38], ['"_str1_"', '"*"'], ['".2"', 39]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 37 apply_expand_func SUCCEED on exid:37 (corres_slot_id:37). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.parenthesized_expression"', '"*1"'], '"*2"']
# Slot create: 40  belong_ex_id: 38
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.parenthesized_expression"', ['"*1"', 40]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 38 ['fragment', ['"js.parenthesized_expression"', ['"*1"', 40]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 38 apply_expand_func SUCCEED on exid:38 (corres_slot_id:38). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 41  belong_ex_id: 39
# Slot create: 42  belong_ex_id: 39
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 41], ['"_str1_"', '"+"'], ['".2"', 42]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 40 ['fragment', ['"js.binary_expression"', ['".1"', 41], ['"_str1_"', '"+"'], ['".2"', 42]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 39 apply_expand_func SUCCEED on exid:39 (corres_slot_id:40). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 41 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 40 apply_expand_func SUCCEED on exid:40 (corres_slot_id:41). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 42 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 41 apply_expand_func SUCCEED on exid:41 (corres_slot_id:42). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 39 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 42 apply_expand_func SUCCEED on exid:42 (corres_slot_id:39). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', '".1"'], '"*2"'], '"*3"']
# Slot create: 43  belong_ex_id: 43
# Slot create: 44  belong_ex_id: 43
# Slot create: 45  belong_ex_id: 43
# _fill copy-and-fill-expand fill_count: 3 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 43]], ['"*2"', 44]], ['"*3"', 45]]
# _apply_expansion_func: 35 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 43]], ['"*2"', 44]], ['"*3"', 45]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 43 apply_expand_func SUCCEED on exid:43 (corres_slot_id:35). will pushleft 3 new slots
# Expansion create: ['fragment', ['"js.true"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 43 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 44 apply_expand_func SUCCEED on exid:44 (corres_slot_id:43). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 46  belong_ex_id: 45
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 46]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 44 ['fragment', ['"js.statement_block"', ['"*1"', 46]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 45 apply_expand_func SUCCEED on exid:45 (corres_slot_id:44). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 47  belong_ex_id: 46
# Slot create: 48  belong_ex_id: 46
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 47]], ['"*2"', 48]]
# _apply_expansion_func: 46 ['fragment', ['"js.lexical_declaration"', ['"*1"', 47]], ['"*2"', 48]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 46 apply_expand_func SUCCEED on exid:46 (corres_slot_id:46). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 49  belong_ex_id: 47
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 49]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 47 ['fragment', ['"js.variable_declarator"', ['"*1"', 49]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 47 apply_expand_func SUCCEED on exid:47 (corres_slot_id:47). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 50  belong_ex_id: 48
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 50]]
# _apply_expansion_func: 49 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 50]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 48 apply_expand_func SUCCEED on exid:48 (corres_slot_id:49). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 51  belong_ex_id: 49
# Slot create: 52  belong_ex_id: 49
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 51], ['"_str1_"', '"+"'], ['".2"', 52]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 50 ['fragment', ['"js.binary_expression"', ['".1"', 51], ['"_str1_"', '"+"'], ['".2"', 52]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 49 apply_expand_func SUCCEED on exid:49 (corres_slot_id:50). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 51 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 50 apply_expand_func SUCCEED on exid:50 (corres_slot_id:51). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 52 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 51 apply_expand_func SUCCEED on exid:51 (corres_slot_id:52). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', '".1"'], '"*2"'], '"*3"']
# Slot create: 53  belong_ex_id: 52
# Slot create: 54  belong_ex_id: 52
# Slot create: 55  belong_ex_id: 52
# _fill copy-and-fill-expand fill_count: 3 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 53]], ['"*2"', 54]], ['"*3"', 55]]
# _apply_expansion_func: 48 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 53]], ['"*2"', 54]], ['"*3"', 55]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 52 apply_expand_func SUCCEED on exid:52 (corres_slot_id:48). will pushleft 3 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 56  belong_ex_id: 53
# Slot create: 57  belong_ex_id: 53
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 56], ['"_str1_"', '"<"'], ['".2"', 57]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 53 ['fragment', ['"js.binary_expression"', ['".1"', 56], ['"_str1_"', '"<"'], ['".2"', 57]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 53 apply_expand_func SUCCEED on exid:53 (corres_slot_id:53). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 56 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 54 apply_expand_func SUCCEED on exid:54 (corres_slot_id:56). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"0"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 57 ['fragment', ['"js.number"', ['"_val1_"', '"0"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 55 apply_expand_func SUCCEED on exid:55 (corres_slot_id:57). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 58  belong_ex_id: 56
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 58]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 54 ['fragment', ['"js.statement_block"', ['"*1"', 58]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 56 apply_expand_func SUCCEED on exid:56 (corres_slot_id:54). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 59  belong_ex_id: 57
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 59]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 58 ['fragment', ['"js.lexical_declaration"', ['"*1"', 59]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 57 apply_expand_func SUCCEED on exid:57 (corres_slot_id:58). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 60  belong_ex_id: 58
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 60]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 59 ['fragment', ['"js.variable_declarator"', ['"*1"', 60]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 58 apply_expand_func SUCCEED on exid:58 (corres_slot_id:59). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 61  belong_ex_id: 59
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"fd"']], ['"*1"', 61]]
# _apply_expansion_func: 60 ['fragment', ['"js.identifier"', ['"_val1_"', '"fd"']], ['"*1"', 61]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 59 apply_expand_func SUCCEED on exid:59 (corres_slot_id:60). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 61 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 60 apply_expand_func SUCCEED on exid:60 (corres_slot_id:61). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', '".1"', ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', '".1"', ['str', '"<"'], '".2"']], ['"js.update_expression"', '".1"'], '"*3"'], '"*4"']
# Slot create: 62  belong_ex_id: 61
# Slot create: 63  belong_ex_id: 61
# Slot create: 64  belong_ex_id: 61
# Slot create: 65  belong_ex_id: 61
# Slot create: 66  belong_ex_id: 61
# Slot create: 67  belong_ex_id: 61
# _fill copy-and-fill-expand fill_count: 6 ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', ['".1"', 62], ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', ['".1"', 63], ['str', '"<"'], ['".2"', 64]]], ['"js.update_expression"', ['".1"', 65]], ['"*3"', 66]], ['"*4"', 67]]
# _apply_expansion_func: 55 ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', ['".1"', 62], ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', ['".1"', 63], ['str', '"<"'], ['".2"', 64]]], ['"js.update_expression"', ['".1"', 65]], ['"*3"', 66]], ['"*4"', 67]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 61 apply_expand_func SUCCEED on exid:61 (corres_slot_id:55). will pushleft 6 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 62 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 62 apply_expand_func SUCCEED on exid:62 (corres_slot_id:62). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 63 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 63 apply_expand_func SUCCEED on exid:63 (corres_slot_id:63). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"10"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 64 ['fragment', ['"js.number"', ['"_val1_"', '"10"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 64 apply_expand_func SUCCEED on exid:64 (corres_slot_id:64). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 65 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 65 apply_expand_func SUCCEED on exid:65 (corres_slot_id:65). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 68  belong_ex_id: 66
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 68]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 66 ['fragment', ['"js.statement_block"', ['"*1"', 68]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 66 apply_expand_func SUCCEED on exid:66 (corres_slot_id:66). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 69  belong_ex_id: 67
# Slot create: 70  belong_ex_id: 67
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 69]], ['"*2"', 70]]
# _apply_expansion_func: 68 ['fragment', ['"js.lexical_declaration"', ['"*1"', 69]], ['"*2"', 70]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 67 apply_expand_func SUCCEED on exid:67 (corres_slot_id:68). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 71  belong_ex_id: 68
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 71]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 69 ['fragment', ['"js.variable_declarator"', ['"*1"', 71]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 68 apply_expand_func SUCCEED on exid:68 (corres_slot_id:69). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 72  belong_ex_id: 69
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 72]]
# _apply_expansion_func: 71 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 72]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 69 apply_expand_func SUCCEED on exid:69 (corres_slot_id:71). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 73  belong_ex_id: 70
# Slot create: 74  belong_ex_id: 70
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 73], ['"_str1_"', '"+"'], ['".2"', 74]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 72 ['fragment', ['"js.binary_expression"', ['".1"', 73], ['"_str1_"', '"+"'], ['".2"', 74]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 70 apply_expand_func SUCCEED on exid:70 (corres_slot_id:72). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 73 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 71 apply_expand_func SUCCEED on exid:71 (corres_slot_id:73). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 74 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 72 apply_expand_func SUCCEED on exid:72 (corres_slot_id:74). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 75  belong_ex_id: 73
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 75]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 70 ['fragment', ['"js.lexical_declaration"', ['"*1"', 75]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 73 apply_expand_func SUCCEED on exid:73 (corres_slot_id:70). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 76  belong_ex_id: 74
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 76]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 75 ['fragment', ['"js.variable_declarator"', ['"*1"', 76]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 74 apply_expand_func SUCCEED on exid:74 (corres_slot_id:75). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 77  belong_ex_id: 75
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 77]]
# _apply_expansion_func: 76 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 77]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 75 apply_expand_func SUCCEED on exid:75 (corres_slot_id:76). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 78  belong_ex_id: 76
# Slot create: 79  belong_ex_id: 76
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 78], ['"_str1_"', '"*"'], ['".2"', 79]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 77 ['fragment', ['"js.binary_expression"', ['".1"', 78], ['"_str1_"', '"*"'], ['".2"', 79]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 76 apply_expand_func SUCCEED on exid:76 (corres_slot_id:77). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 78 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 77 apply_expand_func SUCCEED on exid:77 (corres_slot_id:78). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 79 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 78 apply_expand_func SUCCEED on exid:78 (corres_slot_id:79). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 80  belong_ex_id: 79
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 80]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 67 ['fragment', ['"js.lexical_declaration"', ['"*1"', 80]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 79 apply_expand_func SUCCEED on exid:79 (corres_slot_id:67). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 81  belong_ex_id: 80
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 81]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 80 ['fragment', ['"js.variable_declarator"', ['"*1"', 81]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 80 apply_expand_func SUCCEED on exid:80 (corres_slot_id:80). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 82  belong_ex_id: 81
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"c"']], ['"*1"', 82]]
# _apply_expansion_func: 81 ['fragment', ['"js.identifier"', ['"_val1_"', '"c"']], ['"*1"', 82]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 81 apply_expand_func SUCCEED on exid:81 (corres_slot_id:81). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 83  belong_ex_id: 82
# Slot create: 84  belong_ex_id: 82
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 83], ['"_str1_"', '"*"'], ['".2"', 84]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 82 ['fragment', ['"js.binary_expression"', ['".1"', 83], ['"_str1_"', '"*"'], ['".2"', 84]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 82 apply_expand_func SUCCEED on exid:82 (corres_slot_id:82). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 83 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 83 apply_expand_func SUCCEED on exid:83 (corres_slot_id:83). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 84 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 84 apply_expand_func SUCCEED on exid:84 (corres_slot_id:84). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 85  belong_ex_id: 85
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 85]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 45 ['fragment', ['"js.lexical_declaration"', ['"*1"', 85]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 85 apply_expand_func SUCCEED on exid:85 (corres_slot_id:45). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 86  belong_ex_id: 86
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 86]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 85 ['fragment', ['"js.variable_declarator"', ['"*1"', 86]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 86 apply_expand_func SUCCEED on exid:86 (corres_slot_id:85). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 87  belong_ex_id: 87
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"b"']], ['"*1"', 87]]
# _apply_expansion_func: 86 ['fragment', ['"js.identifier"', ['"_val1_"', '"b"']], ['"*1"', 87]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 87 apply_expand_func SUCCEED on exid:87 (corres_slot_id:86). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 88  belong_ex_id: 88
# Slot create: 89  belong_ex_id: 88
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 88], ['"_str1_"', '"-"'], ['".2"', 89]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 87 ['fragment', ['"js.binary_expression"', ['".1"', 88], ['"_str1_"', '"-"'], ['".2"', 89]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 88 apply_expand_func SUCCEED on exid:88 (corres_slot_id:87). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 88 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 89 apply_expand_func SUCCEED on exid:89 (corres_slot_id:88). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 89 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: True


********** _expand_loop 90 apply_expand_func SUCCEED on exid:90 (corres_slot_id:89). will pushleft 0 new slots
# _expand_loop FINISHED SUCCESSFULLY.

# ----- time elapsed: 0.36963029999969876


++++++++++++++++++++++++++++++++++++++++ _set_program_str. 2421 ++++++++++++++++++++++++++++++++++++++++

++++++++++++  set self.expansion_programs
# grm_get_start_NT: program
# Slot create: 0  belong_ex_id: None
_expand
# Expansion create: ['fragment', ['"js.program"', '"*1"']]
# Slot create: 1  belong_ex_id: 1
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.program"', ['"*1"', 1]]]
# _apply_expansion_func: 0 ['fragment', ['"js.program"', ['"*1"', 1]]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 1 apply_expand_func SUCCEED on exid:1 (corres_slot_id:0). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 2  belong_ex_id: 2
# Slot create: 3  belong_ex_id: 2
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 2]], ['"*2"', 3]]
# _apply_expansion_func: 1 ['fragment', ['"js.lexical_declaration"', ['"*1"', 2]], ['"*2"', 3]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 2 apply_expand_func SUCCEED on exid:2 (corres_slot_id:1). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 4  belong_ex_id: 3
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 4]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 4]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 3 apply_expand_func SUCCEED on exid:3 (corres_slot_id:2). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 5  belong_ex_id: 4
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 5]]
# _apply_expansion_func: 4 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 5]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 4 apply_expand_func SUCCEED on exid:4 (corres_slot_id:4). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.true"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 5 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 5 apply_expand_func SUCCEED on exid:5 (corres_slot_id:5). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 6  belong_ex_id: 6
# Slot create: 7  belong_ex_id: 6
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 6]], ['"*2"', 7]]
# _apply_expansion_func: 3 ['fragment', ['"js.lexical_declaration"', ['"*1"', 6]], ['"*2"', 7]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 6 apply_expand_func SUCCEED on exid:6 (corres_slot_id:3). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 8  belong_ex_id: 7
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 8]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 6 ['fragment', ['"js.variable_declarator"', ['"*1"', 8]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 7 apply_expand_func SUCCEED on exid:7 (corres_slot_id:6). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 9  belong_ex_id: 8
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 9]]
# _apply_expansion_func: 8 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 9]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 8 apply_expand_func SUCCEED on exid:8 (corres_slot_id:8). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"1"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 9 ['fragment', ['"js.number"', ['"_val1_"', '"1"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 9 apply_expand_func SUCCEED on exid:9 (corres_slot_id:9). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 10  belong_ex_id: 10
# Slot create: 11  belong_ex_id: 10
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 10]], ['"*2"', 11]]
# _apply_expansion_func: 7 ['fragment', ['"js.lexical_declaration"', ['"*1"', 10]], ['"*2"', 11]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 10 apply_expand_func SUCCEED on exid:10 (corres_slot_id:7). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 12  belong_ex_id: 11
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 12]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 10 ['fragment', ['"js.variable_declarator"', ['"*1"', 12]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 11 apply_expand_func SUCCEED on exid:11 (corres_slot_id:10). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 13  belong_ex_id: 12
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 13]]
# _apply_expansion_func: 12 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 13]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 12 apply_expand_func SUCCEED on exid:12 (corres_slot_id:12). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"3"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 13 ['fragment', ['"js.number"', ['"_val1_"', '"3"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 13 apply_expand_func SUCCEED on exid:13 (corres_slot_id:13). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.function_declaration"', '"*1"'], '"*2"']
# Slot create: 14  belong_ex_id: 14
# Slot create: 15  belong_ex_id: 14
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.function_declaration"', ['"*1"', 14]], ['"*2"', 15]]
# _apply_expansion_func: 11 ['fragment', ['"js.function_declaration"', ['"*1"', 14]], ['"*2"', 15]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 14 apply_expand_func SUCCEED on exid:14 (corres_slot_id:11). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 16  belong_ex_id: 15
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"baz"']], ['"*1"', 16]]
# _apply_expansion_func: 14 ['fragment', ['"js.identifier"', ['"_val1_"', '"baz"']], ['"*1"', 16]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 15 apply_expand_func SUCCEED on exid:15 (corres_slot_id:14). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.formal_parameters"', '"*1"'], '"*2"']
# Slot create: 17  belong_ex_id: 16
# Slot create: 18  belong_ex_id: 16
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.formal_parameters"', ['"*1"', 17]], ['"*2"', 18]]
# _apply_expansion_func: 16 ['fragment', ['"js.formal_parameters"', ['"*1"', 17]], ['"*2"', 18]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 16 apply_expand_func SUCCEED on exid:16 (corres_slot_id:16). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 19  belong_ex_id: 17
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 19]]
# _apply_expansion_func: 17 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 19]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 17 apply_expand_func SUCCEED on exid:17 (corres_slot_id:17). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 20  belong_ex_id: 18
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 20]]
# _apply_expansion_func: 19 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 20]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 18 apply_expand_func SUCCEED on exid:18 (corres_slot_id:19). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 20 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 19 apply_expand_func SUCCEED on exid:19 (corres_slot_id:20). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 21  belong_ex_id: 20
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 21]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 18 ['fragment', ['"js.statement_block"', ['"*1"', 21]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 20 apply_expand_func SUCCEED on exid:20 (corres_slot_id:18). will pushleft 1 new slots
# Expansion create: ['fragment', '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"*1"', 'EMPTY']]
# _apply_expansion_func: 21 ['fragment', ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 21 apply_expand_func SUCCEED on exid:21 (corres_slot_id:21). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.function_declaration"', '"*1"'], '"*2"']
# Slot create: 22  belong_ex_id: 22
# Slot create: 23  belong_ex_id: 22
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.function_declaration"', ['"*1"', 22]], ['"*2"', 23]]
# _apply_expansion_func: 15 ['fragment', ['"js.function_declaration"', ['"*1"', 22]], ['"*2"', 23]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 22 apply_expand_func SUCCEED on exid:22 (corres_slot_id:15). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 24  belong_ex_id: 23
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"good"']], ['"*1"', 24]]
# _apply_expansion_func: 22 ['fragment', ['"js.identifier"', ['"_val1_"', '"good"']], ['"*1"', 24]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 23 apply_expand_func SUCCEED on exid:23 (corres_slot_id:22). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.formal_parameters"', '"*1"'], '"*2"']
# Slot create: 25  belong_ex_id: 24
# Slot create: 26  belong_ex_id: 24
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.formal_parameters"', ['"*1"', 25]], ['"*2"', 26]]
# _apply_expansion_func: 24 ['fragment', ['"js.formal_parameters"', ['"*1"', 25]], ['"*2"', 26]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 24 apply_expand_func SUCCEED on exid:24 (corres_slot_id:24). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 27  belong_ex_id: 25
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 27]]
# _apply_expansion_func: 25 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 27]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 25 apply_expand_func SUCCEED on exid:25 (corres_slot_id:25). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 27 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 26 apply_expand_func SUCCEED on exid:26 (corres_slot_id:27). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 28  belong_ex_id: 27
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 28]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 26 ['fragment', ['"js.statement_block"', ['"*1"', 28]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 27 apply_expand_func SUCCEED on exid:27 (corres_slot_id:26). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 29  belong_ex_id: 28
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 29]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 28 ['fragment', ['"js.lexical_declaration"', ['"*1"', 29]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 28 apply_expand_func SUCCEED on exid:28 (corres_slot_id:28). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 30  belong_ex_id: 29
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 30]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 29 ['fragment', ['"js.variable_declarator"', ['"*1"', 30]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 29 apply_expand_func SUCCEED on exid:29 (corres_slot_id:29). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 31  belong_ex_id: 30
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 31]]
# _apply_expansion_func: 30 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 31]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 30 apply_expand_func SUCCEED on exid:30 (corres_slot_id:30). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 32  belong_ex_id: 31
# Slot create: 33  belong_ex_id: 31
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 32], ['"_str1_"', '"+"'], ['".2"', 33]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 31 ['fragment', ['"js.binary_expression"', ['".1"', 32], ['"_str1_"', '"+"'], ['".2"', 33]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 31 apply_expand_func SUCCEED on exid:31 (corres_slot_id:31). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 32 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 32 apply_expand_func SUCCEED on exid:32 (corres_slot_id:32). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 33 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 33 apply_expand_func SUCCEED on exid:33 (corres_slot_id:33). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 34  belong_ex_id: 34
# Slot create: 35  belong_ex_id: 34
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 34]], ['"*2"', 35]]
# _apply_expansion_func: 23 ['fragment', ['"js.lexical_declaration"', ['"*1"', 34]], ['"*2"', 35]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 34 apply_expand_func SUCCEED on exid:34 (corres_slot_id:23). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 36  belong_ex_id: 35
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 36]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 34 ['fragment', ['"js.variable_declarator"', ['"*1"', 36]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 35 apply_expand_func SUCCEED on exid:35 (corres_slot_id:34). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 37  belong_ex_id: 36
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 37]]
# _apply_expansion_func: 36 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 37]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 36 apply_expand_func SUCCEED on exid:36 (corres_slot_id:36). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 38  belong_ex_id: 37
# Slot create: 39  belong_ex_id: 37
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 38], ['"_str1_"', '"*"'], ['".2"', 39]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 37 ['fragment', ['"js.binary_expression"', ['".1"', 38], ['"_str1_"', '"*"'], ['".2"', 39]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 37 apply_expand_func SUCCEED on exid:37 (corres_slot_id:37). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.parenthesized_expression"', '"*1"'], '"*2"']
# Slot create: 40  belong_ex_id: 38
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.parenthesized_expression"', ['"*1"', 40]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 38 ['fragment', ['"js.parenthesized_expression"', ['"*1"', 40]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 38 apply_expand_func SUCCEED on exid:38 (corres_slot_id:38). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 41  belong_ex_id: 39
# Slot create: 42  belong_ex_id: 39
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 41], ['"_str1_"', '"+"'], ['".2"', 42]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 40 ['fragment', ['"js.binary_expression"', ['".1"', 41], ['"_str1_"', '"+"'], ['".2"', 42]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 39 apply_expand_func SUCCEED on exid:39 (corres_slot_id:40). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 41 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 40 apply_expand_func SUCCEED on exid:40 (corres_slot_id:41). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 42 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 41 apply_expand_func SUCCEED on exid:41 (corres_slot_id:42). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 39 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 42 apply_expand_func SUCCEED on exid:42 (corres_slot_id:39). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', '".1"'], '"*2"'], '"*3"']
# Slot create: 43  belong_ex_id: 43
# Slot create: 44  belong_ex_id: 43
# Slot create: 45  belong_ex_id: 43
# _fill copy-and-fill-expand fill_count: 3 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 43]], ['"*2"', 44]], ['"*3"', 45]]
# _apply_expansion_func: 35 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 43]], ['"*2"', 44]], ['"*3"', 45]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 43 apply_expand_func SUCCEED on exid:43 (corres_slot_id:35). will pushleft 3 new slots
# Expansion create: ['fragment', ['"js.true"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 43 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 44 apply_expand_func SUCCEED on exid:44 (corres_slot_id:43). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 46  belong_ex_id: 45
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 46]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 44 ['fragment', ['"js.statement_block"', ['"*1"', 46]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 45 apply_expand_func SUCCEED on exid:45 (corres_slot_id:44). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 47  belong_ex_id: 46
# Slot create: 48  belong_ex_id: 46
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 47]], ['"*2"', 48]]
# _apply_expansion_func: 46 ['fragment', ['"js.lexical_declaration"', ['"*1"', 47]], ['"*2"', 48]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 46 apply_expand_func SUCCEED on exid:46 (corres_slot_id:46). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 49  belong_ex_id: 47
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 49]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 47 ['fragment', ['"js.variable_declarator"', ['"*1"', 49]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 47 apply_expand_func SUCCEED on exid:47 (corres_slot_id:47). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 50  belong_ex_id: 48
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 50]]
# _apply_expansion_func: 49 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 50]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 48 apply_expand_func SUCCEED on exid:48 (corres_slot_id:49). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 51  belong_ex_id: 49
# Slot create: 52  belong_ex_id: 49
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 51], ['"_str1_"', '"+"'], ['".2"', 52]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 50 ['fragment', ['"js.binary_expression"', ['".1"', 51], ['"_str1_"', '"+"'], ['".2"', 52]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 49 apply_expand_func SUCCEED on exid:49 (corres_slot_id:50). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 51 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 50 apply_expand_func SUCCEED on exid:50 (corres_slot_id:51). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 52 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 51 apply_expand_func SUCCEED on exid:51 (corres_slot_id:52). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', '".1"'], '"*2"'], '"*3"']
# Slot create: 53  belong_ex_id: 52
# Slot create: 54  belong_ex_id: 52
# Slot create: 55  belong_ex_id: 52
# _fill copy-and-fill-expand fill_count: 3 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 53]], ['"*2"', 54]], ['"*3"', 55]]
# _apply_expansion_func: 48 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 53]], ['"*2"', 54]], ['"*3"', 55]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 52 apply_expand_func SUCCEED on exid:52 (corres_slot_id:48). will pushleft 3 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 56  belong_ex_id: 53
# Slot create: 57  belong_ex_id: 53
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 56], ['"_str1_"', '"<"'], ['".2"', 57]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 53 ['fragment', ['"js.binary_expression"', ['".1"', 56], ['"_str1_"', '"<"'], ['".2"', 57]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 53 apply_expand_func SUCCEED on exid:53 (corres_slot_id:53). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 56 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 54 apply_expand_func SUCCEED on exid:54 (corres_slot_id:56). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"0"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 57 ['fragment', ['"js.number"', ['"_val1_"', '"0"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 55 apply_expand_func SUCCEED on exid:55 (corres_slot_id:57). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 58  belong_ex_id: 56
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 58]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 54 ['fragment', ['"js.statement_block"', ['"*1"', 58]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 56 apply_expand_func SUCCEED on exid:56 (corres_slot_id:54). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 59  belong_ex_id: 57
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 59]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 58 ['fragment', ['"js.lexical_declaration"', ['"*1"', 59]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 57 apply_expand_func SUCCEED on exid:57 (corres_slot_id:58). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 60  belong_ex_id: 58
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 60]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 59 ['fragment', ['"js.variable_declarator"', ['"*1"', 60]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 58 apply_expand_func SUCCEED on exid:58 (corres_slot_id:59). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 61  belong_ex_id: 59
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"fd"']], ['"*1"', 61]]
# _apply_expansion_func: 60 ['fragment', ['"js.identifier"', ['"_val1_"', '"fd"']], ['"*1"', 61]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 59 apply_expand_func SUCCEED on exid:59 (corres_slot_id:60). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 61 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 60 apply_expand_func SUCCEED on exid:60 (corres_slot_id:61). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', '".1"', ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', '".1"', ['str', '"<"'], '".2"']], ['"js.update_expression"', '".1"'], '"*3"'], '"*4"']
# Slot create: 62  belong_ex_id: 61
# Slot create: 63  belong_ex_id: 61
# Slot create: 64  belong_ex_id: 61
# Slot create: 65  belong_ex_id: 61
# Slot create: 66  belong_ex_id: 61
# Slot create: 67  belong_ex_id: 61
# _fill copy-and-fill-expand fill_count: 6 ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', ['".1"', 62], ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', ['".1"', 63], ['str', '"<"'], ['".2"', 64]]], ['"js.update_expression"', ['".1"', 65]], ['"*3"', 66]], ['"*4"', 67]]
# _apply_expansion_func: 55 ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', ['".1"', 62], ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', ['".1"', 63], ['str', '"<"'], ['".2"', 64]]], ['"js.update_expression"', ['".1"', 65]], ['"*3"', 66]], ['"*4"', 67]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 61 apply_expand_func SUCCEED on exid:61 (corres_slot_id:55). will pushleft 6 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 62 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 62 apply_expand_func SUCCEED on exid:62 (corres_slot_id:62). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 63 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 63 apply_expand_func SUCCEED on exid:63 (corres_slot_id:63). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"10"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 64 ['fragment', ['"js.number"', ['"_val1_"', '"10"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 64 apply_expand_func SUCCEED on exid:64 (corres_slot_id:64). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 65 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 65 apply_expand_func SUCCEED on exid:65 (corres_slot_id:65). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 68  belong_ex_id: 66
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 68]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 66 ['fragment', ['"js.statement_block"', ['"*1"', 68]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 66 apply_expand_func SUCCEED on exid:66 (corres_slot_id:66). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 69  belong_ex_id: 67
# Slot create: 70  belong_ex_id: 67
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 69]], ['"*2"', 70]]
# _apply_expansion_func: 68 ['fragment', ['"js.lexical_declaration"', ['"*1"', 69]], ['"*2"', 70]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 67 apply_expand_func SUCCEED on exid:67 (corres_slot_id:68). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 71  belong_ex_id: 68
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 71]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 69 ['fragment', ['"js.variable_declarator"', ['"*1"', 71]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 68 apply_expand_func SUCCEED on exid:68 (corres_slot_id:69). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 72  belong_ex_id: 69
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 72]]
# _apply_expansion_func: 71 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 72]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 69 apply_expand_func SUCCEED on exid:69 (corres_slot_id:71). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 73  belong_ex_id: 70
# Slot create: 74  belong_ex_id: 70
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 73], ['"_str1_"', '"+"'], ['".2"', 74]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 72 ['fragment', ['"js.binary_expression"', ['".1"', 73], ['"_str1_"', '"+"'], ['".2"', 74]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 70 apply_expand_func SUCCEED on exid:70 (corres_slot_id:72). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 73 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 71 apply_expand_func SUCCEED on exid:71 (corres_slot_id:73). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 74 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 72 apply_expand_func SUCCEED on exid:72 (corres_slot_id:74). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 75  belong_ex_id: 73
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 75]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 70 ['fragment', ['"js.lexical_declaration"', ['"*1"', 75]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 73 apply_expand_func SUCCEED on exid:73 (corres_slot_id:70). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 76  belong_ex_id: 74
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 76]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 75 ['fragment', ['"js.variable_declarator"', ['"*1"', 76]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 74 apply_expand_func SUCCEED on exid:74 (corres_slot_id:75). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 77  belong_ex_id: 75
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 77]]
# _apply_expansion_func: 76 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 77]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 75 apply_expand_func SUCCEED on exid:75 (corres_slot_id:76). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 78  belong_ex_id: 76
# Slot create: 79  belong_ex_id: 76
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 78], ['"_str1_"', '"*"'], ['".2"', 79]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 77 ['fragment', ['"js.binary_expression"', ['".1"', 78], ['"_str1_"', '"*"'], ['".2"', 79]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 76 apply_expand_func SUCCEED on exid:76 (corres_slot_id:77). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 78 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 77 apply_expand_func SUCCEED on exid:77 (corres_slot_id:78). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 79 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 78 apply_expand_func SUCCEED on exid:78 (corres_slot_id:79). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 80  belong_ex_id: 79
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 80]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 67 ['fragment', ['"js.lexical_declaration"', ['"*1"', 80]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 79 apply_expand_func SUCCEED on exid:79 (corres_slot_id:67). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 81  belong_ex_id: 80
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 81]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 80 ['fragment', ['"js.variable_declarator"', ['"*1"', 81]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 80 apply_expand_func SUCCEED on exid:80 (corres_slot_id:80). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 82  belong_ex_id: 81
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"c"']], ['"*1"', 82]]
# _apply_expansion_func: 81 ['fragment', ['"js.identifier"', ['"_val1_"', '"c"']], ['"*1"', 82]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 81 apply_expand_func SUCCEED on exid:81 (corres_slot_id:81). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 83  belong_ex_id: 82
# Slot create: 84  belong_ex_id: 82
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 83], ['"_str1_"', '"*"'], ['".2"', 84]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 82 ['fragment', ['"js.binary_expression"', ['".1"', 83], ['"_str1_"', '"*"'], ['".2"', 84]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 82 apply_expand_func SUCCEED on exid:82 (corres_slot_id:82). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 83 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 83 apply_expand_func SUCCEED on exid:83 (corres_slot_id:83). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 84 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 84 apply_expand_func SUCCEED on exid:84 (corres_slot_id:84). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 85  belong_ex_id: 85
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 85]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 45 ['fragment', ['"js.lexical_declaration"', ['"*1"', 85]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 85 apply_expand_func SUCCEED on exid:85 (corres_slot_id:45). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 86  belong_ex_id: 86
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 86]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 85 ['fragment', ['"js.variable_declarator"', ['"*1"', 86]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 86 apply_expand_func SUCCEED on exid:86 (corres_slot_id:85). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 87  belong_ex_id: 87
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"b"']], ['"*1"', 87]]
# _apply_expansion_func: 86 ['fragment', ['"js.identifier"', ['"_val1_"', '"b"']], ['"*1"', 87]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 87 apply_expand_func SUCCEED on exid:87 (corres_slot_id:86). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 88  belong_ex_id: 88
# Slot create: 89  belong_ex_id: 88
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 88], ['"_str1_"', '"-"'], ['".2"', 89]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 87 ['fragment', ['"js.binary_expression"', ['".1"', 88], ['"_str1_"', '"-"'], ['".2"', 89]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 88 apply_expand_func SUCCEED on exid:88 (corres_slot_id:87). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 88 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 89 apply_expand_func SUCCEED on exid:89 (corres_slot_id:88). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 89 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: True


********** _expand_loop 90 apply_expand_func SUCCEED on exid:90 (corres_slot_id:89). will pushleft 0 new slots
# _expand_loop FINISHED SUCCESSFULLY.

# ----- time elapsed: 0.11315340000146534


++++++++++++++++++++++++++++++++++++++++ _set_program_str. 2421 ++++++++++++++++++++++++++++++++++++++++

++++++++++++  set self.expansion_programs
# grm_get_start_NT: program
# Slot create: 0  belong_ex_id: None
_expand
# Expansion create: ['fragment', ['"js.program"', '"*1"']]
# Slot create: 1  belong_ex_id: 1
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.program"', ['"*1"', 1]]]
# _apply_expansion_func: 0 ['fragment', ['"js.program"', ['"*1"', 1]]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 1 apply_expand_func SUCCEED on exid:1 (corres_slot_id:0). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 2  belong_ex_id: 2
# Slot create: 3  belong_ex_id: 2
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 2]], ['"*2"', 3]]
# _apply_expansion_func: 1 ['fragment', ['"js.lexical_declaration"', ['"*1"', 2]], ['"*2"', 3]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 2 apply_expand_func SUCCEED on exid:2 (corres_slot_id:1). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 4  belong_ex_id: 3
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 4]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 4]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 3 apply_expand_func SUCCEED on exid:3 (corres_slot_id:2). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 5  belong_ex_id: 4
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 5]]
# _apply_expansion_func: 4 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 5]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 4 apply_expand_func SUCCEED on exid:4 (corres_slot_id:4). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.true"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 5 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 5 apply_expand_func SUCCEED on exid:5 (corres_slot_id:5). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 6  belong_ex_id: 6
# Slot create: 7  belong_ex_id: 6
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 6]], ['"*2"', 7]]
# _apply_expansion_func: 3 ['fragment', ['"js.lexical_declaration"', ['"*1"', 6]], ['"*2"', 7]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 6 apply_expand_func SUCCEED on exid:6 (corres_slot_id:3). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 8  belong_ex_id: 7
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 8]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 6 ['fragment', ['"js.variable_declarator"', ['"*1"', 8]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 7 apply_expand_func SUCCEED on exid:7 (corres_slot_id:6). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 9  belong_ex_id: 8
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 9]]
# _apply_expansion_func: 8 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 9]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 8 apply_expand_func SUCCEED on exid:8 (corres_slot_id:8). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"1"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 9 ['fragment', ['"js.number"', ['"_val1_"', '"1"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 9 apply_expand_func SUCCEED on exid:9 (corres_slot_id:9). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 10  belong_ex_id: 10
# Slot create: 11  belong_ex_id: 10
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 10]], ['"*2"', 11]]
# _apply_expansion_func: 7 ['fragment', ['"js.lexical_declaration"', ['"*1"', 10]], ['"*2"', 11]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 10 apply_expand_func SUCCEED on exid:10 (corres_slot_id:7). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 12  belong_ex_id: 11
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 12]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 10 ['fragment', ['"js.variable_declarator"', ['"*1"', 12]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 11 apply_expand_func SUCCEED on exid:11 (corres_slot_id:10). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 13  belong_ex_id: 12
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 13]]
# _apply_expansion_func: 12 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 13]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 12 apply_expand_func SUCCEED on exid:12 (corres_slot_id:12). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"3"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 13 ['fragment', ['"js.number"', ['"_val1_"', '"3"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 13 apply_expand_func SUCCEED on exid:13 (corres_slot_id:13). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.function_declaration"', '"*1"'], '"*2"']
# Slot create: 14  belong_ex_id: 14
# Slot create: 15  belong_ex_id: 14
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.function_declaration"', ['"*1"', 14]], ['"*2"', 15]]
# _apply_expansion_func: 11 ['fragment', ['"js.function_declaration"', ['"*1"', 14]], ['"*2"', 15]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 14 apply_expand_func SUCCEED on exid:14 (corres_slot_id:11). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 16  belong_ex_id: 15
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"baz"']], ['"*1"', 16]]
# _apply_expansion_func: 14 ['fragment', ['"js.identifier"', ['"_val1_"', '"baz"']], ['"*1"', 16]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 15 apply_expand_func SUCCEED on exid:15 (corres_slot_id:14). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.formal_parameters"', '"*1"'], '"*2"']
# Slot create: 17  belong_ex_id: 16
# Slot create: 18  belong_ex_id: 16
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.formal_parameters"', ['"*1"', 17]], ['"*2"', 18]]
# _apply_expansion_func: 16 ['fragment', ['"js.formal_parameters"', ['"*1"', 17]], ['"*2"', 18]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 16 apply_expand_func SUCCEED on exid:16 (corres_slot_id:16). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 19  belong_ex_id: 17
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 19]]
# _apply_expansion_func: 17 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 19]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 17 apply_expand_func SUCCEED on exid:17 (corres_slot_id:17). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 20  belong_ex_id: 18
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 20]]
# _apply_expansion_func: 19 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 20]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 18 apply_expand_func SUCCEED on exid:18 (corres_slot_id:19). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 20 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 19 apply_expand_func SUCCEED on exid:19 (corres_slot_id:20). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 21  belong_ex_id: 20
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 21]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 18 ['fragment', ['"js.statement_block"', ['"*1"', 21]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 20 apply_expand_func SUCCEED on exid:20 (corres_slot_id:18). will pushleft 1 new slots
# Expansion create: ['fragment', '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"*1"', 'EMPTY']]
# _apply_expansion_func: 21 ['fragment', ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 21 apply_expand_func SUCCEED on exid:21 (corres_slot_id:21). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.function_declaration"', '"*1"'], '"*2"']
# Slot create: 22  belong_ex_id: 22
# Slot create: 23  belong_ex_id: 22
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.function_declaration"', ['"*1"', 22]], ['"*2"', 23]]
# _apply_expansion_func: 15 ['fragment', ['"js.function_declaration"', ['"*1"', 22]], ['"*2"', 23]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 22 apply_expand_func SUCCEED on exid:22 (corres_slot_id:15). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 24  belong_ex_id: 23
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"good"']], ['"*1"', 24]]
# _apply_expansion_func: 22 ['fragment', ['"js.identifier"', ['"_val1_"', '"good"']], ['"*1"', 24]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 23 apply_expand_func SUCCEED on exid:23 (corres_slot_id:22). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.formal_parameters"', '"*1"'], '"*2"']
# Slot create: 25  belong_ex_id: 24
# Slot create: 26  belong_ex_id: 24
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.formal_parameters"', ['"*1"', 25]], ['"*2"', 26]]
# _apply_expansion_func: 24 ['fragment', ['"js.formal_parameters"', ['"*1"', 25]], ['"*2"', 26]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 24 apply_expand_func SUCCEED on exid:24 (corres_slot_id:24). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 27  belong_ex_id: 25
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 27]]
# _apply_expansion_func: 25 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 27]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 25 apply_expand_func SUCCEED on exid:25 (corres_slot_id:25). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 27 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 26 apply_expand_func SUCCEED on exid:26 (corres_slot_id:27). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 28  belong_ex_id: 27
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 28]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 26 ['fragment', ['"js.statement_block"', ['"*1"', 28]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 27 apply_expand_func SUCCEED on exid:27 (corres_slot_id:26). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 29  belong_ex_id: 28
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 29]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 28 ['fragment', ['"js.lexical_declaration"', ['"*1"', 29]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 28 apply_expand_func SUCCEED on exid:28 (corres_slot_id:28). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 30  belong_ex_id: 29
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 30]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 29 ['fragment', ['"js.variable_declarator"', ['"*1"', 30]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 29 apply_expand_func SUCCEED on exid:29 (corres_slot_id:29). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 31  belong_ex_id: 30
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 31]]
# _apply_expansion_func: 30 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 31]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 30 apply_expand_func SUCCEED on exid:30 (corres_slot_id:30). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 32  belong_ex_id: 31
# Slot create: 33  belong_ex_id: 31
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 32], ['"_str1_"', '"+"'], ['".2"', 33]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 31 ['fragment', ['"js.binary_expression"', ['".1"', 32], ['"_str1_"', '"+"'], ['".2"', 33]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 31 apply_expand_func SUCCEED on exid:31 (corres_slot_id:31). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 32 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 32 apply_expand_func SUCCEED on exid:32 (corres_slot_id:32). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 33 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 33 apply_expand_func SUCCEED on exid:33 (corres_slot_id:33). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 34  belong_ex_id: 34
# Slot create: 35  belong_ex_id: 34
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 34]], ['"*2"', 35]]
# _apply_expansion_func: 23 ['fragment', ['"js.lexical_declaration"', ['"*1"', 34]], ['"*2"', 35]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 34 apply_expand_func SUCCEED on exid:34 (corres_slot_id:23). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 36  belong_ex_id: 35
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 36]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 34 ['fragment', ['"js.variable_declarator"', ['"*1"', 36]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 35 apply_expand_func SUCCEED on exid:35 (corres_slot_id:34). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 37  belong_ex_id: 36
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 37]]
# _apply_expansion_func: 36 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 37]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 36 apply_expand_func SUCCEED on exid:36 (corres_slot_id:36). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 38  belong_ex_id: 37
# Slot create: 39  belong_ex_id: 37
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 38], ['"_str1_"', '"*"'], ['".2"', 39]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 37 ['fragment', ['"js.binary_expression"', ['".1"', 38], ['"_str1_"', '"*"'], ['".2"', 39]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 37 apply_expand_func SUCCEED on exid:37 (corres_slot_id:37). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.parenthesized_expression"', '"*1"'], '"*2"']
# Slot create: 40  belong_ex_id: 38
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.parenthesized_expression"', ['"*1"', 40]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 38 ['fragment', ['"js.parenthesized_expression"', ['"*1"', 40]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 38 apply_expand_func SUCCEED on exid:38 (corres_slot_id:38). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 41  belong_ex_id: 39
# Slot create: 42  belong_ex_id: 39
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 41], ['"_str1_"', '"+"'], ['".2"', 42]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 40 ['fragment', ['"js.binary_expression"', ['".1"', 41], ['"_str1_"', '"+"'], ['".2"', 42]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 39 apply_expand_func SUCCEED on exid:39 (corres_slot_id:40). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 41 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 40 apply_expand_func SUCCEED on exid:40 (corres_slot_id:41). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 42 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 41 apply_expand_func SUCCEED on exid:41 (corres_slot_id:42). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 39 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 42 apply_expand_func SUCCEED on exid:42 (corres_slot_id:39). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', '".1"'], '"*2"'], '"*3"']
# Slot create: 43  belong_ex_id: 43
# Slot create: 44  belong_ex_id: 43
# Slot create: 45  belong_ex_id: 43
# _fill copy-and-fill-expand fill_count: 3 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 43]], ['"*2"', 44]], ['"*3"', 45]]
# _apply_expansion_func: 35 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 43]], ['"*2"', 44]], ['"*3"', 45]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 43 apply_expand_func SUCCEED on exid:43 (corres_slot_id:35). will pushleft 3 new slots
# Expansion create: ['fragment', ['"js.true"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 43 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 44 apply_expand_func SUCCEED on exid:44 (corres_slot_id:43). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 46  belong_ex_id: 45
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 46]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 44 ['fragment', ['"js.statement_block"', ['"*1"', 46]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 45 apply_expand_func SUCCEED on exid:45 (corres_slot_id:44). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 47  belong_ex_id: 46
# Slot create: 48  belong_ex_id: 46
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 47]], ['"*2"', 48]]
# _apply_expansion_func: 46 ['fragment', ['"js.lexical_declaration"', ['"*1"', 47]], ['"*2"', 48]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 46 apply_expand_func SUCCEED on exid:46 (corres_slot_id:46). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 49  belong_ex_id: 47
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 49]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 47 ['fragment', ['"js.variable_declarator"', ['"*1"', 49]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 47 apply_expand_func SUCCEED on exid:47 (corres_slot_id:47). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 50  belong_ex_id: 48
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 50]]
# _apply_expansion_func: 49 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 50]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 48 apply_expand_func SUCCEED on exid:48 (corres_slot_id:49). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 51  belong_ex_id: 49
# Slot create: 52  belong_ex_id: 49
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 51], ['"_str1_"', '"+"'], ['".2"', 52]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 50 ['fragment', ['"js.binary_expression"', ['".1"', 51], ['"_str1_"', '"+"'], ['".2"', 52]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 49 apply_expand_func SUCCEED on exid:49 (corres_slot_id:50). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 51 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 50 apply_expand_func SUCCEED on exid:50 (corres_slot_id:51). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 52 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 51 apply_expand_func SUCCEED on exid:51 (corres_slot_id:52). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', '".1"'], '"*2"'], '"*3"']
# Slot create: 53  belong_ex_id: 52
# Slot create: 54  belong_ex_id: 52
# Slot create: 55  belong_ex_id: 52
# _fill copy-and-fill-expand fill_count: 3 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 53]], ['"*2"', 54]], ['"*3"', 55]]
# _apply_expansion_func: 48 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 53]], ['"*2"', 54]], ['"*3"', 55]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 52 apply_expand_func SUCCEED on exid:52 (corres_slot_id:48). will pushleft 3 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 56  belong_ex_id: 53
# Slot create: 57  belong_ex_id: 53
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 56], ['"_str1_"', '"<"'], ['".2"', 57]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 53 ['fragment', ['"js.binary_expression"', ['".1"', 56], ['"_str1_"', '"<"'], ['".2"', 57]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 53 apply_expand_func SUCCEED on exid:53 (corres_slot_id:53). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 56 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 54 apply_expand_func SUCCEED on exid:54 (corres_slot_id:56). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"0"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 57 ['fragment', ['"js.number"', ['"_val1_"', '"0"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 55 apply_expand_func SUCCEED on exid:55 (corres_slot_id:57). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 58  belong_ex_id: 56
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 58]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 54 ['fragment', ['"js.statement_block"', ['"*1"', 58]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 56 apply_expand_func SUCCEED on exid:56 (corres_slot_id:54). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 59  belong_ex_id: 57
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 59]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 58 ['fragment', ['"js.lexical_declaration"', ['"*1"', 59]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 57 apply_expand_func SUCCEED on exid:57 (corres_slot_id:58). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 60  belong_ex_id: 58
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 60]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 59 ['fragment', ['"js.variable_declarator"', ['"*1"', 60]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 58 apply_expand_func SUCCEED on exid:58 (corres_slot_id:59). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 61  belong_ex_id: 59
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"fd"']], ['"*1"', 61]]
# _apply_expansion_func: 60 ['fragment', ['"js.identifier"', ['"_val1_"', '"fd"']], ['"*1"', 61]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 59 apply_expand_func SUCCEED on exid:59 (corres_slot_id:60). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 61 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 60 apply_expand_func SUCCEED on exid:60 (corres_slot_id:61). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', '".1"', ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', '".1"', ['str', '"<"'], '".2"']], ['"js.update_expression"', '".1"'], '"*3"'], '"*4"']
# Slot create: 62  belong_ex_id: 61
# Slot create: 63  belong_ex_id: 61
# Slot create: 64  belong_ex_id: 61
# Slot create: 65  belong_ex_id: 61
# Slot create: 66  belong_ex_id: 61
# Slot create: 67  belong_ex_id: 61
# _fill copy-and-fill-expand fill_count: 6 ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', ['".1"', 62], ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', ['".1"', 63], ['str', '"<"'], ['".2"', 64]]], ['"js.update_expression"', ['".1"', 65]], ['"*3"', 66]], ['"*4"', 67]]
# _apply_expansion_func: 55 ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', ['".1"', 62], ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', ['".1"', 63], ['str', '"<"'], ['".2"', 64]]], ['"js.update_expression"', ['".1"', 65]], ['"*3"', 66]], ['"*4"', 67]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 61 apply_expand_func SUCCEED on exid:61 (corres_slot_id:55). will pushleft 6 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 62 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 62 apply_expand_func SUCCEED on exid:62 (corres_slot_id:62). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 63 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 63 apply_expand_func SUCCEED on exid:63 (corres_slot_id:63). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"10"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 64 ['fragment', ['"js.number"', ['"_val1_"', '"10"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 64 apply_expand_func SUCCEED on exid:64 (corres_slot_id:64). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 65 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 65 apply_expand_func SUCCEED on exid:65 (corres_slot_id:65). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 68  belong_ex_id: 66
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 68]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 66 ['fragment', ['"js.statement_block"', ['"*1"', 68]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 66 apply_expand_func SUCCEED on exid:66 (corres_slot_id:66). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 69  belong_ex_id: 67
# Slot create: 70  belong_ex_id: 67
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 69]], ['"*2"', 70]]
# _apply_expansion_func: 68 ['fragment', ['"js.lexical_declaration"', ['"*1"', 69]], ['"*2"', 70]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 67 apply_expand_func SUCCEED on exid:67 (corres_slot_id:68). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 71  belong_ex_id: 68
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 71]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 69 ['fragment', ['"js.variable_declarator"', ['"*1"', 71]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 68 apply_expand_func SUCCEED on exid:68 (corres_slot_id:69). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 72  belong_ex_id: 69
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 72]]
# _apply_expansion_func: 71 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 72]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 69 apply_expand_func SUCCEED on exid:69 (corres_slot_id:71). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 73  belong_ex_id: 70
# Slot create: 74  belong_ex_id: 70
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 73], ['"_str1_"', '"+"'], ['".2"', 74]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 72 ['fragment', ['"js.binary_expression"', ['".1"', 73], ['"_str1_"', '"+"'], ['".2"', 74]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 70 apply_expand_func SUCCEED on exid:70 (corres_slot_id:72). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 73 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 71 apply_expand_func SUCCEED on exid:71 (corres_slot_id:73). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 74 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 72 apply_expand_func SUCCEED on exid:72 (corres_slot_id:74). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 75  belong_ex_id: 73
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 75]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 70 ['fragment', ['"js.lexical_declaration"', ['"*1"', 75]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 73 apply_expand_func SUCCEED on exid:73 (corres_slot_id:70). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 76  belong_ex_id: 74
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 76]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 75 ['fragment', ['"js.variable_declarator"', ['"*1"', 76]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 74 apply_expand_func SUCCEED on exid:74 (corres_slot_id:75). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 77  belong_ex_id: 75
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 77]]
# _apply_expansion_func: 76 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 77]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 75 apply_expand_func SUCCEED on exid:75 (corres_slot_id:76). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 78  belong_ex_id: 76
# Slot create: 79  belong_ex_id: 76
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 78], ['"_str1_"', '"*"'], ['".2"', 79]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 77 ['fragment', ['"js.binary_expression"', ['".1"', 78], ['"_str1_"', '"*"'], ['".2"', 79]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 76 apply_expand_func SUCCEED on exid:76 (corres_slot_id:77). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 78 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 77 apply_expand_func SUCCEED on exid:77 (corres_slot_id:78). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 79 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 78 apply_expand_func SUCCEED on exid:78 (corres_slot_id:79). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 80  belong_ex_id: 79
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 80]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 67 ['fragment', ['"js.lexical_declaration"', ['"*1"', 80]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 79 apply_expand_func SUCCEED on exid:79 (corres_slot_id:67). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 81  belong_ex_id: 80
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 81]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 80 ['fragment', ['"js.variable_declarator"', ['"*1"', 81]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 80 apply_expand_func SUCCEED on exid:80 (corres_slot_id:80). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 82  belong_ex_id: 81
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"c"']], ['"*1"', 82]]
# _apply_expansion_func: 81 ['fragment', ['"js.identifier"', ['"_val1_"', '"c"']], ['"*1"', 82]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 81 apply_expand_func SUCCEED on exid:81 (corres_slot_id:81). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 83  belong_ex_id: 82
# Slot create: 84  belong_ex_id: 82
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 83], ['"_str1_"', '"*"'], ['".2"', 84]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 82 ['fragment', ['"js.binary_expression"', ['".1"', 83], ['"_str1_"', '"*"'], ['".2"', 84]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 82 apply_expand_func SUCCEED on exid:82 (corres_slot_id:82). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 83 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 83 apply_expand_func SUCCEED on exid:83 (corres_slot_id:83). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 84 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 84 apply_expand_func SUCCEED on exid:84 (corres_slot_id:84). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 85  belong_ex_id: 85
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 85]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 45 ['fragment', ['"js.lexical_declaration"', ['"*1"', 85]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 85 apply_expand_func SUCCEED on exid:85 (corres_slot_id:45). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 86  belong_ex_id: 86
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 86]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 85 ['fragment', ['"js.variable_declarator"', ['"*1"', 86]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 86 apply_expand_func SUCCEED on exid:86 (corres_slot_id:85). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 87  belong_ex_id: 87
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"b"']], ['"*1"', 87]]
# _apply_expansion_func: 86 ['fragment', ['"js.identifier"', ['"_val1_"', '"b"']], ['"*1"', 87]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 87 apply_expand_func SUCCEED on exid:87 (corres_slot_id:86). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 88  belong_ex_id: 88
# Slot create: 89  belong_ex_id: 88
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 88], ['"_str1_"', '"-"'], ['".2"', 89]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 87 ['fragment', ['"js.binary_expression"', ['".1"', 88], ['"_str1_"', '"-"'], ['".2"', 89]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 88 apply_expand_func SUCCEED on exid:88 (corres_slot_id:87). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 88 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 89 apply_expand_func SUCCEED on exid:89 (corres_slot_id:88). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 89 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: True


********** _expand_loop 90 apply_expand_func SUCCEED on exid:90 (corres_slot_id:89). will pushleft 0 new slots
# _expand_loop FINISHED SUCCESSFULLY.

# ----- time elapsed: 0.12736100000256556


++++++++++++++++++++++++++++++++++++++++ _set_program_str. 2421 ++++++++++++++++++++++++++++++++++++++++

++++++++++++  set self.expansion_programs
# grm_get_start_NT: program
# Slot create: 0  belong_ex_id: None
_expand
# Expansion create: ['fragment', ['"js.program"', '"*1"']]
# Slot create: 1  belong_ex_id: 1
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.program"', ['"*1"', 1]]]
# _apply_expansion_func: 0 ['fragment', ['"js.program"', ['"*1"', 1]]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 1 apply_expand_func SUCCEED on exid:1 (corres_slot_id:0). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 2  belong_ex_id: 2
# Slot create: 3  belong_ex_id: 2
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 2]], ['"*2"', 3]]
# _apply_expansion_func: 1 ['fragment', ['"js.lexical_declaration"', ['"*1"', 2]], ['"*2"', 3]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 2 apply_expand_func SUCCEED on exid:2 (corres_slot_id:1). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 4  belong_ex_id: 3
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 4]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 4]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 3 apply_expand_func SUCCEED on exid:3 (corres_slot_id:2). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 5  belong_ex_id: 4
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 5]]
# _apply_expansion_func: 4 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 5]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 4 apply_expand_func SUCCEED on exid:4 (corres_slot_id:4). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.true"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 5 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 5 apply_expand_func SUCCEED on exid:5 (corres_slot_id:5). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 6  belong_ex_id: 6
# Slot create: 7  belong_ex_id: 6
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 6]], ['"*2"', 7]]
# _apply_expansion_func: 3 ['fragment', ['"js.lexical_declaration"', ['"*1"', 6]], ['"*2"', 7]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 6 apply_expand_func SUCCEED on exid:6 (corres_slot_id:3). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 8  belong_ex_id: 7
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 8]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 6 ['fragment', ['"js.variable_declarator"', ['"*1"', 8]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 7 apply_expand_func SUCCEED on exid:7 (corres_slot_id:6). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 9  belong_ex_id: 8
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 9]]
# _apply_expansion_func: 8 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 9]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 8 apply_expand_func SUCCEED on exid:8 (corres_slot_id:8). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"1"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 9 ['fragment', ['"js.number"', ['"_val1_"', '"1"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 9 apply_expand_func SUCCEED on exid:9 (corres_slot_id:9). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 10  belong_ex_id: 10
# Slot create: 11  belong_ex_id: 10
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 10]], ['"*2"', 11]]
# _apply_expansion_func: 7 ['fragment', ['"js.lexical_declaration"', ['"*1"', 10]], ['"*2"', 11]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 10 apply_expand_func SUCCEED on exid:10 (corres_slot_id:7). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 12  belong_ex_id: 11
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 12]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 10 ['fragment', ['"js.variable_declarator"', ['"*1"', 12]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 11 apply_expand_func SUCCEED on exid:11 (corres_slot_id:10). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 13  belong_ex_id: 12
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 13]]
# _apply_expansion_func: 12 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 13]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 12 apply_expand_func SUCCEED on exid:12 (corres_slot_id:12). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"3"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 13 ['fragment', ['"js.number"', ['"_val1_"', '"3"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 13 apply_expand_func SUCCEED on exid:13 (corres_slot_id:13). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.function_declaration"', '"*1"'], '"*2"']
# Slot create: 14  belong_ex_id: 14
# Slot create: 15  belong_ex_id: 14
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.function_declaration"', ['"*1"', 14]], ['"*2"', 15]]
# _apply_expansion_func: 11 ['fragment', ['"js.function_declaration"', ['"*1"', 14]], ['"*2"', 15]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 14 apply_expand_func SUCCEED on exid:14 (corres_slot_id:11). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 16  belong_ex_id: 15
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"baz"']], ['"*1"', 16]]
# _apply_expansion_func: 14 ['fragment', ['"js.identifier"', ['"_val1_"', '"baz"']], ['"*1"', 16]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 15 apply_expand_func SUCCEED on exid:15 (corres_slot_id:14). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.formal_parameters"', '"*1"'], '"*2"']
# Slot create: 17  belong_ex_id: 16
# Slot create: 18  belong_ex_id: 16
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.formal_parameters"', ['"*1"', 17]], ['"*2"', 18]]
# _apply_expansion_func: 16 ['fragment', ['"js.formal_parameters"', ['"*1"', 17]], ['"*2"', 18]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 16 apply_expand_func SUCCEED on exid:16 (corres_slot_id:16). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 19  belong_ex_id: 17
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 19]]
# _apply_expansion_func: 17 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 19]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 17 apply_expand_func SUCCEED on exid:17 (corres_slot_id:17). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 20  belong_ex_id: 18
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 20]]
# _apply_expansion_func: 19 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 20]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 18 apply_expand_func SUCCEED on exid:18 (corres_slot_id:19). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 20 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 19 apply_expand_func SUCCEED on exid:19 (corres_slot_id:20). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 21  belong_ex_id: 20
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 21]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 18 ['fragment', ['"js.statement_block"', ['"*1"', 21]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 20 apply_expand_func SUCCEED on exid:20 (corres_slot_id:18). will pushleft 1 new slots
# Expansion create: ['fragment', '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"*1"', 'EMPTY']]
# _apply_expansion_func: 21 ['fragment', ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 21 apply_expand_func SUCCEED on exid:21 (corres_slot_id:21). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.function_declaration"', '"*1"'], '"*2"']
# Slot create: 22  belong_ex_id: 22
# Slot create: 23  belong_ex_id: 22
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.function_declaration"', ['"*1"', 22]], ['"*2"', 23]]
# _apply_expansion_func: 15 ['fragment', ['"js.function_declaration"', ['"*1"', 22]], ['"*2"', 23]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 22 apply_expand_func SUCCEED on exid:22 (corres_slot_id:15). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 24  belong_ex_id: 23
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"good"']], ['"*1"', 24]]
# _apply_expansion_func: 22 ['fragment', ['"js.identifier"', ['"_val1_"', '"good"']], ['"*1"', 24]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 23 apply_expand_func SUCCEED on exid:23 (corres_slot_id:22). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.formal_parameters"', '"*1"'], '"*2"']
# Slot create: 25  belong_ex_id: 24
# Slot create: 26  belong_ex_id: 24
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.formal_parameters"', ['"*1"', 25]], ['"*2"', 26]]
# _apply_expansion_func: 24 ['fragment', ['"js.formal_parameters"', ['"*1"', 25]], ['"*2"', 26]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 24 apply_expand_func SUCCEED on exid:24 (corres_slot_id:24). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 27  belong_ex_id: 25
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 27]]
# _apply_expansion_func: 25 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 27]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 25 apply_expand_func SUCCEED on exid:25 (corres_slot_id:25). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 27 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 26 apply_expand_func SUCCEED on exid:26 (corres_slot_id:27). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 28  belong_ex_id: 27
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 28]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 26 ['fragment', ['"js.statement_block"', ['"*1"', 28]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 27 apply_expand_func SUCCEED on exid:27 (corres_slot_id:26). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 29  belong_ex_id: 28
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 29]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 28 ['fragment', ['"js.lexical_declaration"', ['"*1"', 29]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 28 apply_expand_func SUCCEED on exid:28 (corres_slot_id:28). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 30  belong_ex_id: 29
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 30]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 29 ['fragment', ['"js.variable_declarator"', ['"*1"', 30]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 29 apply_expand_func SUCCEED on exid:29 (corres_slot_id:29). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 31  belong_ex_id: 30
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 31]]
# _apply_expansion_func: 30 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 31]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 30 apply_expand_func SUCCEED on exid:30 (corres_slot_id:30). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 32  belong_ex_id: 31
# Slot create: 33  belong_ex_id: 31
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 32], ['"_str1_"', '"+"'], ['".2"', 33]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 31 ['fragment', ['"js.binary_expression"', ['".1"', 32], ['"_str1_"', '"+"'], ['".2"', 33]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 31 apply_expand_func SUCCEED on exid:31 (corres_slot_id:31). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 32 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 32 apply_expand_func SUCCEED on exid:32 (corres_slot_id:32). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 33 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 33 apply_expand_func SUCCEED on exid:33 (corres_slot_id:33). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 34  belong_ex_id: 34
# Slot create: 35  belong_ex_id: 34
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 34]], ['"*2"', 35]]
# _apply_expansion_func: 23 ['fragment', ['"js.lexical_declaration"', ['"*1"', 34]], ['"*2"', 35]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 34 apply_expand_func SUCCEED on exid:34 (corres_slot_id:23). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 36  belong_ex_id: 35
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 36]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 34 ['fragment', ['"js.variable_declarator"', ['"*1"', 36]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 35 apply_expand_func SUCCEED on exid:35 (corres_slot_id:34). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 37  belong_ex_id: 36
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 37]]
# _apply_expansion_func: 36 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 37]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 36 apply_expand_func SUCCEED on exid:36 (corres_slot_id:36). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 38  belong_ex_id: 37
# Slot create: 39  belong_ex_id: 37
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 38], ['"_str1_"', '"*"'], ['".2"', 39]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 37 ['fragment', ['"js.binary_expression"', ['".1"', 38], ['"_str1_"', '"*"'], ['".2"', 39]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 37 apply_expand_func SUCCEED on exid:37 (corres_slot_id:37). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.parenthesized_expression"', '"*1"'], '"*2"']
# Slot create: 40  belong_ex_id: 38
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.parenthesized_expression"', ['"*1"', 40]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 38 ['fragment', ['"js.parenthesized_expression"', ['"*1"', 40]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 38 apply_expand_func SUCCEED on exid:38 (corres_slot_id:38). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 41  belong_ex_id: 39
# Slot create: 42  belong_ex_id: 39
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 41], ['"_str1_"', '"+"'], ['".2"', 42]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 40 ['fragment', ['"js.binary_expression"', ['".1"', 41], ['"_str1_"', '"+"'], ['".2"', 42]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 39 apply_expand_func SUCCEED on exid:39 (corres_slot_id:40). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 41 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 40 apply_expand_func SUCCEED on exid:40 (corres_slot_id:41). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 42 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 41 apply_expand_func SUCCEED on exid:41 (corres_slot_id:42). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 39 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 42 apply_expand_func SUCCEED on exid:42 (corres_slot_id:39). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', '".1"'], '"*2"'], '"*3"']
# Slot create: 43  belong_ex_id: 43
# Slot create: 44  belong_ex_id: 43
# Slot create: 45  belong_ex_id: 43
# _fill copy-and-fill-expand fill_count: 3 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 43]], ['"*2"', 44]], ['"*3"', 45]]
# _apply_expansion_func: 35 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 43]], ['"*2"', 44]], ['"*3"', 45]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 43 apply_expand_func SUCCEED on exid:43 (corres_slot_id:35). will pushleft 3 new slots
# Expansion create: ['fragment', ['"js.true"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 43 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 44 apply_expand_func SUCCEED on exid:44 (corres_slot_id:43). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 46  belong_ex_id: 45
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 46]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 44 ['fragment', ['"js.statement_block"', ['"*1"', 46]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 45 apply_expand_func SUCCEED on exid:45 (corres_slot_id:44). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 47  belong_ex_id: 46
# Slot create: 48  belong_ex_id: 46
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 47]], ['"*2"', 48]]
# _apply_expansion_func: 46 ['fragment', ['"js.lexical_declaration"', ['"*1"', 47]], ['"*2"', 48]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 46 apply_expand_func SUCCEED on exid:46 (corres_slot_id:46). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 49  belong_ex_id: 47
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 49]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 47 ['fragment', ['"js.variable_declarator"', ['"*1"', 49]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 47 apply_expand_func SUCCEED on exid:47 (corres_slot_id:47). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 50  belong_ex_id: 48
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 50]]
# _apply_expansion_func: 49 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 50]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 48 apply_expand_func SUCCEED on exid:48 (corres_slot_id:49). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 51  belong_ex_id: 49
# Slot create: 52  belong_ex_id: 49
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 51], ['"_str1_"', '"+"'], ['".2"', 52]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 50 ['fragment', ['"js.binary_expression"', ['".1"', 51], ['"_str1_"', '"+"'], ['".2"', 52]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 49 apply_expand_func SUCCEED on exid:49 (corres_slot_id:50). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 51 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 50 apply_expand_func SUCCEED on exid:50 (corres_slot_id:51). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 52 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 51 apply_expand_func SUCCEED on exid:51 (corres_slot_id:52). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', '".1"'], '"*2"'], '"*3"']
# Slot create: 53  belong_ex_id: 52
# Slot create: 54  belong_ex_id: 52
# Slot create: 55  belong_ex_id: 52
# _fill copy-and-fill-expand fill_count: 3 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 53]], ['"*2"', 54]], ['"*3"', 55]]
# _apply_expansion_func: 48 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 53]], ['"*2"', 54]], ['"*3"', 55]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 52 apply_expand_func SUCCEED on exid:52 (corres_slot_id:48). will pushleft 3 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 56  belong_ex_id: 53
# Slot create: 57  belong_ex_id: 53
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 56], ['"_str1_"', '"<"'], ['".2"', 57]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 53 ['fragment', ['"js.binary_expression"', ['".1"', 56], ['"_str1_"', '"<"'], ['".2"', 57]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 53 apply_expand_func SUCCEED on exid:53 (corres_slot_id:53). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 56 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 54 apply_expand_func SUCCEED on exid:54 (corres_slot_id:56). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"0"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 57 ['fragment', ['"js.number"', ['"_val1_"', '"0"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 55 apply_expand_func SUCCEED on exid:55 (corres_slot_id:57). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 58  belong_ex_id: 56
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 58]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 54 ['fragment', ['"js.statement_block"', ['"*1"', 58]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 56 apply_expand_func SUCCEED on exid:56 (corres_slot_id:54). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 59  belong_ex_id: 57
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 59]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 58 ['fragment', ['"js.lexical_declaration"', ['"*1"', 59]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 57 apply_expand_func SUCCEED on exid:57 (corres_slot_id:58). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 60  belong_ex_id: 58
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 60]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 59 ['fragment', ['"js.variable_declarator"', ['"*1"', 60]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 58 apply_expand_func SUCCEED on exid:58 (corres_slot_id:59). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 61  belong_ex_id: 59
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"fd"']], ['"*1"', 61]]
# _apply_expansion_func: 60 ['fragment', ['"js.identifier"', ['"_val1_"', '"fd"']], ['"*1"', 61]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 59 apply_expand_func SUCCEED on exid:59 (corres_slot_id:60). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 61 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 60 apply_expand_func SUCCEED on exid:60 (corres_slot_id:61). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', '".1"', ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', '".1"', ['str', '"<"'], '".2"']], ['"js.update_expression"', '".1"'], '"*3"'], '"*4"']
# Slot create: 62  belong_ex_id: 61
# Slot create: 63  belong_ex_id: 61
# Slot create: 64  belong_ex_id: 61
# Slot create: 65  belong_ex_id: 61
# Slot create: 66  belong_ex_id: 61
# Slot create: 67  belong_ex_id: 61
# _fill copy-and-fill-expand fill_count: 6 ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', ['".1"', 62], ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', ['".1"', 63], ['str', '"<"'], ['".2"', 64]]], ['"js.update_expression"', ['".1"', 65]], ['"*3"', 66]], ['"*4"', 67]]
# _apply_expansion_func: 55 ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', ['".1"', 62], ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', ['".1"', 63], ['str', '"<"'], ['".2"', 64]]], ['"js.update_expression"', ['".1"', 65]], ['"*3"', 66]], ['"*4"', 67]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 61 apply_expand_func SUCCEED on exid:61 (corres_slot_id:55). will pushleft 6 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 62 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 62 apply_expand_func SUCCEED on exid:62 (corres_slot_id:62). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 63 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 63 apply_expand_func SUCCEED on exid:63 (corres_slot_id:63). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"10"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 64 ['fragment', ['"js.number"', ['"_val1_"', '"10"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 64 apply_expand_func SUCCEED on exid:64 (corres_slot_id:64). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 65 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 65 apply_expand_func SUCCEED on exid:65 (corres_slot_id:65). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 68  belong_ex_id: 66
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 68]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 66 ['fragment', ['"js.statement_block"', ['"*1"', 68]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 66 apply_expand_func SUCCEED on exid:66 (corres_slot_id:66). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 69  belong_ex_id: 67
# Slot create: 70  belong_ex_id: 67
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 69]], ['"*2"', 70]]
# _apply_expansion_func: 68 ['fragment', ['"js.lexical_declaration"', ['"*1"', 69]], ['"*2"', 70]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 67 apply_expand_func SUCCEED on exid:67 (corres_slot_id:68). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 71  belong_ex_id: 68
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 71]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 69 ['fragment', ['"js.variable_declarator"', ['"*1"', 71]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 68 apply_expand_func SUCCEED on exid:68 (corres_slot_id:69). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 72  belong_ex_id: 69
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 72]]
# _apply_expansion_func: 71 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 72]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 69 apply_expand_func SUCCEED on exid:69 (corres_slot_id:71). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 73  belong_ex_id: 70
# Slot create: 74  belong_ex_id: 70
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 73], ['"_str1_"', '"+"'], ['".2"', 74]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 72 ['fragment', ['"js.binary_expression"', ['".1"', 73], ['"_str1_"', '"+"'], ['".2"', 74]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 70 apply_expand_func SUCCEED on exid:70 (corres_slot_id:72). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 73 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 71 apply_expand_func SUCCEED on exid:71 (corres_slot_id:73). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 74 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 72 apply_expand_func SUCCEED on exid:72 (corres_slot_id:74). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 75  belong_ex_id: 73
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 75]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 70 ['fragment', ['"js.lexical_declaration"', ['"*1"', 75]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 73 apply_expand_func SUCCEED on exid:73 (corres_slot_id:70). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 76  belong_ex_id: 74
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 76]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 75 ['fragment', ['"js.variable_declarator"', ['"*1"', 76]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 74 apply_expand_func SUCCEED on exid:74 (corres_slot_id:75). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 77  belong_ex_id: 75
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 77]]
# _apply_expansion_func: 76 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 77]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 75 apply_expand_func SUCCEED on exid:75 (corres_slot_id:76). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 78  belong_ex_id: 76
# Slot create: 79  belong_ex_id: 76
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 78], ['"_str1_"', '"*"'], ['".2"', 79]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 77 ['fragment', ['"js.binary_expression"', ['".1"', 78], ['"_str1_"', '"*"'], ['".2"', 79]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 76 apply_expand_func SUCCEED on exid:76 (corres_slot_id:77). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 78 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 77 apply_expand_func SUCCEED on exid:77 (corres_slot_id:78). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 79 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 78 apply_expand_func SUCCEED on exid:78 (corres_slot_id:79). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 80  belong_ex_id: 79
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 80]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 67 ['fragment', ['"js.lexical_declaration"', ['"*1"', 80]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 79 apply_expand_func SUCCEED on exid:79 (corres_slot_id:67). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 81  belong_ex_id: 80
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 81]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 80 ['fragment', ['"js.variable_declarator"', ['"*1"', 81]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 80 apply_expand_func SUCCEED on exid:80 (corres_slot_id:80). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 82  belong_ex_id: 81
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"c"']], ['"*1"', 82]]
# _apply_expansion_func: 81 ['fragment', ['"js.identifier"', ['"_val1_"', '"c"']], ['"*1"', 82]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 81 apply_expand_func SUCCEED on exid:81 (corres_slot_id:81). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 83  belong_ex_id: 82
# Slot create: 84  belong_ex_id: 82
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 83], ['"_str1_"', '"*"'], ['".2"', 84]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 82 ['fragment', ['"js.binary_expression"', ['".1"', 83], ['"_str1_"', '"*"'], ['".2"', 84]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 82 apply_expand_func SUCCEED on exid:82 (corres_slot_id:82). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 83 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 83 apply_expand_func SUCCEED on exid:83 (corres_slot_id:83). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 84 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 84 apply_expand_func SUCCEED on exid:84 (corres_slot_id:84). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 85  belong_ex_id: 85
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 85]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 45 ['fragment', ['"js.lexical_declaration"', ['"*1"', 85]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 85 apply_expand_func SUCCEED on exid:85 (corres_slot_id:45). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 86  belong_ex_id: 86
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 86]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 85 ['fragment', ['"js.variable_declarator"', ['"*1"', 86]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 86 apply_expand_func SUCCEED on exid:86 (corres_slot_id:85). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 87  belong_ex_id: 87
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"b"']], ['"*1"', 87]]
# _apply_expansion_func: 86 ['fragment', ['"js.identifier"', ['"_val1_"', '"b"']], ['"*1"', 87]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 87 apply_expand_func SUCCEED on exid:87 (corres_slot_id:86). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 88  belong_ex_id: 88
# Slot create: 89  belong_ex_id: 88
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 88], ['"_str1_"', '"-"'], ['".2"', 89]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 87 ['fragment', ['"js.binary_expression"', ['".1"', 88], ['"_str1_"', '"-"'], ['".2"', 89]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 88 apply_expand_func SUCCEED on exid:88 (corres_slot_id:87). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 88 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 89 apply_expand_func SUCCEED on exid:89 (corres_slot_id:88). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 89 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: True


********** _expand_loop 90 apply_expand_func SUCCEED on exid:90 (corres_slot_id:89). will pushleft 0 new slots
# _expand_loop FINISHED SUCCESSFULLY.

# ----- time elapsed: 0.11503139999695122


++++++++++++++++++++++++++++++++++++++++ _set_program_str. 2421 ++++++++++++++++++++++++++++++++++++++++

++++++++++++  set self.expansion_programs
# grm_get_start_NT: program
# Slot create: 0  belong_ex_id: None
_expand
# Expansion create: ['fragment', ['"js.program"', '"*1"']]
# Slot create: 1  belong_ex_id: 1
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.program"', ['"*1"', 1]]]
# _apply_expansion_func: 0 ['fragment', ['"js.program"', ['"*1"', 1]]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 1 apply_expand_func SUCCEED on exid:1 (corres_slot_id:0). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 2  belong_ex_id: 2
# Slot create: 3  belong_ex_id: 2
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 2]], ['"*2"', 3]]
# _apply_expansion_func: 1 ['fragment', ['"js.lexical_declaration"', ['"*1"', 2]], ['"*2"', 3]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 2 apply_expand_func SUCCEED on exid:2 (corres_slot_id:1). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 4  belong_ex_id: 3
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 4]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 4]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 3 apply_expand_func SUCCEED on exid:3 (corres_slot_id:2). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 5  belong_ex_id: 4
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 5]]
# _apply_expansion_func: 4 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 5]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 4 apply_expand_func SUCCEED on exid:4 (corres_slot_id:4). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.true"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 5 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 5 apply_expand_func SUCCEED on exid:5 (corres_slot_id:5). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 6  belong_ex_id: 6
# Slot create: 7  belong_ex_id: 6
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 6]], ['"*2"', 7]]
# _apply_expansion_func: 3 ['fragment', ['"js.lexical_declaration"', ['"*1"', 6]], ['"*2"', 7]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 6 apply_expand_func SUCCEED on exid:6 (corres_slot_id:3). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 8  belong_ex_id: 7
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 8]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 6 ['fragment', ['"js.variable_declarator"', ['"*1"', 8]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 7 apply_expand_func SUCCEED on exid:7 (corres_slot_id:6). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 9  belong_ex_id: 8
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 9]]
# _apply_expansion_func: 8 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 9]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 8 apply_expand_func SUCCEED on exid:8 (corres_slot_id:8). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"1"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 9 ['fragment', ['"js.number"', ['"_val1_"', '"1"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 9 apply_expand_func SUCCEED on exid:9 (corres_slot_id:9). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 10  belong_ex_id: 10
# Slot create: 11  belong_ex_id: 10
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 10]], ['"*2"', 11]]
# _apply_expansion_func: 7 ['fragment', ['"js.lexical_declaration"', ['"*1"', 10]], ['"*2"', 11]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 10 apply_expand_func SUCCEED on exid:10 (corres_slot_id:7). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 12  belong_ex_id: 11
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 12]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 10 ['fragment', ['"js.variable_declarator"', ['"*1"', 12]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 11 apply_expand_func SUCCEED on exid:11 (corres_slot_id:10). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 13  belong_ex_id: 12
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 13]]
# _apply_expansion_func: 12 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 13]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 12 apply_expand_func SUCCEED on exid:12 (corres_slot_id:12). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"3"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 13 ['fragment', ['"js.number"', ['"_val1_"', '"3"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 13 apply_expand_func SUCCEED on exid:13 (corres_slot_id:13). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.function_declaration"', '"*1"'], '"*2"']
# Slot create: 14  belong_ex_id: 14
# Slot create: 15  belong_ex_id: 14
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.function_declaration"', ['"*1"', 14]], ['"*2"', 15]]
# _apply_expansion_func: 11 ['fragment', ['"js.function_declaration"', ['"*1"', 14]], ['"*2"', 15]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 14 apply_expand_func SUCCEED on exid:14 (corres_slot_id:11). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 16  belong_ex_id: 15
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"baz"']], ['"*1"', 16]]
# _apply_expansion_func: 14 ['fragment', ['"js.identifier"', ['"_val1_"', '"baz"']], ['"*1"', 16]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 15 apply_expand_func SUCCEED on exid:15 (corres_slot_id:14). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.formal_parameters"', '"*1"'], '"*2"']
# Slot create: 17  belong_ex_id: 16
# Slot create: 18  belong_ex_id: 16
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.formal_parameters"', ['"*1"', 17]], ['"*2"', 18]]
# _apply_expansion_func: 16 ['fragment', ['"js.formal_parameters"', ['"*1"', 17]], ['"*2"', 18]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 16 apply_expand_func SUCCEED on exid:16 (corres_slot_id:16). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 19  belong_ex_id: 17
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 19]]
# _apply_expansion_func: 17 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 19]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 17 apply_expand_func SUCCEED on exid:17 (corres_slot_id:17). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 20  belong_ex_id: 18
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 20]]
# _apply_expansion_func: 19 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 20]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 18 apply_expand_func SUCCEED on exid:18 (corres_slot_id:19). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 20 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 19 apply_expand_func SUCCEED on exid:19 (corres_slot_id:20). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 21  belong_ex_id: 20
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 21]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 18 ['fragment', ['"js.statement_block"', ['"*1"', 21]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 20 apply_expand_func SUCCEED on exid:20 (corres_slot_id:18). will pushleft 1 new slots
# Expansion create: ['fragment', '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"*1"', 'EMPTY']]
# _apply_expansion_func: 21 ['fragment', ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 21 apply_expand_func SUCCEED on exid:21 (corres_slot_id:21). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.function_declaration"', '"*1"'], '"*2"']
# Slot create: 22  belong_ex_id: 22
# Slot create: 23  belong_ex_id: 22
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.function_declaration"', ['"*1"', 22]], ['"*2"', 23]]
# _apply_expansion_func: 15 ['fragment', ['"js.function_declaration"', ['"*1"', 22]], ['"*2"', 23]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 22 apply_expand_func SUCCEED on exid:22 (corres_slot_id:15). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 24  belong_ex_id: 23
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"good"']], ['"*1"', 24]]
# _apply_expansion_func: 22 ['fragment', ['"js.identifier"', ['"_val1_"', '"good"']], ['"*1"', 24]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 23 apply_expand_func SUCCEED on exid:23 (corres_slot_id:22). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.formal_parameters"', '"*1"'], '"*2"']
# Slot create: 25  belong_ex_id: 24
# Slot create: 26  belong_ex_id: 24
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.formal_parameters"', ['"*1"', 25]], ['"*2"', 26]]
# _apply_expansion_func: 24 ['fragment', ['"js.formal_parameters"', ['"*1"', 25]], ['"*2"', 26]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 24 apply_expand_func SUCCEED on exid:24 (corres_slot_id:24). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 27  belong_ex_id: 25
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 27]]
# _apply_expansion_func: 25 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 27]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 25 apply_expand_func SUCCEED on exid:25 (corres_slot_id:25). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 27 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 26 apply_expand_func SUCCEED on exid:26 (corres_slot_id:27). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 28  belong_ex_id: 27
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 28]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 26 ['fragment', ['"js.statement_block"', ['"*1"', 28]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 27 apply_expand_func SUCCEED on exid:27 (corres_slot_id:26). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 29  belong_ex_id: 28
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 29]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 28 ['fragment', ['"js.lexical_declaration"', ['"*1"', 29]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 28 apply_expand_func SUCCEED on exid:28 (corres_slot_id:28). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 30  belong_ex_id: 29
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 30]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 29 ['fragment', ['"js.variable_declarator"', ['"*1"', 30]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 29 apply_expand_func SUCCEED on exid:29 (corres_slot_id:29). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 31  belong_ex_id: 30
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 31]]
# _apply_expansion_func: 30 ['fragment', ['"js.identifier"', ['"_val1_"', '"z"']], ['"*1"', 31]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 30 apply_expand_func SUCCEED on exid:30 (corres_slot_id:30). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 32  belong_ex_id: 31
# Slot create: 33  belong_ex_id: 31
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 32], ['"_str1_"', '"+"'], ['".2"', 33]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 31 ['fragment', ['"js.binary_expression"', ['".1"', 32], ['"_str1_"', '"+"'], ['".2"', 33]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 31 apply_expand_func SUCCEED on exid:31 (corres_slot_id:31). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 32 ['fragment', ['"js.identifier"', ['"_val1_"', '"x"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 32 apply_expand_func SUCCEED on exid:32 (corres_slot_id:32). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 33 ['fragment', ['"js.identifier"', ['"_val1_"', '"y"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 33 apply_expand_func SUCCEED on exid:33 (corres_slot_id:33). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 34  belong_ex_id: 34
# Slot create: 35  belong_ex_id: 34
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 34]], ['"*2"', 35]]
# _apply_expansion_func: 23 ['fragment', ['"js.lexical_declaration"', ['"*1"', 34]], ['"*2"', 35]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 34 apply_expand_func SUCCEED on exid:34 (corres_slot_id:23). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 36  belong_ex_id: 35
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 36]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 34 ['fragment', ['"js.variable_declarator"', ['"*1"', 36]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 35 apply_expand_func SUCCEED on exid:35 (corres_slot_id:34). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 37  belong_ex_id: 36
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 37]]
# _apply_expansion_func: 36 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 37]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 36 apply_expand_func SUCCEED on exid:36 (corres_slot_id:36). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 38  belong_ex_id: 37
# Slot create: 39  belong_ex_id: 37
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 38], ['"_str1_"', '"*"'], ['".2"', 39]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 37 ['fragment', ['"js.binary_expression"', ['".1"', 38], ['"_str1_"', '"*"'], ['".2"', 39]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 37 apply_expand_func SUCCEED on exid:37 (corres_slot_id:37). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.parenthesized_expression"', '"*1"'], '"*2"']
# Slot create: 40  belong_ex_id: 38
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.parenthesized_expression"', ['"*1"', 40]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 38 ['fragment', ['"js.parenthesized_expression"', ['"*1"', 40]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 38 apply_expand_func SUCCEED on exid:38 (corres_slot_id:38). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 41  belong_ex_id: 39
# Slot create: 42  belong_ex_id: 39
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 41], ['"_str1_"', '"+"'], ['".2"', 42]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 40 ['fragment', ['"js.binary_expression"', ['".1"', 41], ['"_str1_"', '"+"'], ['".2"', 42]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 39 apply_expand_func SUCCEED on exid:39 (corres_slot_id:40). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 41 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 40 apply_expand_func SUCCEED on exid:40 (corres_slot_id:41). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 42 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 41 apply_expand_func SUCCEED on exid:41 (corres_slot_id:42). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 39 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 42 apply_expand_func SUCCEED on exid:42 (corres_slot_id:39). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', '".1"'], '"*2"'], '"*3"']
# Slot create: 43  belong_ex_id: 43
# Slot create: 44  belong_ex_id: 43
# Slot create: 45  belong_ex_id: 43
# _fill copy-and-fill-expand fill_count: 3 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 43]], ['"*2"', 44]], ['"*3"', 45]]
# _apply_expansion_func: 35 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 43]], ['"*2"', 44]], ['"*3"', 45]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 43 apply_expand_func SUCCEED on exid:43 (corres_slot_id:35). will pushleft 3 new slots
# Expansion create: ['fragment', ['"js.true"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 1 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 43 ['fragment', ['"js.true"'], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 44 apply_expand_func SUCCEED on exid:44 (corres_slot_id:43). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 46  belong_ex_id: 45
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 46]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 44 ['fragment', ['"js.statement_block"', ['"*1"', 46]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 45 apply_expand_func SUCCEED on exid:45 (corres_slot_id:44). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 47  belong_ex_id: 46
# Slot create: 48  belong_ex_id: 46
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 47]], ['"*2"', 48]]
# _apply_expansion_func: 46 ['fragment', ['"js.lexical_declaration"', ['"*1"', 47]], ['"*2"', 48]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 46 apply_expand_func SUCCEED on exid:46 (corres_slot_id:46). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 49  belong_ex_id: 47
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 49]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 47 ['fragment', ['"js.variable_declarator"', ['"*1"', 49]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 47 apply_expand_func SUCCEED on exid:47 (corres_slot_id:47). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 50  belong_ex_id: 48
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 50]]
# _apply_expansion_func: 49 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 50]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 48 apply_expand_func SUCCEED on exid:48 (corres_slot_id:49). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 51  belong_ex_id: 49
# Slot create: 52  belong_ex_id: 49
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 51], ['"_str1_"', '"+"'], ['".2"', 52]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 50 ['fragment', ['"js.binary_expression"', ['".1"', 51], ['"_str1_"', '"+"'], ['".2"', 52]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 49 apply_expand_func SUCCEED on exid:49 (corres_slot_id:50). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 51 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 50 apply_expand_func SUCCEED on exid:50 (corres_slot_id:51). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 52 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 51 apply_expand_func SUCCEED on exid:51 (corres_slot_id:52). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', '".1"'], '"*2"'], '"*3"']
# Slot create: 53  belong_ex_id: 52
# Slot create: 54  belong_ex_id: 52
# Slot create: 55  belong_ex_id: 52
# _fill copy-and-fill-expand fill_count: 3 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 53]], ['"*2"', 54]], ['"*3"', 55]]
# _apply_expansion_func: 48 ['fragment', ['"js.if_statement"', ['"js.parenthesized_expression"', ['".1"', 53]], ['"*2"', 54]], ['"*3"', 55]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 52 apply_expand_func SUCCEED on exid:52 (corres_slot_id:48). will pushleft 3 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 56  belong_ex_id: 53
# Slot create: 57  belong_ex_id: 53
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 56], ['"_str1_"', '"<"'], ['".2"', 57]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 53 ['fragment', ['"js.binary_expression"', ['".1"', 56], ['"_str1_"', '"<"'], ['".2"', 57]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 53 apply_expand_func SUCCEED on exid:53 (corres_slot_id:53). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 56 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 54 apply_expand_func SUCCEED on exid:54 (corres_slot_id:56). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"0"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 57 ['fragment', ['"js.number"', ['"_val1_"', '"0"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 55 apply_expand_func SUCCEED on exid:55 (corres_slot_id:57). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 58  belong_ex_id: 56
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 58]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 54 ['fragment', ['"js.statement_block"', ['"*1"', 58]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 56 apply_expand_func SUCCEED on exid:56 (corres_slot_id:54). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 59  belong_ex_id: 57
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 59]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 58 ['fragment', ['"js.lexical_declaration"', ['"*1"', 59]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 57 apply_expand_func SUCCEED on exid:57 (corres_slot_id:58). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 60  belong_ex_id: 58
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 60]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 59 ['fragment', ['"js.variable_declarator"', ['"*1"', 60]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 58 apply_expand_func SUCCEED on exid:58 (corres_slot_id:59). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 61  belong_ex_id: 59
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"fd"']], ['"*1"', 61]]
# _apply_expansion_func: 60 ['fragment', ['"js.identifier"', ['"_val1_"', '"fd"']], ['"*1"', 61]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 59 apply_expand_func SUCCEED on exid:59 (corres_slot_id:60). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 61 ['fragment', ['"js.identifier"', ['"_val1_"', '"bar"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 60 apply_expand_func SUCCEED on exid:60 (corres_slot_id:61). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', '".1"', ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', '".1"', ['str', '"<"'], '".2"']], ['"js.update_expression"', '".1"'], '"*3"'], '"*4"']
# Slot create: 62  belong_ex_id: 61
# Slot create: 63  belong_ex_id: 61
# Slot create: 64  belong_ex_id: 61
# Slot create: 65  belong_ex_id: 61
# Slot create: 66  belong_ex_id: 61
# Slot create: 67  belong_ex_id: 61
# _fill copy-and-fill-expand fill_count: 6 ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', ['".1"', 62], ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', ['".1"', 63], ['str', '"<"'], ['".2"', 64]]], ['"js.update_expression"', ['".1"', 65]], ['"*3"', 66]], ['"*4"', 67]]
# _apply_expansion_func: 55 ['fragment', ['"js.for_statement"', ['"js.lexical_declaration"', ['"js.variable_declarator"', ['".1"', 62], ['"js.number"', ['val', '0']]]], ['"js.expression_statement"', ['"js.binary_expression"', ['".1"', 63], ['str', '"<"'], ['".2"', 64]]], ['"js.update_expression"', ['".1"', 65]], ['"*3"', 66]], ['"*4"', 67]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 61 apply_expand_func SUCCEED on exid:61 (corres_slot_id:55). will pushleft 6 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 62 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 62 apply_expand_func SUCCEED on exid:62 (corres_slot_id:62). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 63 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 63 apply_expand_func SUCCEED on exid:63 (corres_slot_id:63). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.number"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.number"', ['"_val1_"', '"10"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 64 ['fragment', ['"js.number"', ['"_val1_"', '"10"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 64 apply_expand_func SUCCEED on exid:64 (corres_slot_id:64). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 65 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 65 apply_expand_func SUCCEED on exid:65 (corres_slot_id:65). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.statement_block"', '"*1"'], '"*2"']
# Slot create: 68  belong_ex_id: 66
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.statement_block"', ['"*1"', 68]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 66 ['fragment', ['"js.statement_block"', ['"*1"', 68]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 66 apply_expand_func SUCCEED on exid:66 (corres_slot_id:66). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 69  belong_ex_id: 67
# Slot create: 70  belong_ex_id: 67
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 69]], ['"*2"', 70]]
# _apply_expansion_func: 68 ['fragment', ['"js.lexical_declaration"', ['"*1"', 69]], ['"*2"', 70]]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 67 apply_expand_func SUCCEED on exid:67 (corres_slot_id:68). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 71  belong_ex_id: 68
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 71]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 69 ['fragment', ['"js.variable_declarator"', ['"*1"', 71]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 68 apply_expand_func SUCCEED on exid:68 (corres_slot_id:69). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 72  belong_ex_id: 69
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 72]]
# _apply_expansion_func: 71 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 72]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 69 apply_expand_func SUCCEED on exid:69 (corres_slot_id:71). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 73  belong_ex_id: 70
# Slot create: 74  belong_ex_id: 70
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 73], ['"_str1_"', '"+"'], ['".2"', 74]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 72 ['fragment', ['"js.binary_expression"', ['".1"', 73], ['"_str1_"', '"+"'], ['".2"', 74]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 70 apply_expand_func SUCCEED on exid:70 (corres_slot_id:72). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 73 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 71 apply_expand_func SUCCEED on exid:71 (corres_slot_id:73). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 74 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 72 apply_expand_func SUCCEED on exid:72 (corres_slot_id:74). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 75  belong_ex_id: 73
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 75]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 70 ['fragment', ['"js.lexical_declaration"', ['"*1"', 75]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 73 apply_expand_func SUCCEED on exid:73 (corres_slot_id:70). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 76  belong_ex_id: 74
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 76]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 75 ['fragment', ['"js.variable_declarator"', ['"*1"', 76]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 74 apply_expand_func SUCCEED on exid:74 (corres_slot_id:75). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 77  belong_ex_id: 75
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 77]]
# _apply_expansion_func: 76 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 77]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 75 apply_expand_func SUCCEED on exid:75 (corres_slot_id:76). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 78  belong_ex_id: 76
# Slot create: 79  belong_ex_id: 76
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 78], ['"_str1_"', '"*"'], ['".2"', 79]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 77 ['fragment', ['"js.binary_expression"', ['".1"', 78], ['"_str1_"', '"*"'], ['".2"', 79]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 76 apply_expand_func SUCCEED on exid:76 (corres_slot_id:77). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 78 ['fragment', ['"js.identifier"', ['"_val1_"', '"i"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 77 apply_expand_func SUCCEED on exid:77 (corres_slot_id:78). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 79 ['fragment', ['"js.identifier"', ['"_val1_"', '"core"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 78 apply_expand_func SUCCEED on exid:78 (corres_slot_id:79). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 80  belong_ex_id: 79
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 80]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 67 ['fragment', ['"js.lexical_declaration"', ['"*1"', 80]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 79 apply_expand_func SUCCEED on exid:79 (corres_slot_id:67). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 81  belong_ex_id: 80
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 81]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 80 ['fragment', ['"js.variable_declarator"', ['"*1"', 81]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 80 apply_expand_func SUCCEED on exid:80 (corres_slot_id:80). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 82  belong_ex_id: 81
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"c"']], ['"*1"', 82]]
# _apply_expansion_func: 81 ['fragment', ['"js.identifier"', ['"_val1_"', '"c"']], ['"*1"', 82]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 81 apply_expand_func SUCCEED on exid:81 (corres_slot_id:81). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 83  belong_ex_id: 82
# Slot create: 84  belong_ex_id: 82
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 83], ['"_str1_"', '"*"'], ['".2"', 84]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 82 ['fragment', ['"js.binary_expression"', ['".1"', 83], ['"_str1_"', '"*"'], ['".2"', 84]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 82 apply_expand_func SUCCEED on exid:82 (corres_slot_id:82). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 83 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 83 apply_expand_func SUCCEED on exid:83 (corres_slot_id:83). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 84 ['fragment', ['"js.identifier"', ['"_val1_"', '"a"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 84 apply_expand_func SUCCEED on exid:84 (corres_slot_id:84). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.lexical_declaration"', '"*1"'], '"*2"']
# Slot create: 85  belong_ex_id: 85
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.lexical_declaration"', ['"*1"', 85]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 45 ['fragment', ['"js.lexical_declaration"', ['"*1"', 85]], ['"*2"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 85 apply_expand_func SUCCEED on exid:85 (corres_slot_id:45). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.variable_declarator"', '"*1"'], '"*2"']
# Slot create: 86  belong_ex_id: 86
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.variable_declarator"', ['"*1"', 86]], ['"*2"', 'EMPTY']]
# _apply_expansion_func: 85 ['fragment', ['"js.variable_declarator"', ['"*1"', 86]], ['"*2"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 86 apply_expand_func SUCCEED on exid:86 (corres_slot_id:85). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# Slot create: 87  belong_ex_id: 87
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"b"']], ['"*1"', 87]]
# _apply_expansion_func: 86 ['fragment', ['"js.identifier"', ['"_val1_"', '"b"']], ['"*1"', 87]]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 87 apply_expand_func SUCCEED on exid:87 (corres_slot_id:86). will pushleft 1 new slots
# Expansion create: ['fragment', ['"js.binary_expression"', '".1"', '"_str1_"', '".2"'], '"*3"']
# Slot create: 88  belong_ex_id: 88
# Slot create: 89  belong_ex_id: 88
# _fill copy-and-fill-expand fill_count: 4 ['fragment', ['"js.binary_expression"', ['".1"', 88], ['"_str1_"', '"-"'], ['".2"', 89]], ['"*3"', 'EMPTY']]
# _apply_expansion_func: 87 ['fragment', ['"js.binary_expression"', ['".1"', 88], ['"_str1_"', '"-"'], ['".2"', 89]], ['"*3"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 88 apply_expand_func SUCCEED on exid:88 (corres_slot_id:87). will pushleft 2 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 88 ['fragment', ['"js.identifier"', ['"_val1_"', '"m"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func is_acceptable: True  is_finished: False


********** _expand_loop 89 apply_expand_func SUCCEED on exid:89 (corres_slot_id:88). will pushleft 0 new slots
# Expansion create: ['fragment', ['"js.identifier"', '"_val1_"'], '"*1"']
# _fill copy-and-fill-expand fill_count: 2 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
# _apply_expansion_func: 89 ['fragment', ['"js.identifier"', ['"_val1_"', '"pi"']], ['"*1"', 'EMPTY']]
WARNING: grm_external_NT_pretty_string is not implemented. dumb value.
# _apply_expansion_func is_acceptable: True  is_finished: True


********** _expand_loop 90 apply_expand_func SUCCEED on exid:90 (corres_slot_id:89). will pushleft 0 new slots
# _expand_loop FINISHED SUCCESSFULLY.

# ----- time elapsed: 0.09625470000173664
         3302095 function calls (2288220 primitive calls) in 35.020 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
  1116/43    0.005    0.000    1.982    0.046 <frozen importlib._bootstrap>:1011(_gcd_import)
  196/164    0.001    0.000    0.432    0.003 <frozen importlib._bootstrap>:1026(_handle_fromlist)
      768    0.003    0.000    0.006    0.000 <frozen importlib._bootstrap>:1063(_calc___package__)
   983/24    0.005    0.000    1.982    0.083 <frozen importlib._bootstrap>:1090(__import__)
     1900    0.011    0.000    0.011    0.000 <frozen importlib._bootstrap>:112(release)
     1116    0.003    0.000    0.003    0.000 <frozen importlib._bootstrap>:152(__init__)
     1116    0.003    0.000    0.035    0.000 <frozen importlib._bootstrap>:156(__enter__)
     1116    0.003    0.000    0.011    0.000 <frozen importlib._bootstrap>:160(__exit__)
     1900    0.016    0.000    0.022    0.000 <frozen importlib._bootstrap>:166(_get_module_lock)
      385    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap>:185(cb)
      784    0.002    0.000    0.013    0.000 <frozen importlib._bootstrap>:203(_lock_unlock_module)
   361/13    0.002    0.000    1.963    0.151 <frozen importlib._bootstrap>:220(_call_with_frames_removed)
     2211    0.010    0.000    0.010    0.000 <frozen importlib._bootstrap>:231(_verbose_message)
       16    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:241(_requires_builtin_wrapper)
      277    0.002    0.000    0.002    0.000 <frozen importlib._bootstrap>:35(_new_module)
      324    0.002    0.000    0.002    0.000 <frozen importlib._bootstrap>:351(__init__)
      563    0.001    0.000    0.028    0.000 <frozen importlib._bootstrap>:385(cached)
     1070    0.002    0.000    0.003    0.000 <frozen importlib._bootstrap>:398(parent)
      302    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:406(has_location)
       16    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:415(spec_from_loader)
      302    0.004    0.000    0.036    0.000 <frozen importlib._bootstrap>:486(_init_module_attrs)
      302    0.002    0.000    0.047    0.000 <frozen importlib._bootstrap>:558(module_from_spec)
      402    0.003    0.000    0.004    0.000 <frozen importlib._bootstrap>:58(__init__)
   302/12    0.006    0.000    1.971    0.164 <frozen importlib._bootstrap>:659(_load_unlocked)
      324    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:734(find_spec)
       16    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:755(create_module)
       16    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:763(exec_module)
       16    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:780(is_package)
      308    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:809(find_spec)
     1900    0.017    0.000    0.017    0.000 <frozen importlib._bootstrap>:87(acquire)
      940    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap>:872(__enter__)
      940    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap>:876(__exit__)
      768    0.003    0.000    0.008    0.000 <frozen importlib._bootstrap>:881(_resolve_name)
      324    0.009    0.000    0.141    0.000 <frozen importlib._bootstrap>:899(_find_spec)
     1116    0.003    0.000    0.004    0.000 <frozen importlib._bootstrap>:946(_sanity_check)
   332/13    0.006    0.000    1.978    0.152 <frozen importlib._bootstrap>:965(_find_and_load_unlocked)
  1116/43    0.010    0.000    1.982    0.046 <frozen importlib._bootstrap>:995(_find_and_load)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 <string>:1(__create_fn__)
        1    0.000    0.000    0.000    0.000 <string>:1(__new__)
        1    0.000    0.000    0.000    0.000 <werkzeug routing>:1(<module>)
        7    0.000    0.000    0.001    0.000 ?:1(anonymous)
        7    0.000    0.000    0.000    0.000 ?:3(<lambda>)
        1    0.000    0.000    0.000    0.000 __future__.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __future__.py:81(_Feature)
       10    0.000    0.000    0.000    0.000 __future__.py:83(__init__)
       30    0.011    0.000    2.971    0.099 __init__.py:1(<module>)
        2    0.000    0.000    0.000    0.000 __init__.py:102(CFunctionType)
        1    0.000    0.000    0.000    0.000 __init__.py:102(shake_128)
        1    0.000    0.000    0.000    0.000 __init__.py:1022(SSLSession)
        1    0.000    0.000    0.000    0.000 __init__.py:104(NameFetcher)
        1    0.000    0.000    0.000    0.000 __init__.py:1042(StreamHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:105(__init__)
        2    0.000    0.000    0.000    0.000 __init__.py:1051(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:106(__version__)
        1    0.000    0.000    0.000    0.000 __init__.py:106(shake_256)
        2    0.000    0.000    0.000    0.000 __init__.py:1062(flush)
        1    0.000    0.000    0.000    0.000 __init__.py:1069(_SSLContext)
        2    0.000    0.000    0.000    0.000 __init__.py:1073(emit)
        6    0.000    0.000    0.000    0.000 __init__.py:11(new)
        1    0.000    0.000    0.000    0.000 __init__.py:110(_fetch_names)
        1    0.000    0.000    0.000    0.000 __init__.py:1125(FileHandler)
        2    0.000    0.000    0.000    0.000 __init__.py:119(getLevelName)
        1    0.000    0.000    0.000    0.000 __init__.py:1194(_StderrHandler)
       59    0.000    0.000    0.000    0.000 __init__.py:120(hash_name_mapper_callback)
        1    0.000    0.000    0.000    0.000 __init__.py:1200(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1218(PlaceHolder)
        1    0.000    0.000    0.000    0.000 __init__.py:122(_ConsoleFrame)
        5    0.043    0.009    1.418    0.284 __init__.py:126(dump)
        1    0.000    0.000    0.000    0.000 __init__.py:1260(Manager)
        1    0.000    0.000    0.000    0.000 __init__.py:1265(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1276(disable)
        1    0.000    0.000    0.000    0.000 __init__.py:1280(disable)
        1    0.000    0.000    0.000    0.000 __init__.py:1284(getLogger)
        1    0.000    0.000    0.000    0.000 __init__.py:13(Language)
        1    0.000    0.000    0.000    0.000 __init__.py:1335(_fixupParents)
        1    0.000    0.000    0.000    0.000 __init__.py:1372(_clear_cache)
        6    0.000    0.000    0.000    0.000 __init__.py:138(make_new_hash)
        1    0.000    0.000    0.000    0.000 __init__.py:1389(Logger)
        6    0.000    0.000    0.000    0.000 __init__.py:139(new_hash)
        2    0.000    0.000    0.000    0.000 __init__.py:1404(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1417(setLevel)
       14    0.000    0.000    0.000    0.000 __init__.py:142(_check_size)
        2    0.000    0.000    0.001    0.000 __init__.py:1436(info)
        2    0.000    0.000    0.000    0.000 __init__.py:1514(findCaller)
        1    0.000    0.000    0.000    0.000 __init__.py:154(py_object)
        2    0.000    0.000    0.000    0.000 __init__.py:1550(makeRecord)
        2    0.000    0.000    0.001    0.000 __init__.py:1565(_log)
        2    0.000    0.000    0.000    0.000 __init__.py:1591(handle)
        1    0.000    0.000    0.000    0.000 __init__.py:16(HASH)
        1    0.000    0.000    0.002    0.002 __init__.py:16(build_library)
        2    0.000    0.000    0.000    0.000 __init__.py:160(<lambda>)
        1    0.000    0.000    0.000    0.000 __init__.py:1601(addHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:163(c_short)
        2    0.000    0.000    0.000    0.000 __init__.py:1645(callHandlers)
        1    0.000    0.000    0.000    0.000 __init__.py:167(c_ushort)
        2    0.000    0.000    0.000    0.000 __init__.py:1675(getEffectiveLevel)
        2    0.000    0.000    0.000    0.000 __init__.py:1689(isEnabledFor)
        1    0.000    0.000    0.011    0.011 __init__.py:17(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:171(c_long)
      127    0.000    0.000    0.000    0.000 __init__.py:173(<lambda>)
        1    0.000    0.000    0.000    0.000 __init__.py:1743(RootLogger)
        1    0.000    0.000    0.000    0.000 __init__.py:1749(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:175(c_ulong)
        1    0.000    0.000    0.000    0.000 __init__.py:1760(LoggerAdapter)
        6    0.000    0.000    0.000    0.000 __init__.py:18(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:184(c_int)
        1    0.000    0.000    0.000    0.000 __init__.py:1847(GenericCallback)
        4    0.000    0.000    0.000    0.000 __init__.py:1852(_asn1obj2py)
        4    0.000    0.000    0.000    0.000 __init__.py:1867(txt2obj)
        1    0.000    0.000    0.000    0.000 __init__.py:188(c_uint)
        1    0.000    0.000    0.000    0.000 __init__.py:1888(MemoryBIO)
       16    0.000    0.000    0.001    0.000 __init__.py:19(_simple_escaping_wrapper)
        1    0.000    0.000    0.000    0.000 __init__.py:192(c_float)
        7    0.000    0.000    0.000    0.000 __init__.py:193(_checkLevel)
        1    0.000    0.000    0.000    0.000 __init__.py:196(c_double)
        1    0.000    0.000    0.000    0.000 __init__.py:198(ErrState)
        1    0.000    0.000    0.000    0.000 __init__.py:200(c_longdouble)
        1    0.000    0.000    0.000    0.000 __init__.py:2018(getLogger)
       59    0.000    0.000    0.000    0.000 __init__.py:21(__new__)
        1    0.000    0.000    0.000    0.000 __init__.py:214(EscapeFormatter)
        1    0.000    0.000    0.000    0.000 __init__.py:2147(NullHandler)
        1    0.000    0.000    0.002    0.002 __init__.py:218(DebuggedApplication)
       12    0.000    0.000    0.000    0.000 __init__.py:218(_acquireLock)
        1    0.000    0.000    0.000    0.000 __init__.py:221(c_ubyte)
       12    0.000    0.000    0.000    0.000 __init__.py:227(_releaseLock)
        1    0.000    0.000    0.000    0.000 __init__.py:228(c_byte)
        1    0.000    0.000    0.000    0.000 __init__.py:229(PasswordInfo)
        1    0.000    0.000    0.000    0.000 __init__.py:233(c_char)
        1    0.000    0.000    0.000    0.000 __init__.py:238(c_char_p)
        1    0.000    0.000    0.000    0.000 __init__.py:244(c_void_p)
        1    0.000    0.000    0.003    0.003 __init__.py:248(__init__)
        3    0.000    0.000    0.000    0.000 __init__.py:248(_register_at_fork_reinit_lock)
        1    0.000    0.000    0.000    0.000 __init__.py:249(c_bool)
        1    0.001    0.001    0.465    0.465 __init__.py:25(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:253(_MarkupEscapeHelper)
        1    0.000    0.000    0.000    0.000 __init__.py:254(c_wchar_p)
        1    0.000    0.000    0.000    0.000 __init__.py:259(c_wchar)
        1    0.000    0.000    0.000    0.000 __init__.py:26(JSONEncoder)
        1    0.000    0.000    0.000    0.000 __init__.py:262(_reset_cache)
        1    0.000    0.000    0.000    0.000 __init__.py:276(LogRecord)
        5    0.000    0.000    0.043    0.009 __init__.py:280(load)
        2    0.000    0.000    0.000    0.000 __init__.py:288(__init__)
        2    0.000    0.000    0.000    0.000 __init__.py:3(make_blake_hash)
        5    0.000    0.000    0.006    0.001 __init__.py:305(loads)
        1    0.000    0.000    0.003    0.003 __init__.py:31(Markup)
      116    0.001    0.000    0.001    0.000 __init__.py:311(<lambda>)
       29    0.004    0.000    0.010    0.000 __init__.py:313(namedtuple)
        1    0.000    0.000    0.000    0.000 __init__.py:319(CDLL)
        1    0.000    0.000    0.000    0.000 __init__.py:319(_SSLSocket)
        5    0.002    0.000    0.002    0.000 __init__.py:340(__init__)
        2    0.000    0.000    0.000    0.000 __init__.py:364(getMessage)
        5    0.000    0.000    0.000    0.000 __init__.py:368(_FuncPtr)
      145    0.000    0.000    0.000    0.000 __init__.py:385(<genexpr>)
        5    0.000    0.000    0.000    0.000 __init__.py:388(__getattr__)
        5    0.000    0.000    0.000    0.000 __init__.py:395(__getitem__)
        1    0.000    0.000    0.000    0.000 __init__.py:41(<listcomp>)
        1    0.000    0.000    0.002    0.002 __init__.py:417(PercentStyle)
        2    0.000    0.000    0.000    0.000 __init__.py:424(__init__)
        2    0.000    0.000    0.000    0.000 __init__.py:427(usesTime)
        2    0.000    0.000    0.000    0.000 __init__.py:43(normalize_encoding)
        2    0.000    0.000    0.000    0.000 __init__.py:430(validate)
        2    0.000    0.000    0.000    0.000 __init__.py:435(_format)
        2    0.000    0.000    0.000    0.000 __init__.py:438(format)
        1    0.000    0.000    0.000    0.000 __init__.py:442(LibraryLoader)
        1    0.000    0.000    0.000    0.000 __init__.py:443(__init__)
        1    0.000    0.000    0.007    0.007 __init__.py:445(StrFormatStyle)
        5    0.000    0.000    0.002    0.000 __init__.py:456(LoadLibrary)
        6    0.000    0.000    0.000    0.000 __init__.py:47(digest_type_by_name)
        1    0.000    0.000    0.000    0.000 __init__.py:475(StringTemplateStyle)
        2    0.000    0.000    0.000    0.000 __init__.py:497(PYFUNCTYPE)
        2    0.000    0.000    0.000    0.000 __init__.py:498(CFunctionType)
        1    0.000    0.000    0.000    0.000 __init__.py:5(<module>)
        1    0.000    0.000    0.002    0.002 __init__.py:5(HTTPStatus)
        1    0.000    0.000    0.000    0.000 __init__.py:50(MissingInputStreamError)
        1    0.000    0.000    0.000    0.000 __init__.py:514(Formatter)
        2    0.000    0.000    0.000    0.000 __init__.py:559(__init__)
        6    0.000    0.000    0.000    0.000 __init__.py:58(update)
        1    0.000    0.000    0.000    0.000 __init__.py:60(JSONDecoder)
        2    0.000    0.000    0.000    0.000 __init__.py:633(usesTime)
        2    0.000    0.000    0.000    0.000 __init__.py:639(formatMessage)
        1    0.000    0.000    0.000    0.000 __init__.py:65(_shake)
        2    0.000    0.000    0.000    0.000 __init__.py:655(format)
        1    0.000    0.000    0.000    0.000 __init__.py:692(BufferingFormatter)
        2    0.000    0.000    0.000    0.000 __init__.py:7(_blake)
        1    0.000    0.000    0.000    0.000 __init__.py:7(_sha3)
        2    0.000    0.000    0.007    0.003 __init__.py:70(search_function)
        1    0.000    0.000    0.000    0.000 __init__.py:734(Filter)
        2    0.000    0.000    0.000    0.000 __init__.py:76(CFUNCTYPE)
        5    0.000    0.000    0.003    0.001 __init__.py:76(__init__)
        2    0.000    0.000    0.001    0.000 __init__.py:76(default_options)
        1    0.000    0.000    0.000    0.000 __init__.py:771(Filterer)
        5    0.000    0.000    0.000    0.000 __init__.py:776(__init__)
        4    0.000    0.000    0.000    0.000 __init__.py:796(filter)
        3    0.000    0.000    0.000    0.000 __init__.py:843(_addHandlerRef)
        1    0.000    0.000    0.000    0.000 __init__.py:853(Handler)
        1    0.000    0.000    0.000    0.000 __init__.py:86(sha3_224)
        3    0.000    0.000    0.000    0.000 __init__.py:862(__init__)
        3    0.000    0.000    0.000    0.000 __init__.py:891(createLock)
        4    0.000    0.000    0.000    0.000 __init__.py:898(acquire)
        1    0.000    0.000    0.000    0.000 __init__.py:90(sha3_256)
        4    0.000    0.000    0.000    0.000 __init__.py:905(release)
        2    0.000    0.000    0.000    0.000 __init__.py:918(format)
        1    0.000    0.000    0.000    0.000 __init__.py:94(sha3_384)
        2    0.000    0.000    0.000    0.000 __init__.py:941(handle)
        1    0.000    0.000    0.000    0.000 __init__.py:959(setFormatter)
        1    0.000    0.000    0.000    0.000 __init__.py:98(sha3_512)
        1    0.000    0.000    0.000    0.000 __init__.py:99(version_info)
        1    0.000    0.000    0.000    0.000 __version__.py:1(<module>)
       11    0.000    0.000    0.000    0.000 _bootlocale.py:33(getpreferredencoding)
        1    0.000    0.000    0.000    0.000 _collections_abc.py:252(__subclasshook__)
        2    0.000    0.000    0.000    0.000 _collections_abc.py:302(__subclasshook__)
       31    0.000    0.000    0.000    0.000 _collections_abc.py:392(__subclasshook__)
       24    0.000    0.000    0.001    0.000 _collections_abc.py:657(get)
        5    0.000    0.000    0.000    0.000 _collections_abc.py:664(__contains__)
        1    0.000    0.000    0.000    0.000 _collections_abc.py:672(keys)
        1    0.000    0.000    0.000    0.000 _collections_abc.py:698(__init__)
       40    0.000    0.000    0.000    0.000 _collections_abc.py:719(__iter__)
        4    0.000    0.000    0.000    0.000 _collections_abc.py:72(_check_methods)
        1    0.000    0.000    0.007    0.007 _compat.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _compat.py:165(_is_binary_writer)
        1    0.000    0.000    0.000    0.000 _compat.py:214(_stream_is_misconfigured)
        2    0.000    0.000    0.000    0.000 _compat.py:223(_is_compat_stream_attr)
        1    0.000    0.000    0.000    0.000 _compat.py:232(_is_compatible_text_stream)
        1    0.000    0.000    0.000    0.000 _compat.py:243(_force_correct_text_stream)
        1    0.000    0.000    0.000    0.000 _compat.py:305(_force_correct_text_writer)
        1    0.000    0.000    0.000    0.000 _compat.py:351(get_text_stdout)
        1    0.000    0.000    0.000    0.000 _compat.py:45(is_ascii_encoding)
        1    0.000    0.000    0.000    0.000 _compat.py:462(_AtomicFile)
        5    0.000    0.000    0.000    0.000 _compat.py:493(strip_ansi)
        5    0.000    0.000    0.000    0.000 _compat.py:497(_is_jupyter_kernel_output)
        5    0.000    0.000    0.000    0.000 _compat.py:504(should_strip_ansi)
        1    0.000    0.000    0.000    0.000 _compat.py:570(_get_windows_console_stream)
        5    0.000    0.000    0.000    0.000 _compat.py:580(isatty)
        3    0.000    0.000    0.000    0.000 _compat.py:587(_make_cached_stream_func)
        5    0.000    0.000    0.000    0.000 _compat.py:592(func)
        1    0.000    0.000    0.000    0.000 _compat.py:61(_NonClosingTextIOWrapper)
        5    0.000    0.000    0.000    0.000 _compat.py:611(<lambda>)
        1    0.000    0.000    0.000    0.000 _compat.py:87(_FixupStream)
       43    0.000    0.000    0.000    0.000 _compat_pickle.py:165(<genexpr>)
       85    0.000    0.000    0.000    0.000 _compat_pickle.py:167(<genexpr>)
        1    0.000    0.000    0.000    0.000 _compat_pickle.py:8(<module>)
        1    0.000    0.000    0.000    0.000 _compression.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _compression.py:33(DecompressReader)
        1    0.000    0.000    0.000    0.000 _compression.py:9(BaseStream)
        1    0.000    0.000    0.006    0.006 _contextvars.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _contextvars.py:102(ContextVar)
        4    0.000    0.000    0.000    0.000 _contextvars.py:104(__init__)
        1    0.000    0.000    0.000    0.000 _contextvars.py:175(Token)
        1    0.000    0.000    0.000    0.000 _contextvars.py:24(Context)
        1    0.000    0.000    0.000    0.000 _contextvars.py:8(Unsubclassable)
        3    0.000    0.000    0.000    0.000 _contextvars.py:9(__new__)
        1    0.000    0.000    0.001    0.001 _encoded_words.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _encoded_words.py:73(_QByteMap)
        1    0.000    0.000    0.000    0.000 _endian.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _endian.py:23(_swapped_meta)
        1    0.000    0.000    0.000    0.000 _endian.py:46(BigEndianStructure)
        1    0.000    0.000    0.000    0.000 _ffi.py:2(<module>)
       60    0.001    0.000    0.001    0.000 _functools.py:42(__init__)
       52    0.001    0.000    0.003    0.000 _functools.py:77(__call__)
        1    0.000    0.000    0.014    0.014 _identifier.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _immutables_map.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _immutables_map.py:279(CollisionNode)
        1    0.000    0.000    0.000    0.000 _immutables_map.py:395(MapKeys)
        1    0.000    0.000    0.000    0.000 _immutables_map.py:408(MapValues)
        1    0.000    0.000    0.000    0.000 _immutables_map.py:421(MapItems)
        1    0.000    0.000    0.000    0.000 _immutables_map.py:434(Map)
        1    0.000    0.000    0.000    0.000 _immutables_map.py:50(BitmapNode)
        1    0.000    0.000    0.000    0.000 _immutables_map.py:637(MapMutation)
        1    0.001    0.001    0.035    0.035 _internal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _internal.py:173(_has_level_handler)
        2    0.000    0.000    0.000    0.000 _internal.py:181(<genexpr>)
        1    0.000    0.000    0.000    0.000 _internal.py:192(_ColorStreamHandler)
        1    0.000    0.000    0.001    0.001 _internal.py:195(__init__)
        2    0.000    0.000    0.002    0.001 _internal.py:206(_log)
       81    0.000    0.000    0.000    0.000 _internal.py:25(<genexpr>)
        1    0.000    0.000    0.002    0.002 _internal.py:330(_DictAccessorProperty)
       32    0.000    0.000    0.000    0.000 _internal.py:335(__init__)
        1    0.000    0.000    0.000    0.000 _internal.py:51(_Missing)
       38    0.000    0.000    0.000    0.000 _internal.py:96(_to_bytes)
        1    0.000    0.000    0.000    0.000 _json.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _json.py:20(DeprecatedJSON)
        1    0.000    0.000    0.000    0.000 _json.py:6(_CompactJSON)
        1    0.000    0.000    0.000    0.000 _lzma.py:105(LZMAError)
        1    0.000    0.000    0.000    0.000 _lzma.py:292(Index)
        1    0.000    0.000    0.000    0.000 _lzma.py:347(_StructToPy)
        1    0.000    0.000    0.000    0.000 _lzma.py:357(IndexStreamData)
        1    0.000    0.000    0.000    0.000 _lzma.py:361(IndexBlockData)
        1    0.000    0.000    0.000    0.000 _lzma.py:366(StreamFlags)
        1    0.000    0.000    0.000    0.000 _lzma.py:389(Allocator)
        1    0.000    0.000    0.000    0.000 _lzma.py:408(LZMADecompressor)
        1    0.000    0.000    0.000    0.000 _lzma.py:681(LZMACompressor)
        1    0.000    0.000    0.001    0.001 _lzma.py:7(<module>)
       24    0.000    0.000    0.000    0.000 _lzma.py:71(add_constant)
        1    0.000    0.000    0.001    0.001 _native.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _parseaddr.py:205(AddrlistClass)
        1    0.000    0.000    0.002    0.002 _parseaddr.py:4(<module>)
        1    0.000    0.000    0.000    0.000 _parseaddr.py:506(AddressList)
        1    0.000    0.000    0.004    0.004 _policybase.py:1(<module>)
        5    0.000    0.000    0.000    0.000 _policybase.py:104(<genexpr>)
        1    0.000    0.000    0.000    0.000 _policybase.py:112(Policy)
        1    0.000    0.000    0.000    0.000 _policybase.py:18(_PolicyBase)
        1    0.000    0.000    0.000    0.000 _policybase.py:271(Compat32)
        1    0.000    0.000    0.000    0.000 _policybase.py:41(__init__)
        6    0.000    0.000    0.000    0.000 _policybase.py:94(_append_doc)
        1    0.000    0.000    0.000    0.000 _policybase.py:99(_extend_docstrings)
        1    0.000    0.000    0.022    0.022 _pydecimal.py:16(<module>)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:192(DecimalException)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:215(Clamped)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:227(InvalidOperation)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:256(ConversionSyntax)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:266(DivisionByZero)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:282(DivisionImpossible)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:293(DivisionUndefined)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:304(Inexact)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:316(InvalidContext)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:330(Rounded)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:342(Subnormal)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:353(Overflow)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:3854(_ContextManager)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:3869(Context)
        3    0.000    0.000    0.000    0.000 _pydecimal.py:3888(__init__)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:391(Underflow)
       38    0.000    0.000    0.000    0.000 _pydecimal.py:3913(<genexpr>)
       30    0.000    0.000    0.000    0.000 _pydecimal.py:3920(<genexpr>)
       15    0.000    0.000    0.000    0.000 _pydecimal.py:3924(_set_integer_check)
        6    0.000    0.000    0.000    0.000 _pydecimal.py:3938(_set_signal_dict)
       27    0.000    0.000    0.000    0.000 _pydecimal.py:3949(__setattr__)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:406(FloatOperation)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:513(Decimal)
        6    0.000    0.000    0.000    0.000 _pydecimal.py:522(__new__)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:5614(_WorkRep)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:5850(_Log10Memoize)
        1    0.000    0.000    0.000    0.000 _pydecimal.py:5854(__init__)
        1    0.000    0.000    0.001    0.001 _pypy_util_cffi.py:2(<module>)
        1    0.000    0.000    0.000    0.000 _pypy_util_cffi.py:4(StackNew)
        1    0.001    0.001    0.003    0.003 _reloader.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _reloader.py:141(_get_args_for_reloading)
        1    0.000    0.000    0.001    0.001 _reloader.py:201(ReloaderLoop)
        1    0.000    0.000    0.000    0.000 _reloader.py:204(__init__)
        1    0.000    0.000    0.000    0.000 _reloader.py:210(<setcomp>)
        1    0.000    0.000   30.804   30.804 _reloader.py:239(restart_with_reloader)
        1    0.000    0.000    0.000    0.000 _reloader.py:262(StatReloaderLoop)
        1    0.000    0.000    0.000    0.000 _reloader.py:286(WatchdogReloaderLoop)
        1    0.000    0.000   30.804   30.804 _reloader.py:401(run_with_reloader)
        1    0.000    0.000    0.000    0.000 _sha512.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _sha512.py:234(sha512)
        1    0.000    0.000    0.000    0.000 _sha512.py:258(sha384)
        1    0.000    0.000    0.000    0.000 _unicodefun.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _weakrefset.py:36(__init__)
        4    0.000    0.000    0.000    0.000 _weakrefset.py:88(add)
        1    0.000    0.000    0.000    0.000 abc.py:1(<module>)
 1249/105    0.033    0.000    0.033    0.000 abc.py:100(__subclasscheck__)
       87    0.000    0.000    0.000    0.000 abc.py:7(abstractmethod)
       90    0.006    0.000    0.007    0.000 abc.py:84(__new__)
       10    0.000    0.000    0.002    0.000 abc.py:89(register)
      844    0.012    0.000    0.044    0.000 abc.py:96(__instancecheck__)
        1    0.000    0.000    0.000    0.000 accept.py:1(<module>)
        1    0.000    0.000    0.000    0.000 accept.py:5(AcceptMixin)
        1    0.000    0.000    0.000    0.000 actions.py:3(<module>)
        1    0.000    0.000    0.000    0.000 actions.py:7(OnlyOnce)
        1    0.000    0.000    0.386    0.386 app.py:1(<module>)
        9    0.000    0.000    0.041    0.005 app.py:1037(add_url_rule)
        9    0.000    0.000    0.000    0.000 app.py:1061(<setcomp>)
        1    0.000    0.000    0.009    0.009 app.py:384(__init__)
        9    0.000    0.000    0.000    0.000 app.py:522(_is_setup_finished)
        1    0.000    0.000    0.000    0.000 app.py:525(name)
        1    0.000    0.000    0.000    0.000 app.py:613(make_config)
        1    0.000    0.000    0.000    0.000 app.py:630(auto_find_instance_path)
       12    0.000    0.000    0.000    0.000 app.py:783(debug)
        1    0.000    0.000   30.849   30.849 app.py:805(run)
        1    0.000    0.000    0.034    0.034 app.py:98(Flask)
        1    0.000    0.000    0.004    0.004 apted.py:24(<module>)
        1    0.000    0.000    0.000    0.000 apted.py:34(Cost)
        1    0.000    0.000    0.000    0.000 apted.py:48(APTED)
        1    0.000    0.000    0.000    0.000 array.py:1(<module>)
        1    0.000    0.000    0.000    0.000 array.py:10(__new__)
        1    0.000    0.000    0.000    0.000 array.py:196(Array)
        1    0.000    0.000    0.000    0.000 array.py:9(ArrayMeta)
        1    0.000    0.000    0.001    0.001 ast.py:1(<module>)
     1844    0.005    0.000    0.005    0.000 ast.py:210(iter_fields)
     1187    0.003    0.000    0.010    0.000 ast.py:222(iter_child_nodes)
       43    0.000    0.000    0.002    0.000 ast.py:30(parse)
      658    0.002    0.000    0.013    0.000 ast.py:333(walk)
        1    0.000    0.000    0.000    0.000 ast.py:347(NodeVisitor)
        1    0.000    0.000    0.000    0.000 ast.py:405(NodeTransformer)
       40    0.000    0.000    0.000    0.000 ast.py:467(_getter)
       38    0.000    0.000    0.000    0.000 ast.py:470(_setter)
        1    0.000    0.000    0.000    0.000 ast.py:476(_ABC)
       44    0.000    0.000    0.000    0.000 ast.py:478(__instancecheck__)
       76    0.001    0.000    0.001    0.000 ast.py:493(_new)
        1    0.000    0.000    0.000    0.000 ast.py:505(Num)
        1    0.000    0.000    0.000    0.000 ast.py:509(Str)
        1    0.000    0.000    0.000    0.000 ast.py:513(Bytes)
        1    0.000    0.000    0.000    0.000 ast.py:517(NameConstant)
        1    0.000    0.000    0.000    0.000 ast.py:520(Ellipsis)
        1    0.000    0.000    0.015    0.015 ast_match.py:1(<module>)
        1    0.000    0.000    0.014    0.014 ast_match_util_apted.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ast_match_util_apted.py:48(_Naive1Config)
        1    0.000    0.000    0.000    0.000 ast_match_util_apted.py:5(Tree)
        1    0.000    0.000    0.000    0.000 ast_match_util_apted.py:73(_Naive2Config)
        1    0.000    0.000    0.000    0.000 ast_parse.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ast_pretty.py:1(<module>)
        1    0.000    0.000    0.001    0.001 async_utils.py:1(<module>)
       11    0.000    0.000    0.000    0.000 async_utils.py:11(async_variant)
       11    0.000    0.000    0.001    0.000 async_utils.py:12(decorator)
        1    0.000    0.000    0.000    0.000 auth.py:1(<module>)
        1    0.000    0.000    0.000    0.000 auth.py:17(WWWAuthenticateMixin)
        1    0.000    0.000    0.000    0.000 auth.py:5(AuthorizationMixin)
        1    0.000    0.000    0.001    0.001 base64.py:3(<module>)
        1    0.000    0.000    0.002    0.002 base64mime.py:5(<module>)
        1    0.000    0.000    0.118    0.118 base_request.py:1(<module>)
        1    0.000    0.000    0.000    0.000 base_request.py:27(BaseRequest)
        1    0.000    0.000    0.000    0.000 base_request.py:7(_FakeSubclassCheck)
        1    0.000    0.000    0.014    0.014 base_response.py:1(<module>)
        1    0.000    0.000    0.000    0.000 base_response.py:27(BaseResponse)
        1    0.000    0.000    0.000    0.000 base_response.py:7(_FakeSubclassCheck)
        1    0.000    0.000    0.000    0.000 basics.py:1(<module>)
        1    0.000    0.000    0.000    0.000 basics.py:148(CArgObject)
        1    0.000    0.000    0.000    0.000 basics.py:169(_CData)
       38    0.000    0.000    0.000    0.000 basics.py:219(sizeof)
        5    0.000    0.000    0.000    0.000 basics.py:262(is_struct_shape)
        3    0.000    0.000    0.000    0.000 basics.py:270(_shape_to_ffi_type)
        1    0.000    0.000    0.000    0.000 basics.py:37(ArgumentError)
        1    0.000    0.000    0.000    0.000 basics.py:40(COMError)
        1    0.000    0.000    0.000    0.000 basics.py:48(_CDataMeta)
        2    0.000    0.000    0.000    0.000 basics.py:49(_is_abstract)
        3    0.000    0.000    0.000    0.000 basics.py:63(_build_ffiargtype)
       18    0.000    0.000    0.000    0.000 basics.py:66(get_ffi_argtype)
        5    0.000    0.000    0.000    0.000 basics.py:72(_CData_output)
        5    0.000    0.000    0.000    0.000 basics.py:86(_CData_retval)
        1    0.000    0.000    0.011    0.011 bccache.py:1(<module>)
        1    0.000    0.000    0.004    0.004 bccache.py:101(BytecodeCache)
        1    0.000    0.000    0.000    0.000 bccache.py:186(FileSystemBytecodeCache)
        1    0.000    0.000    0.000    0.000 bccache.py:287(MemcachedBytecodeCache)
        1    0.000    0.000    0.000    0.000 bccache.py:44(Bucket)
        1    0.000    0.000    0.000    0.000 beautifier.py:138(Beautifier)
        1    0.000    0.000    0.034    0.034 beautifier.py:25(<module>)
        1    0.000    0.000    0.000    0.000 beautifier.py:39(BeautifierFlags)
        1    0.000    0.000    0.000    0.000 beautifier.py:85(MODE)
        1    0.000    0.000    0.001    0.001 bisect.py:1(<module>)
        1    0.000    0.000    0.004    0.004 blueprints.py:1(<module>)
        1    0.000    0.000    0.002    0.002 blueprints.py:112(Blueprint)
        1    0.000    0.000    0.000    0.000 blueprints.py:27(BlueprintSetupState)
        1    0.000    0.000    0.000    0.000 builtin.py:2(<module>)
        1    0.000    0.000    0.000    0.000 builtin.py:9(ConvMode)
        1    0.000    0.000    0.001    0.001 bz2.py:1(<module>)
        1    0.000    0.000    0.000    0.000 bz2.py:30(BZ2File)
        1    0.000    0.000    0.001    0.001 calendar.py:1(<module>)
        1    0.000    0.000    0.000    0.000 calendar.py:148(Calendar)
        1    0.000    0.000    0.000    0.000 calendar.py:154(__init__)
        1    0.000    0.000    0.000    0.000 calendar.py:160(setfirstweekday)
        1    0.000    0.000    0.000    0.000 calendar.py:24(IllegalMonthError)
        1    0.000    0.000    0.000    0.000 calendar.py:293(TextCalendar)
        1    0.000    0.000    0.000    0.000 calendar.py:31(IllegalWeekdayError)
        1    0.000    0.000    0.000    0.000 calendar.py:410(HTMLCalendar)
        1    0.000    0.000    0.000    0.000 calendar.py:50(_localized_month)
        1    0.000    0.000    0.000    0.000 calendar.py:52(<listcomp>)
        1    0.000    0.000    0.000    0.000 calendar.py:546(different_locale)
        2    0.000    0.000    0.000    0.000 calendar.py:55(__init__)
        1    0.000    0.000    0.000    0.000 calendar.py:558(LocaleTextCalendar)
        1    0.000    0.000    0.000    0.000 calendar.py:589(LocaleHTMLCalendar)
        1    0.000    0.000    0.000    0.000 calendar.py:69(_localized_day)
        1    0.000    0.000    0.000    0.000 calendar.py:72(<listcomp>)
        2    0.000    0.000    0.000    0.000 calendar.py:74(__init__)
        1    0.000    0.000    0.013    0.013 ccompiler.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ccompiler.py:15(CCompiler)
        8    0.000    0.000    0.000    0.000 ccompiler.py:153(set_executable)
        1    0.000    0.000    0.000    0.000 ccompiler.py:85(__init__)
        1    0.000    0.000    0.001    0.001 ccompiler.py:937(get_default_compiler)
        1    0.000    0.000    0.001    0.001 ccompiler.py:990(new_compiler)
        1    0.000    0.000    0.006    0.006 certificate.py:1(<module>)
        1    0.000    0.000    0.000    0.000 charset.py:167(Charset)
        2    0.000    0.000    0.000    0.000 charset.py:211(__init__)
        1    0.000    0.000    0.009    0.009 charset.py:5(<module>)
        1    0.000    0.000    0.152    0.152 cli.py:1(<module>)
        1    0.000    0.000    0.000    0.000 cli.py:307(DispatchingApp)
        1    0.000    0.000    0.000    0.000 cli.py:33(NoAppException)
        1    0.000    0.000    0.000    0.000 cli.py:367(ScriptInfo)
        2    0.000    0.000    0.000    0.000 cli.py:434(with_appcontext)
        1    0.000    0.000    0.000    0.000 cli.py:449(AppGroup)
        1    0.000    0.000    0.000    0.000 cli.py:480(FlaskGroup)
        1    0.000    0.000    0.000    0.000 cli.py:503(__init__)
        1    0.000    0.000    0.000    0.000 cli.py:610(load_dotenv)
        1    0.000    0.000    0.001    0.001 cli.py:667(show_server_banner)
        1    0.000    0.000    0.000    0.000 cli.py:696(CertParamType)
        1    0.000    0.000    0.001    0.001 cli.py:704(__init__)
        1    0.000    0.000    0.000    0.000 cli.py:771(SeparatedPathType)
        1    0.000    0.000    0.078    0.078 client.py:1(<module>)
        1    0.000    0.000    0.000    0.000 client.py:106(<dictcomp>)
        1    0.000    0.000    0.000    0.000 client.py:1372(HTTPSConnection)
        1    0.000    0.000    0.000    0.000 client.py:1430(HTTPException)
        1    0.000    0.000    0.000    0.000 client.py:1435(NotConnected)
        1    0.000    0.000    0.000    0.000 client.py:1438(InvalidURL)
        1    0.000    0.000    0.000    0.000 client.py:1441(UnknownProtocol)
        1    0.000    0.000    0.000    0.000 client.py:1446(UnknownTransferEncoding)
        1    0.000    0.000    0.000    0.000 client.py:1449(UnimplementedFileMode)
        1    0.000    0.000    0.000    0.000 client.py:1452(IncompleteRead)
        1    0.000    0.000    0.000    0.000 client.py:1466(ImproperConnectionState)
        1    0.000    0.000    0.000    0.000 client.py:1469(CannotSendRequest)
        1    0.000    0.000    0.000    0.000 client.py:1472(CannotSendHeader)
        1    0.000    0.000    0.000    0.000 client.py:1475(ResponseNotReady)
        1    0.000    0.000    0.000    0.000 client.py:1478(BadStatusLine)
        1    0.000    0.000    0.000    0.000 client.py:1485(LineTooLong)
        1    0.000    0.000    0.000    0.000 client.py:1490(RemoteDisconnected)
        1    0.000    0.000    0.000    0.000 client.py:174(HTTPMessage)
        1    0.000    0.000    0.000    0.000 client.py:237(HTTPResponse)
        1    0.000    0.000    0.000    0.000 client.py:772(HTTPConnection)
        1    0.000    0.000    0.001    0.001 code.py:1(<module>)
        1    0.000    0.000    0.000    0.000 code.py:15(InteractiveInterpreter)
        1    0.000    0.000    0.000    0.000 code.py:162(InteractiveConsole)
        1    0.000    0.000    0.047    0.047 code_beautify.py:1(<module>)
        5    0.000    0.000    0.000    0.000 codecs.py:186(__init__)
        9    0.000    0.000    0.000    0.000 codecs.py:260(__init__)
        9    0.000    0.000    0.000    0.000 codecs.py:309(__init__)
       69    0.006    0.000    0.007    0.000 codecs.py:319(decode)
        7    0.000    0.000    0.000    0.000 codecs.py:331(getstate)
        2    0.000    0.000    0.000    0.000 codecs.py:94(__new__)
        1    0.000    0.000    0.000    0.000 codeop.py:1(<module>)
        1    0.000    0.000    0.000    0.000 codeop.py:134(Compile)
        1    0.000    0.000    0.000    0.000 codeop.py:149(CommandCompiler)
        1    0.000    0.000    0.000    0.000 codeop.py:62(<listcomp>)
        1    0.001    0.001    0.094    0.094 common.py:2(<module>)
        1    0.000    0.000    0.003    0.003 common.py:422(<listcomp>)
        1    0.001    0.001    0.089    0.089 common.py:8(pyparsing_common)
        1    0.000    0.000    0.000    0.000 common_descriptors.py:1(<module>)
        1    0.000    0.000    0.000    0.000 common_descriptors.py:17(CommonResponseDescriptorsMixin)
        1    0.000    0.000    0.000    0.000 common_descriptors.py:5(CommonRequestDescriptorsMixin)
        1    0.000    0.000    0.019    0.019 compiler.py:1(<module>)
        1    0.000    0.000    0.000    0.000 compiler.py:1362(_FinalizeInfo)
        1    0.000    0.000    0.000    0.000 compiler.py:157(MacroRef)
        1    0.000    0.000    0.000    0.000 compiler.py:165(Frame)
        1    0.000    0.000    0.000    0.000 compiler.py:248(VisitorExit)
        1    0.000    0.000    0.000    0.000 compiler.py:252(DependencyFinderVisitor)
        1    0.000    0.000    0.000    0.000 compiler.py:271(UndeclaredNameVisitor)
        1    0.000    0.000    0.000    0.000 compiler.py:293(CompilerExit)
        1    0.000    0.000    0.004    0.004 compiler.py:300(CodeGenerator)
       20    0.000    0.000    0.000    0.000 compiler.py:43(optimizeconst)
        9    0.000    0.000    0.000    0.000 compiler.py:59(_make_binop)
        3    0.000    0.000    0.000    0.000 compiler.py:81(_make_unop)
        1    0.000    0.000    0.002    0.002 config.py:1(<module>)
        7    0.000    0.000    0.000    0.000 config.py:12(__init__)
        1    0.000    0.000    0.000    0.000 config.py:16(__get__)
        1    0.000    0.000    0.000    0.000 config.py:195(PerEditOperationConfig)
        1    0.000    0.000    0.001    0.001 config.py:24(<module>)
        1    0.000    0.000    0.001    0.001 config.py:28(Config)
        1    0.000    0.000    0.000    0.000 config.py:29(Config)
        1    0.000    0.000    0.000    0.000 config.py:72(__init__)
        1    0.000    0.000    0.001    0.001 config.py:9(ConfigAttribute)
        1    0.000    0.000    0.009    0.009 console.py:1(<module>)
        1    0.000    0.000    0.000    0.000 console.py:111(_ConsoleLoader)
        1    0.000    0.000    0.000    0.000 console.py:129(_InteractiveConsole)
        1    0.000    0.000    0.000    0.000 console.py:18(HTMLStringO)
        1    0.000    0.000    0.000    0.000 console.py:191(Console)
        1    0.000    0.000    0.000    0.000 console.py:60(ThreadedStream)
        6    0.000    0.000    0.001    0.000 contextlib.py:211(contextmanager)
        2    0.000    0.000    0.000    0.000 contextlib.py:379(_create_cb_wrapper)
        2    0.000    0.000    0.000    0.000 contextlib.py:381(_exit_wrapper)
        2    0.000    0.000    0.000    0.000 contextlib.py:385(__init__)
        2    0.000    0.000    0.000    0.000 contextlib.py:429(callback)
        2    0.000    0.000    0.000    0.000 contextlib.py:463(_push_exit_callback)
        2    0.000    0.000    0.000    0.000 contextlib.py:479(__enter__)
        2    0.000    0.000    0.000    0.000 contextlib.py:482(__exit__)
        1    0.000    0.000    0.007    0.007 contextvars.py:1(<module>)
        1    0.000    0.000    0.057    0.057 cookiejar.py:1(<module>)
        1    0.000    0.000    0.000    0.000 cookiejar.py:1241(Absent)
        1    0.000    0.000    0.002    0.002 cookiejar.py:1243(CookieJar)
        1    0.000    0.000    0.000    0.000 cookiejar.py:1771(LoadError)
        1    0.000    0.000    0.000    0.000 cookiejar.py:1773(FileCookieJar)
        1    0.000    0.000    0.000    0.000 cookiejar.py:1856(LWPCookieJar)
        1    0.000    0.000    0.001    0.001 cookiejar.py:1976(MozillaCookieJar)
        1    0.000    0.000    0.000    0.000 cookiejar.py:736(Cookie)
        1    0.000    0.000    0.000    0.000 cookiejar.py:834(CookiePolicy)
        1    0.000    0.000    0.000    0.000 cookiejar.py:867(DefaultCookiePolicy)
        1    0.000    0.000    0.001    0.001 copy.py:1(<module>)
      405    0.003    0.000    0.016    0.000 copy.py:258(_reconstruct)
        1    0.000    0.000    0.000    0.000 copy.py:55(Error)
      415    0.004    0.000    0.033    0.000 copy.py:66(copy)
      405    0.001    0.000    0.001    0.000 copyreg.py:90(__newobj__)
       15    0.000    0.000    0.000    0.000 copyreg.py:99(_slotnames)
        1    0.000    0.000    0.114    0.114 core.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:100(__diag__)
        2    0.000    0.000    0.006    0.003 core.py:1062(parse_string)
        1    0.000    0.000    0.000    0.000 core.py:112(<listcomp>)
        1    0.000    0.000    0.000    0.000 core.py:113(<listcomp>)
        1    0.000    0.000    0.001    0.001 core.py:1131(Command)
        1    0.000    0.000    0.000    0.000 core.py:114(<listcomp>)
        5    0.000    0.000    0.000    0.000 core.py:1166(__init__)
        1    0.000    0.000    0.000    0.000 core.py:122(Diagnostics)
       52    0.000    0.000    0.012    0.000 core.py:1338(__add__)
        1    0.000    0.000    0.000    0.000 core.py:135(ParameterSource)
        5    0.000    0.000    0.001    0.000 core.py:1378(__radd__)
        3    0.000    0.000    0.004    0.001 core.py:1423(__mul__)
        1    0.000    0.000    0.002    0.002 core.py:1433(MultiCommand)
        6    0.000    0.000    0.000    0.000 core.py:1451(<genexpr>)
        2    0.000    0.000    0.000    0.000 core.py:1461(__init__)
     12/2    0.000    0.000    0.003    0.002 core.py:1489(makeOptionalList)
       19    0.000    0.000    0.004    0.000 core.py:1512(__or__)
        3    0.000    0.000    0.000    0.000 core.py:1599(__invert__)
        1    0.000    0.000    0.005    0.005 core.py:161(Context)
        9    0.000    0.000    0.001    0.000 core.py:1649(__call__)
        6    0.000    0.000    0.000    0.000 core.py:1669(suppress)
      154    0.000    0.000    0.000    0.000 core.py:1686(leave_whitespace)
      119    0.000    0.000    0.000    0.000 core.py:1697(set_whitespace_chars)
        4    0.000    0.000    0.000    0.000 core.py:1717(ignore)
        1    0.000    0.000    0.005    0.005 core.py:1752(Group)
        2    0.000    0.000    0.000    0.000 core.py:1788(__init__)
        1    0.000    0.000    0.000    0.000 core.py:180(_should_enable_warnings)
        3    0.000    0.000    0.000    0.000 core.py:1804(add_command)
   153/92    0.000    0.000    0.006    0.000 core.py:1818(default_name)
       44    0.000    0.000    0.000    0.000 core.py:1830(set_name)
  204/139    0.000    0.000    0.007    0.000 core.py:1843(name)
    90/25    0.000    0.000    0.002    0.000 core.py:1848(__str__)
       57    0.000    0.000    0.000    0.000 core.py:1854(streamline)
       21    0.000    0.000    0.000    0.000 core.py:1859(recurse)
        1    0.000    0.000    0.001    0.001 core.py:1876(CommandCollection)
      111    0.000    0.000    0.003    0.000 core.py:1901(__eq__)
        1    0.000    0.000    0.009    0.009 core.py:1928(Parameter)
       12    0.000    0.000    0.001    0.000 core.py:2004(__init__)
        1    0.000    0.000    0.000    0.000 core.py:2201(_PendingSkip)
        1    0.000    0.000    0.000    0.000 core.py:2242(Token)
       77    0.000    0.000    0.002    0.000 core.py:2247(__init__)
        4    0.000    0.000    0.000    0.000 core.py:2250(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 core.py:2254(Empty)
        2    0.000    0.000    0.000    0.000 core.py:2259(__init__)
        1    0.000    0.000    0.000    0.000 core.py:2265(NoMatch)
        1    0.000    0.000    0.000    0.000 core.py:2280(Literal)
       32    0.002    0.000    0.002    0.000 core.py:2296(__init__)
       40    0.000    0.000    0.000    0.000 core.py:2314(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 core.py:2325(_SingleCharLiteral)
       12    0.000    0.000    0.000    0.000 core.py:2326(parseImpl)
        1    0.000    0.000    0.000    0.000 core.py:2335(Keyword)
        1    0.000    0.000    0.001    0.001 core.py:2396(Option)
       12    0.001    0.000    0.002    0.000 core.py:2444(__init__)
       95    0.000    0.000    0.000    0.000 core.py:245(<genexpr>)
        1    0.000    0.000    0.000    0.000 core.py:2453(CaselessLiteral)
        1    0.000    0.000    0.000    0.000 core.py:2480(CaselessKeyword)
       18    0.000    0.000    0.008    0.000 core.py:250(_trim_arity)
        1    0.000    0.000    0.000    0.000 core.py:2505(CloseMatch)
       12    0.000    0.000    0.001    0.000 core.py:2565(_parse_decls)
        1    0.000    0.000    0.000    0.000 core.py:2594(Word)
       15    0.000    0.000    0.000    0.000 core.py:2599(<lambda>)
        9    0.001    0.000    0.019    0.002 core.py:2659(__init__)
       11    0.000    0.000    0.004    0.000 core.py:2772(_generateDefaultName)
       16    0.000    0.000    0.004    0.000 core.py:2773(charsAsStr)
       12    0.000    0.000    0.000    0.000 core.py:279(wrapper)
       16    0.000    0.000    0.000    0.000 core.py:2801(parseImpl)
        1    0.000    0.000    0.000    0.000 core.py:2834(_WordRegex)
        1    0.000    0.000    0.000    0.000 core.py:2844(Char)
        1    0.000    0.000    0.000    0.000 core.py:2871(Regex)
        1    0.000    0.000    0.000    0.000 core.py:2880(Argument)
       24    0.001    0.000    0.252    0.011 core.py:2896(__init__)
       28    0.000    0.000    0.001    0.000 core.py:2952(_generateDefaultName)
       20    0.000    0.000    0.000    0.000 core.py:2955(parseImpl)
        1    0.000    0.000    0.000    0.000 core.py:3016(QuotedString)
        2    0.000    0.000    0.001    0.001 core.py:3057(__init__)
        1    0.000    0.000    0.000    0.000 core.py:312(condition_as_parse_action)
        2    0.000    0.000    0.000    0.000 core.py:3170(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 core.py:3212(CharsNotIn)
        1    0.000    0.000    0.000    0.000 core.py:3233(__init__)
        2    0.000    0.000    0.000    0.000 core.py:3268(_generateDefaultName)
        4    0.000    0.000    0.000    0.000 core.py:3275(parseImpl)
        1    0.000    0.000    0.000    0.000 core.py:3292(White)
        1    0.000    0.000    0.000    0.000 core.py:3328(__init__)
        3    0.000    0.000    0.000    0.000 core.py:3332(<genexpr>)
        2    0.000    0.000    0.000    0.000 core.py:3350(_generateDefaultName)
        6    0.000    0.000    0.000    0.000 core.py:3351(<genexpr>)
        1    0.000    0.000    0.000    0.000 core.py:3369(PositionToken)
        6    0.000    0.000    0.000    0.000 core.py:3370(__init__)
        1    0.000    0.000    0.000    0.000 core.py:3376(GoToColumn)
        1    0.000    0.000    0.000    0.000 core.py:3407(LineStart)
        1    0.000    0.000    0.000    0.000 core.py:3430(__init__)
        1    0.000    0.000    0.000    0.000 core.py:3454(LineEnd)
        3    0.000    0.000    0.000    0.000 core.py:3459(__init__)
        1    0.000    0.000    0.000    0.000 core.py:3477(StringStart)
        1    0.000    0.000    0.000    0.000 core.py:3482(__init__)
        1    0.000    0.000    0.000    0.000 core.py:3494(StringEnd)
        1    0.000    0.000    0.000    0.000 core.py:3499(__init__)
        1    0.000    0.000    0.000    0.000 core.py:3514(WordStart)
        1    0.000    0.000    0.000    0.000 core.py:3540(WordEnd)
        1    0.000    0.000    0.000    0.000 core.py:3567(ParseExpression)
       72    0.001    0.000    0.006    0.000 core.py:3572(__init__)
      221    0.000    0.000    0.000    0.000 core.py:3585(<genexpr>)
       10    0.000    0.000    0.000    0.000 core.py:3598(recurse)
     55/8    0.001    0.000    0.031    0.004 core.py:3606(leave_whitespace)
       55    0.000    0.000    0.021    0.000 core.py:3614(<listcomp>)
        1    0.000    0.000    0.000    0.000 core.py:3631(ignore)
     21/4    0.000    0.000    0.006    0.001 core.py:3646(streamline)
   113/56    0.001    0.000    0.028    0.001 core.py:3693(copy)
   113/56    0.001    0.000    0.023    0.000 core.py:3695(<listcomp>)
        1    0.000    0.000    0.000    0.000 core.py:3728(And)
        1    0.000    0.000    0.000    0.000 core.py:3746(_ErrorStop)
       53    0.001    0.000    0.007    0.000 core.py:3754(__init__)
       62    0.000    0.000    0.000    0.000 core.py:3772(<genexpr>)
     12/5    0.001    0.000    0.006    0.001 core.py:3782(streamline)
       26    0.000    0.000    0.001    0.000 core.py:3786(<genexpr>)
       22    0.000    0.000    0.000    0.000 core.py:3822(<genexpr>)
     10/2    0.000    0.000    0.004    0.002 core.py:3825(parseImpl)
       11    0.000    0.000    0.001    0.000 core.py:3867(_generateDefaultName)
       40    0.000    0.000    0.001    0.000 core.py:3868(<genexpr>)
        1    0.000    0.000    0.000    0.000 core.py:3875(Or)
        1    0.000    0.000    0.006    0.006 core.py:390(ParserElement)
        1    0.001    0.001    0.092    0.092 core.py:4(<module>)
        1    0.000    0.000    0.000    0.000 core.py:4028(MatchFirst)
       19    0.000    0.000    0.003    0.000 core.py:4046(__init__)
       49    0.000    0.000    0.000    0.000 core.py:4049(<genexpr>)
       54    0.000    0.000    0.000    0.000 core.py:4050(<genexpr>)
     11/4    0.000    0.000    0.003    0.001 core.py:4054(streamline)
       27    0.000    0.000    0.000    0.000 core.py:4060(<genexpr>)
       32    0.000    0.000    0.000    0.000 core.py:4061(<genexpr>)
       24    0.000    0.000    0.000    0.000 core.py:4062(<genexpr>)
     20/8    0.000    0.000    0.003    0.000 core.py:4068(parseImpl)
        9    0.000    0.000    0.001    0.000 core.py:4107(_generateDefaultName)
       33    0.000    0.000    0.000    0.000 core.py:4108(<genexpr>)
        1    0.000    0.000    0.000    0.000 core.py:4137(Each)
        1    0.000    0.000    0.000    0.000 core.py:4304(ParseElementEnhance)
       61    0.001    0.000    0.003    0.000 core.py:4309(__init__)
       19    0.000    0.000    0.000    0.000 core.py:4330(recurse)
     16/2    0.000    0.000    0.003    0.001 core.py:4333(parseImpl)
     29/8    0.000    0.000    0.037    0.005 core.py:4339(leave_whitespace)
        1    0.000    0.000    0.001    0.001 core.py:4357(ignore)
     16/4    0.000    0.000    0.005    0.001 core.py:4369(streamline)
        5    0.000    0.000    0.000    0.000 core.py:4390(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 core.py:4397(IndentedBlock)
      210    0.004    0.000    0.004    0.000 core.py:440(__init__)
        1    0.000    0.000    0.000    0.000 core.py:4403(_Indent)
        1    0.000    0.000    0.000    0.000 core.py:4409(_IndentGreater)
        1    0.000    0.000    0.000    0.000 core.py:4461(AtStringStart)
        1    0.000    0.000    0.000    0.000 core.py:4482(AtLineStart)
        1    0.000    0.000    0.000    0.000 core.py:4515(FollowedBy)
        1    0.000    0.000    0.000    0.000 core.py:4538(__init__)
        1    0.000    0.000    0.000    0.000 core.py:4551(PrecededBy)
        1    0.000    0.000    0.000    0.000 core.py:4632(Located)
        1    0.000    0.000    0.000    0.000 core.py:4674(NotAny)
        3    0.000    0.000    0.000    0.000 core.py:4699(__init__)
        3    0.000    0.000    0.000    0.000 core.py:4713(_generateDefaultName)
        1    0.000    0.000    0.001    0.001 core.py:4717(_MultipleMatch)
        5    0.000    0.000    0.000    0.000 core.py:4718(__init__)
        5    0.000    0.000    0.000    0.000 core.py:4733(stopOn)
        2    0.000    0.000    0.003    0.001 core.py:4739(parseImpl)
        1    0.000    0.000    0.000    0.000 core.py:4795(OneOrMore)
        1    0.000    0.000    0.000    0.000 core.py:4822(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 core.py:4826(ZeroOrMore)
        3    0.000    0.000    0.000    0.000 core.py:4839(__init__)
        1    0.000    0.000    0.000    0.000 core.py:4859(_NullToken)
        1    0.000    0.000    0.000    0.000 core.py:4867(Opt)
      405    0.004    0.000    0.036    0.000 core.py:489(copy)
       21    0.000    0.000    0.001    0.000 core.py:4908(__init__)
        2    0.000    0.000    0.000    0.000 core.py:4916(parseImpl)
        3    0.000    0.000    0.000    0.000 core.py:4932(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 core.py:4943(SkipTo)
        1    0.000    0.000    0.000    0.000 core.py:5004(__init__)
        1    0.000    0.000    0.000    0.000 core.py:5077(Forward)
        1    0.000    0.000    0.001    0.001 core.py:5106(__init__)
        1    0.000    0.000    0.000    0.000 core.py:5111(__lshift__)
        1    0.000    0.000    0.000    0.000 core.py:5131(__or__)
        2    0.000    0.000    0.000    0.000 core.py:518(set_results_name)
        1    0.000    0.000    0.000    0.000 core.py:5323(TokenConverter)
       28    0.000    0.000    0.002    0.000 core.py:5328(__init__)
        1    0.000    0.000    0.000    0.000 core.py:5333(Combine)
        9    0.000    0.000    0.038    0.004 core.py:5352(__init__)
        1    0.000    0.000    0.000    0.000 core.py:5390(Group)
        4    0.000    0.000    0.000    0.000 core.py:5411(__init__)
        6    0.000    0.000    0.000    0.000 core.py:5416(postParse)
        1    0.000    0.000    0.000    0.000 core.py:5427(Dict)
        1    0.000    0.000    0.000    0.000 core.py:5469(__init__)
        5    0.000    0.000    0.001    0.000 core.py:551(_setResultsName)
        1    0.000    0.000    0.000    0.000 core.py:5514(Suppress)
       14    0.000    0.000    0.001    0.000 core.py:5545(__init__)
        5    0.000    0.000    0.001    0.000 core.py:5550(__add__)
        4    0.000    0.000    0.000    0.000 core.py:5562(postParse)
       12    0.000    0.000    0.000    0.000 core.py:5627(<lambda>)
        2    0.000    0.000    0.007    0.003 core.py:5644(srange)
        6    0.000    0.000    0.000    0.000 core.py:5671(<lambda>)
       97    0.000    0.000    0.000    0.000 core.py:5673(<genexpr>)
        8    0.000    0.000    0.000    0.000 core.py:5676(<genexpr>)
        5    0.000    0.000    0.000    0.000 core.py:5681(token_map)
        1    0.000    0.000    0.027    0.027 core.py:5758(<listcomp>)
       14    0.000    0.000    0.008    0.001 core.py:585(set_parse_action)
       28    0.000    0.000    0.000    0.000 core.py:665(<genexpr>)
        3    0.000    0.000    0.000    0.000 core.py:673(add_parse_action)
        3    0.000    0.000    0.000    0.000 core.py:68(_check_multicommand)
        1    0.000    0.000    0.000    0.000 core.py:685(add_condition)
       60    0.000    0.000    0.000    0.000 core.py:749(preParse)
       46    0.000    0.000    0.000    0.000 core.py:764(postParse)
    102/2    0.001    0.000    0.004    0.002 core.py:768(_parseNoCache)
        1    0.000    0.000    0.000    0.000 core.py:77(__compat__)
        1    0.000    0.000    0.001    0.001 core.py:805(BaseCommand)
        5    0.000    0.000    0.000    0.000 core.py:838(__init__)
        1    0.000    0.000    0.000    0.000 core.py:94(<listcomp>)
        2    0.000    0.000    0.000    0.000 core.py:945(reset_cache)
        1    0.000    0.000    0.016    0.016 ctx.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ctx.py:219(AppContext)
        1    0.000    0.000    0.000    0.000 ctx.py:24(_AppCtxGlobals)
        1    0.000    0.000    0.001    0.001 ctx.py:266(RequestContext)
        1    0.000    0.000    0.033    0.033 dataclasses.py:1(<module>)
        5    0.000    0.000    0.013    0.003 dataclasses.py:1010(wrap)
        1    0.000    0.000    0.000    0.000 dataclasses.py:155(FrozenInstanceError)
        1    0.000    0.000    0.000    0.000 dataclasses.py:160(_HAS_DEFAULT_FACTORY_CLASS)
        1    0.000    0.000    0.000    0.000 dataclasses.py:167(_MISSING_TYPE)
        1    0.000    0.000    0.000    0.000 dataclasses.py:176(_FIELD_BASE)
        3    0.000    0.000    0.000    0.000 dataclasses.py:177(__init__)
        1    0.000    0.000    0.000    0.000 dataclasses.py:202(_InitVarMeta)
        1    0.000    0.000    0.000    0.000 dataclasses.py:206(InitVar)
        1    0.000    0.000    0.000    0.000 dataclasses.py:231(Field)
        9    0.000    0.000    0.000    0.000 dataclasses.py:244(__init__)
        1    0.000    0.000    0.000    0.000 dataclasses.py:289(_DataclassParams)
        5    0.000    0.000    0.000    0.000 dataclasses.py:298(__init__)
        9    0.000    0.000    0.000    0.000 dataclasses.py:320(field)
       15    0.000    0.000    0.000    0.000 dataclasses.py:342(_tuple_str)
       15    0.000    0.000    0.000    0.000 dataclasses.py:351(<listcomp>)
        5    0.000    0.000    0.000    0.000 dataclasses.py:356(_recursive_repr)
       30    0.001    0.000    0.008    0.000 dataclasses.py:375(_create_fn)
       94    0.000    0.000    0.000    0.000 dataclasses.py:389(<genexpr>)
        9    0.000    0.000    0.000    0.000 dataclasses.py:402(_field_assign)
        9    0.000    0.000    0.000    0.000 dataclasses.py:414(_field_init)
        9    0.000    0.000    0.000    0.000 dataclasses.py:468(_init_param)
        5    0.000    0.000    0.002    0.000 dataclasses.py:487(_init_fn)
        5    0.000    0.000    0.000    0.000 dataclasses.py:505(<dictcomp>)
        5    0.000    0.000    0.000    0.000 dataclasses.py:530(<listcomp>)
        5    0.000    0.000    0.001    0.000 dataclasses.py:537(_repr_fn)
        5    0.000    0.000    0.000    0.000 dataclasses.py:541(<listcomp>)
        5    0.000    0.000    0.003    0.001 dataclasses.py:548(_frozen_get_del_attr)
       14    0.000    0.000    0.000    0.000 dataclasses.py:552(<genexpr>)
        5    0.000    0.000    0.001    0.000 dataclasses.py:573(_cmp_fn)
        5    0.000    0.000    0.002    0.000 dataclasses.py:587(_hash_fn)
        9    0.000    0.000    0.000    0.000 dataclasses.py:595(_is_classvar)
        9    0.000    0.000    0.000    0.000 dataclasses.py:603(_is_initvar)
        9    0.000    0.000    0.000    0.000 dataclasses.py:669(_get_field)
       25    0.000    0.000    0.000    0.000 dataclasses.py:751(_set_new_attribute)
        5    0.000    0.000    0.002    0.000 dataclasses.py:768(_hash_add)
        5    0.000    0.000    0.000    0.000 dataclasses.py:769(<listcomp>)
        5    0.001    0.000    0.013    0.003 dataclasses.py:807(_process_class)
        5    0.000    0.000    0.001    0.000 dataclasses.py:861(<listcomp>)
        5    0.000    0.000    0.000    0.000 dataclasses.py:922(<listcomp>)
        5    0.000    0.000    0.000    0.000 dataclasses.py:938(<listcomp>)
        5    0.000    0.000    0.000    0.000 dataclasses.py:941(<listcomp>)
        5    0.000    0.000    0.000    0.000 dataclasses.py:947(<listcomp>)
        5    0.000    0.000    0.000    0.000 dataclasses.py:996(dataclass)
        1    0.000    0.000    0.029    0.029 datastructures.py:1(<module>)
        1    0.000    0.000    0.000    0.000 datastructures.py:105(ImmutableDictMixin)
        1    0.000    0.000    0.000    0.000 datastructures.py:1317(ImmutableHeadersMixin)
        1    0.000    0.000    0.000    0.000 datastructures.py:1370(EnvironHeaders)
        1    0.000    0.000    0.000    0.000 datastructures.py:1421(CombinedMultiDict)
        1    0.000    0.000    0.000    0.000 datastructures.py:155(ImmutableMultiDictMixin)
        1    0.000    0.000    0.000    0.000 datastructures.py:1569(FileMultiDict)
        1    0.000    0.000    0.000    0.000 datastructures.py:1602(ImmutableDict)
        1    0.000    0.000    0.000    0.000 datastructures.py:1611(copy)
        1    0.000    0.000    0.000    0.000 datastructures.py:1622(ImmutableMultiDict)
        1    0.000    0.000    0.000    0.000 datastructures.py:1639(ImmutableOrderedMultiDict)
        1    0.000    0.000    0.000    0.000 datastructures.py:1659(Accept)
        1    0.000    0.000    0.000    0.000 datastructures.py:1838(MIMEAccept)
        5    0.000    0.000    0.000    0.000 datastructures.py:185(_calls_update)
        1    0.000    0.000    0.000    0.000 datastructures.py:1912(LanguageAccept)
        1    0.000    0.000    0.000    0.000 datastructures.py:1966(CharsetAccept)
       13    0.000    0.000    0.000    0.000 datastructures.py:1979(cache_control_property)
        1    0.000    0.000    0.000    0.000 datastructures.py:198(UpdateDictMixin)
        1    0.000    0.000    0.000    0.000 datastructures.py:2004(_CacheControl)
        1    0.000    0.000    0.000    0.000 datastructures.py:2096(RequestCacheControl)
        1    0.000    0.000    0.000    0.000 datastructures.py:2115(ResponseCacheControl)
       25    0.000    0.000    0.000    0.000 datastructures.py:2138(csp_property)
        1    0.000    0.000    0.000    0.000 datastructures.py:2151(ContentSecurityPolicy)
        1    0.000    0.000    0.000    0.000 datastructures.py:2227(CallbackDict)
        1    0.000    0.000    0.000    0.000 datastructures.py:2240(HeaderSet)
        1    0.000    0.000    0.000    0.000 datastructures.py:232(TypeConversionDict)
        1    0.000    0.000    0.000    0.000 datastructures.py:2390(ETags)
        1    0.000    0.000    0.000    0.000 datastructures.py:2478(IfRange)
        1    0.000    0.000    0.000    0.000 datastructures.py:2508(Range)
        4    0.000    0.000    0.000    0.000 datastructures.py:2583(_callback_property)
        1    0.000    0.000    0.000    0.000 datastructures.py:2595(ContentRange)
        1    0.000    0.000    0.000    0.000 datastructures.py:2653(Authorization)
        1    0.000    0.000    0.000    0.000 datastructures.py:273(ImmutableTypeConversionDict)
        5    0.000    0.000    0.000    0.000 datastructures.py:2759(auth_property)
        2    0.000    0.000    0.000    0.000 datastructures.py:2779(_set_property)
        1    0.000    0.000    0.000    0.000 datastructures.py:2792(WWWAuthenticate)
        1    0.000    0.000    0.000    0.000 datastructures.py:291(MultiDict)
        1    0.000    0.000    0.000    0.000 datastructures.py:2916(FileStorage)
        1    0.000    0.000    0.000    0.000 datastructures.py:40(ImmutableListMixin)
        1    0.000    0.000    0.000    0.000 datastructures.py:623(_omd_bucket)
        1    0.000    0.000    0.000    0.000 datastructures.py:655(OrderedMultiDict)
        1    0.000    0.000    0.000    0.000 datastructures.py:850(Headers)
        1    0.000    0.000    0.000    0.000 datastructures.py:93(ImmutableList)
        1    0.000    0.000    0.006    0.006 datetime.py:1(<module>)
        2    0.000    0.000    0.000    0.000 datetime.py:1011(toordinal)
        1    0.000    0.000    0.000    0.000 datetime.py:1150(tzinfo)
        3    0.000    0.000    0.000    0.000 datetime.py:1220(__new__)
        1    0.000    0.000    0.000    0.000 datetime.py:1225(time)
        2    0.000    0.000    0.000    0.000 datetime.py:1250(__new__)
        1    0.000    0.000    0.000    0.000 datetime.py:1574(datetime)
        3    0.000    0.000    0.000    0.000 datetime.py:1582(__new__)
        1    0.000    0.000    0.000    0.000 datetime.py:2268(timezone)
        3    0.000    0.000    0.000    0.000 datetime.py:2288(_create)
       98    0.000    0.000    0.000    0.000 datetime.py:385(_check_int_field)
       26    0.000    0.000    0.000    0.000 datetime.py:417(_check_date_fields)
        1    0.000    0.000    0.000    0.000 datetime.py:43(_is_leap)
        5    0.000    0.000    0.000    0.000 datetime.py:430(_check_time_fields)
        5    0.000    0.000    0.000    0.000 datetime.py:447(_check_tzinfo_arg)
        5    0.000    0.000    0.000    0.000 datetime.py:47(_days_before_year)
        1    0.000    0.000    0.000    0.000 datetime.py:474(timedelta)
       13    0.001    0.000    0.001    0.000 datetime.py:493(__new__)
       28    0.000    0.000    0.000    0.000 datetime.py:52(_days_in_month)
        2    0.000    0.000    0.000    0.000 datetime.py:59(_days_before_month)
        2    0.000    0.000    0.000    0.000 datetime.py:64(_ymd2ord)
        2    0.000    0.000    0.000    0.000 datetime.py:666(__neg__)
        1    0.000    0.000    0.000    0.000 datetime.py:798(date)
       23    0.000    0.000    0.000    0.000 datetime.py:828(__new__)
        1    0.000    0.000    0.000    0.000 debug.py:1(<module>)
        1    0.000    0.000    0.025    0.025 decimal.py:2(<module>)
        1    0.000    0.000    0.007    0.007 decoder.py:1(<module>)
        1    0.000    0.000    0.000    0.000 decoder.py:20(JSONDecodeError)
        1    0.000    0.000    0.000    0.000 decoder.py:254(JSONDecoder)
        1    0.000    0.000    0.000    0.000 decoder.py:284(__init__)
        1    0.000    0.000    0.006    0.006 decorators.py:1(<module>)
        3    0.000    0.000    0.001    0.000 decorators.py:124(_make_command)
        3    0.000    0.000    0.001    0.000 decorators.py:156(command)
        3    0.000    0.000    0.001    0.000 decorators.py:183(decorator)
        2    0.000    0.000    0.000    0.000 decorators.py:20(pass_context)
       11    0.000    0.000    0.000    0.000 decorators.py:200(_param_memo)
       11    0.000    0.000    0.000    0.000 decorators.py:229(option)
       11    0.000    0.000    0.002    0.000 decorators.py:240(decorator)
        1    0.000    0.000    0.000    0.000 decorators.py:43(make_pass_decorator)
        1    0.000    0.000    0.000    0.000 decorators.py:68(decorator)
        1    0.000    0.000    0.039    0.039 defaults.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dep_util.py:1(<module>)
        1    0.000    0.000    0.001    0.001 difflib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 difflib.py:1696(HtmlDiff)
        1    0.000    0.000    0.000    0.000 difflib.py:43(SequenceMatcher)
        1    0.000    0.000    0.000    0.000 difflib.py:746(Differ)
        1    0.000    0.000    0.000    0.000 dir_util.py:1(<module>)
        1    0.000    0.000    0.000    0.000 directives.py:25(<module>)
        1    0.000    0.000    0.000    0.000 directives.py:28(Directives)
        1    0.000    0.000    0.003    0.003 directives.py:29(__init__)
        1    0.000    0.000    0.004    0.004 dis.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dis.py:209(Instruction)
        1    0.000    0.000    0.000    0.000 dis.py:479(Bytecode)
        1    0.000    0.000    0.000    0.000 dll.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dummy.py:1(<module>)
        1    0.000    0.000    0.002    0.002 encoder.py:1(<module>)
        5    0.000    0.000    0.000    0.000 encoder.py:307(iterencode)
    27313    0.025    0.000    0.033    0.000 encoder.py:344(__mark_markers)
    27313    0.017    0.000    0.022    0.000 encoder.py:350(__remove_markers)
288314/158263    0.200    0.000    0.937    0.000 encoder.py:354(__iterencode_list)
928201/180137    0.497    0.000    1.226    0.000 encoder.py:405(__iterencode_dict)
242741/180137    0.089    0.000    1.257    0.000 encoder.py:480(__iterencode)
        1    0.000    0.000    0.000    0.000 encoder.py:59(JSONEncoder)
        6    0.000    0.000    0.000    0.000 encoder.py:90(__init__)
        1    0.000    0.000    0.001    0.001 encoders.py:5(<module>)
        1    0.000    0.000    0.002    0.002 encoding.py:1(<module>)
        1    0.003    0.003    0.003    0.003 entities.py:1(<module>)
        5    0.000    0.000    0.000    0.000 enum.py:1003(<listcomp>)
       11    0.000    0.000    0.000    0.000 enum.py:1015(<lambda>)
       20    0.000    0.000    0.000    0.000 enum.py:1021(_power_of_two)
      338    0.001    0.000    0.001    0.000 enum.py:12(_is_descriptor)
       29    0.000    0.000    0.002    0.000 enum.py:143(__prepare__)
       29    0.008    0.000    0.020    0.001 enum.py:157(__new__)
       29    0.000    0.000    0.000    0.000 enum.py:175(<dictcomp>)
       29    0.003    0.000    0.004    0.000 enum.py:200(<setcomp>)
      428    0.001    0.000    0.001    0.000 enum.py:22(_is_dunder)
       45    0.000    0.000    0.000    0.000 enum.py:223(<genexpr>)
      468    0.001    0.000    0.018    0.000 enum.py:319(__call__)
      428    0.001    0.000    0.001    0.000 enum.py:33(_is_sunder)
       29    0.000    0.000    0.000    0.000 enum.py:376(__getattr__)
       18    0.000    0.000    0.000    0.000 enum.py:404(__members__)
      514    0.002    0.000    0.003    0.000 enum.py:423(__setattr__)
       14    0.001    0.000    0.015    0.001 enum.py:436(_create_)
        1    0.000    0.000    0.000    0.000 enum.py:44(_make_class_unpicklable)
       14    0.000    0.000    0.021    0.001 enum.py:489(_convert_)
       14    0.002    0.000    0.005    0.000 enum.py:506(<listcomp>)
      170    0.000    0.000    0.000    0.000 enum.py:512(<lambda>)
       29    0.000    0.000    0.000    0.000 enum.py:528(_check_for_existing_members)
       72    0.000    0.000    0.001    0.000 enum.py:538(_get_mixins_)
       72    0.000    0.000    0.001    0.000 enum.py:549(_find_data_type)
       29    0.000    0.000    0.001    0.000 enum.py:585(_find_new_)
      454    0.001    0.000    0.002    0.000 enum.py:637(__new__)
       29    0.000    0.000    0.000    0.000 enum.py:68(__init__)
       13    0.000    0.000    0.000    0.000 enum.py:682(_generate_next_value_)
      428    0.003    0.000    0.007    0.000 enum.py:75(__setitem__)
       65    0.000    0.000    0.000    0.000 enum.py:754(name)
       87    0.000    0.000    0.000    0.000 enum.py:759(value)
        5    0.000    0.000    0.001    0.000 enum.py:895(_missing_)
        5    0.000    0.000    0.001    0.000 enum.py:905(_create_pseudo_member_)
       14    0.000    0.000    0.001    0.000 enum.py:938(__or__)
      204    0.002    0.000    0.005    0.000 enum.py:944(__and__)
       15    0.000    0.000    0.000    0.000 enum.py:963(_high_bit)
        5    0.000    0.000    0.001    0.000 enum.py:984(_decompose)
        1    0.000    0.000    0.158    0.158 environment.py:1(<module>)
        1    0.000    0.000    0.003    0.003 environment.py:1117(Template)
        1    0.000    0.000    0.010    0.010 environment.py:143(Environment)
        1    0.000    0.000    0.000    0.000 environment.py:1509(TemplateModule)
        1    0.000    0.000    0.000    0.000 environment.py:1549(TemplateExpression)
        1    0.000    0.000    0.000    0.000 environment.py:1568(TemplateStream)
        2    0.001    0.001    0.004    0.002 error.py:1(<module>)
        1    0.000    0.000    0.000    0.000 error.py:19(URLError)
        1    0.000    0.000    0.000    0.000 error.py:25(SSLError)
        1    0.000    0.000    0.000    0.000 error.py:35(HTTPError)
        1    0.000    0.000    0.000    0.000 error.py:39(SSLCertVerificationError)
        1    0.000    0.000    0.000    0.000 error.py:42(SSLZeroReturnError)
        1    0.000    0.000    0.000    0.000 error.py:45(SSLWantReadError)
        1    0.000    0.000    0.000    0.000 error.py:50(SSLWantWriteError)
        1    0.000    0.000    0.000    0.000 error.py:55(SSLSyscallError)
        1    0.000    0.000    0.000    0.000 error.py:58(SSLEOFError)
        1    0.000    0.000    0.000    0.000 error.py:73(ContentTooShortError)
        1    0.000    0.000    0.001    0.001 errorcodes.py:4(<module>)
        1    0.000    0.000    0.000    0.000 errors.py:1(<module>)
        1    0.000    0.000    0.000    0.000 errors.py:104(ObsoleteHeaderDefect)
        1    0.000    0.000    0.000    0.000 errors.py:107(NonASCIILocalPartDefect)
        1    0.000    0.000    0.000    0.000 errors.py:11(DistutilsError)
        1    0.000    0.000    0.000    0.000 errors.py:12(MessageParseError)
        1    0.000    0.000    0.000    0.000 errors.py:15(DistutilsModuleError)
        1    0.000    0.000    0.000    0.000 errors.py:16(HeaderParseError)
        1    0.000    0.000    0.000    0.000 errors.py:20(BoundaryError)
        1    0.000    0.000    0.000    0.000 errors.py:20(DistutilsClassError)
        1    0.000    0.000    0.000    0.000 errors.py:24(MultipartConversionError)
        1    0.000    0.000    0.000    0.000 errors.py:27(DistutilsGetoptError)
        1    0.000    0.000    0.000    0.000 errors.py:28(CharsetError)
        1    0.000    0.000    0.000    0.000 errors.py:31(DistutilsArgError)
        1    0.000    0.000    0.000    0.000 errors.py:33(MessageDefect)
        1    0.000    0.000    0.000    0.000 errors.py:36(DistutilsFileError)
        1    0.000    0.000    0.000    0.000 errors.py:41(NoBoundaryInMultipartDefect)
        1    0.000    0.000    0.000    0.000 errors.py:42(DistutilsOptionError)
        1    0.000    0.000    0.000    0.000 errors.py:44(StartBoundaryNotFoundDefect)
        1    0.000    0.000    0.000    0.000 errors.py:47(CloseBoundaryNotFoundDefect)
        1    0.000    0.000    0.001    0.001 errors.py:5(<module>)
        1    0.000    0.000    0.000    0.000 errors.py:50(FirstHeaderLineIsContinuationDefect)
        1    0.000    0.000    0.000    0.000 errors.py:51(DistutilsSetupError)
        1    0.000    0.000    0.000    0.000 errors.py:53(MisplacedEnvelopeHeaderDefect)
        1    0.000    0.000    0.000    0.000 errors.py:56(DistutilsPlatformError)
        1    0.000    0.000    0.000    0.000 errors.py:56(MissingHeaderBodySeparatorDefect)
        1    0.000    0.000    0.000    0.000 errors.py:61(MultipartInvariantViolationDefect)
        1    0.000    0.000    0.000    0.000 errors.py:62(DistutilsExecError)
        1    0.000    0.000    0.000    0.000 errors.py:64(InvalidMultipartContentTransferEncodingDefect)
        1    0.000    0.000    0.000    0.000 errors.py:67(DistutilsInternalError)
        1    0.000    0.000    0.000    0.000 errors.py:67(UndecodableBytesDefect)
        1    0.000    0.000    0.000    0.000 errors.py:70(InvalidBase64PaddingDefect)
        1    0.000    0.000    0.000    0.000 errors.py:72(DistutilsTemplateError)
        1    0.000    0.000    0.000    0.000 errors.py:73(InvalidBase64CharactersDefect)
        1    0.000    0.000    0.000    0.000 errors.py:75(DistutilsByteCompileError)
        1    0.000    0.000    0.000    0.000 errors.py:76(InvalidBase64LengthDefect)
        1    0.000    0.000    0.000    0.000 errors.py:79(CCompilerError)
        1    0.000    0.000    0.000    0.000 errors.py:8(MessageError)
        1    0.000    0.000    0.000    0.000 errors.py:81(HeaderDefect)
        1    0.000    0.000    0.000    0.000 errors.py:82(PreprocessError)
        1    0.000    0.000    0.000    0.000 errors.py:85(CompileError)
        1    0.000    0.000    0.000    0.000 errors.py:87(InvalidHeaderDefect)
        1    0.000    0.000    0.000    0.000 errors.py:88(LibError)
        1    0.000    0.000    0.000    0.000 errors.py:90(HeaderMissingRequiredValue)
        1    0.000    0.000    0.000    0.000 errors.py:92(LinkError)
        1    0.000    0.000    0.000    0.000 errors.py:93(NonPrintableDefect)
        1    0.000    0.000    0.000    0.000 errors.py:96(UnknownFileError)
        1    0.000    0.000    0.000    0.000 etag.py:1(<module>)
        1    0.000    0.000    0.000    0.000 etag.py:17(ETagResponseMixin)
        1    0.000    0.000    0.000    0.000 etag.py:5(ETagRequestMixin)
        1    0.000    0.000    0.001    0.001 exc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 exc.py:23(BadSignature)
        1    0.000    0.000    0.000    0.000 exc.py:37(BadTimeSignature)
        1    0.000    0.000    0.000    0.000 exc.py:61(SignatureExpired)
        1    0.000    0.000    0.000    0.000 exc.py:67(BadHeader)
        1    0.000    0.000    0.000    0.000 exc.py:8(BadData)
        1    0.000    0.000    0.000    0.000 exc.py:93(BadPayload)
        3    0.000    0.000    0.019    0.006 exceptions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 exceptions.py:11(ExceptionWordUnicode)
        1    0.000    0.000    0.000    0.000 exceptions.py:127(MissingParameter)
        1    0.000    0.000    0.000    0.000 exceptions.py:139(TemplateAssertionError)
        1    0.000    0.000    0.000    0.000 exceptions.py:147(TemplateRuntimeError)
        1    0.000    0.000    0.000    0.000 exceptions.py:153(UndefinedError)
        1    0.000    0.000    0.000    0.000 exceptions.py:157(SecurityError)
        1    0.000    0.000    0.000    0.000 exceptions.py:163(FilterArgumentError)
        1    0.000    0.000    0.006    0.006 exceptions.py:18(TemplateNotFound)
        1    0.000    0.000    0.000    0.000 exceptions.py:19(ParseBaseException)
        1    0.000    0.000    0.000    0.000 exceptions.py:196(NoSuchOption)
        1    0.000    0.000    0.000    0.000 exceptions.py:220(ParseException)
        1    0.000    0.000    0.000    0.000 exceptions.py:23(ClickException)
        1    0.000    0.000    0.000    0.000 exceptions.py:230(BadOptionUsage)
        1    0.000    0.000    0.000    0.000 exceptions.py:233(BadRequest)
       32    0.000    0.000    0.000    0.000 exceptions.py:24(__init__)
        1    0.000    0.000    0.000    0.000 exceptions.py:240(ParseFatalException)
        1    0.000    0.000    0.000    0.000 exceptions.py:247(BadArgumentUsage)
        1    0.000    0.000    0.000    0.000 exceptions.py:247(BadRequestKeyError)
        1    0.000    0.000    0.000    0.000 exceptions.py:247(ParseSyntaxException)
        1    0.000    0.000    0.000    0.000 exceptions.py:256(FileError)
        1    0.000    0.000    0.000    0.000 exceptions.py:256(RecursiveGrammarException)
        1    0.000    0.000    0.000    0.000 exceptions.py:273(Abort)
        1    0.000    0.000    0.000    0.000 exceptions.py:277(Exit)
        1    0.000    0.000    0.000    0.000 exceptions.py:281(ClientDisconnected)
        1    0.000    0.000    0.000    0.000 exceptions.py:296(SecurityError)
        1    0.000    0.000    0.021    0.021 exceptions.py:3(<module>)
        1    0.000    0.000    0.000    0.000 exceptions.py:304(BadHost)
        1    0.000    0.000    0.001    0.001 exceptions.py:311(Unauthorized)
        1    0.000    0.000    0.000    0.000 exceptions.py:385(Forbidden)
        1    0.000    0.000    0.000    0.000 exceptions.py:400(NotFound)
        1    0.000    0.000    0.000    0.000 exceptions.py:413(MethodNotAllowed)
        1    0.000    0.000    0.000    0.000 exceptions.py:449(NotAcceptable)
        1    0.000    0.000    0.000    0.000 exceptions.py:46(UsageError)
        1    0.000    0.000    0.000    0.000 exceptions.py:465(RequestTimeout)
        1    0.000    0.000    0.000    0.000 exceptions.py:478(Conflict)
        1    0.000    0.000    0.000    0.000 exceptions.py:495(Gone)
        1    0.000    0.000    0.000    0.000 exceptions.py:509(LengthRequired)
        1    0.000    0.000    0.000    0.000 exceptions.py:523(PreconditionFailed)
        1    0.000    0.000    0.000    0.000 exceptions.py:53(TemplatesNotFound)
        1    0.000    0.000    0.000    0.000 exceptions.py:536(RequestEntityTooLarge)
        1    0.000    0.000    0.000    0.000 exceptions.py:547(RequestURITooLarge)
        1    0.000    0.000    0.000    0.000 exceptions.py:560(UnsupportedMediaType)
        1    0.000    0.000    0.000    0.000 exceptions.py:573(RequestedRangeNotSatisfiable)
        1    0.000    0.000    0.000    0.000 exceptions.py:609(ExpectationFailed)
        1    0.000    0.000    0.000    0.000 exceptions.py:621(ImATeapot)
        1    0.000    0.000    0.002    0.002 exceptions.py:63(HTTPException)
        1    0.000    0.000    0.000    0.000 exceptions.py:634(UnprocessableEntity)
        1    0.000    0.000    0.000    0.000 exceptions.py:648(Locked)
        1    0.000    0.000    0.000    0.000 exceptions.py:658(FailedDependency)
        1    0.000    0.000    0.000    0.000 exceptions.py:673(PreconditionRequired)
        1    0.000    0.000    0.001    0.001 exceptions.py:692(_RetryAfter)
        1    0.000    0.000    0.000    0.000 exceptions.py:7(TemplateError)
        1    0.000    0.000    0.000    0.000 exceptions.py:727(TooManyRequests)
        1    0.000    0.000    0.000    0.000 exceptions.py:748(RequestHeaderFieldsTooLarge)
        1    0.000    0.000    0.000    0.000 exceptions.py:760(UnavailableForLegalReasons)
        1    0.000    0.000    0.000    0.000 exceptions.py:771(InternalServerError)
        1    0.000    0.000    0.000    0.000 exceptions.py:801(NotImplemented)
        1    0.000    0.000    0.000    0.000 exceptions.py:812(BadGateway)
        1    0.000    0.000    0.000    0.000 exceptions.py:826(ServiceUnavailable)
        1    0.000    0.000    0.000    0.000 exceptions.py:848(GatewayTimeout)
        1    0.000    0.000    0.000    0.000 exceptions.py:85(BadParameter)
        1    0.000    0.000    0.000    0.000 exceptions.py:859(HTTPVersionNotSupported)
        1    0.000    0.000    0.000    0.000 exceptions.py:874(_find_exceptions)
        1    0.000    0.000    0.000    0.000 exceptions.py:88(TemplateSyntaxError)
        1    0.000    0.000    0.001    0.001 exceptions.py:892(Aborter)
        1    0.000    0.000    0.000    0.000 exceptions.py:901(__init__)
        1    0.000    0.000    0.000    0.000 feedparser.py:136(FeedParser)
        1    0.000    0.000    0.000    0.000 feedparser.py:45(BufferedSubFile)
        1    0.000    0.000    0.008    0.008 feedparser.py:5(<module>)
        1    0.000    0.000    0.000    0.000 feedparser.py:532(BytesFeedParser)
        1    0.000    0.000    0.000    0.000 file_util.py:1(<module>)
        1    0.000    0.000    0.000    0.000 filesystem.py:1(<module>)
        1    0.000    0.000    0.000    0.000 filesystem.py:25(BrokenFilesystemWarning)
        1    0.001    0.001    0.030    0.030 filters.py:1(<module>)
        1    0.000    0.000    0.000    0.000 filters.py:1170(_GroupTuple)
        1    0.000    0.000    0.000    0.000 fnmatch.py:1(<module>)
        1    0.000    0.000    0.008    0.008 formatting.py:1(<module>)
        1    0.000    0.000    0.001    0.001 formatting.py:102(HelpFormatter)
        1    0.000    0.000    0.004    0.004 formparser.py:1(<module>)
        2    0.000    0.000    0.000    0.000 formparser.py:137(exhaust_stream)
        1    0.000    0.000    0.002    0.002 formparser.py:158(FormDataParser)
        1    0.000    0.000    0.000    0.000 formparser.py:380(MultiPartParser)
        4    0.000    0.000    0.000    0.000 frozen _structseq:12(__init__)
        1    0.000    0.000    0.000    0.000 frozen _structseq:38(__new__)
        1    0.000    0.000    0.000    0.000 frozen _structseq:63(<listcomp>)
     1230    0.023    0.000    0.030    0.000 frozen _structseq:80(structseq_new)
      277    0.001    0.000    0.001    0.000 frozen importlib._bootstrap_external:1012(__init__)
      277    0.000    0.000    0.000    0.000 frozen importlib._bootstrap_external:1037(get_filename)
      278    0.005    0.000    0.024    0.000 frozen importlib._bootstrap_external:1042(get_data)
      277    0.002    0.000    0.015    0.000 frozen importlib._bootstrap_external:1083(path_stats)
        1    0.000    0.000    0.001    0.001 frozen importlib._bootstrap_external:1088(_cache_bytecode)
        1    0.000    0.000    0.001    0.001 frozen importlib._bootstrap_external:1093(set_data)
        9    0.000    0.000    0.000    0.000 frozen importlib._bootstrap_external:1161(__init__)
        9    0.000    0.000    0.006    0.001 frozen importlib._bootstrap_external:1177(create_module)
        9    0.000    0.000    0.002    0.000 frozen importlib._bootstrap_external:1185(exec_module)
     1990    0.009    0.000    0.039    0.000 frozen importlib._bootstrap_external:121(_path_join)
     1990    0.025    0.000    0.027    0.000 frozen importlib._bootstrap_external:123(<listcomp>)
      555    0.003    0.000    0.007    0.000 frozen importlib._bootstrap_external:127(_path_split)
     1110    0.002    0.000    0.002    0.000 frozen importlib._bootstrap_external:129(<genexpr>)
       32    0.000    0.000    0.007    0.000 frozen importlib._bootstrap_external:1330(_path_hooks)
      566    0.002    0.000    0.010    0.000 frozen importlib._bootstrap_external:1343(_path_importer_cache)
     1228    0.003    0.000    0.064    0.000 frozen importlib._bootstrap_external:135(_path_stat)
      308    0.005    0.000    0.125    0.000 frozen importlib._bootstrap_external:1380(_get_spec)
      308    0.001    0.000    0.126    0.000 frozen importlib._bootstrap_external:1412(find_spec)
      352    0.003    0.000    0.017    0.000 frozen importlib._bootstrap_external:145(_path_is_mode_type)
       32    0.001    0.000    0.001    0.000 frozen importlib._bootstrap_external:1472(__init__)
      192    0.000    0.000    0.000    0.000 frozen importlib._bootstrap_external:1478(<genexpr>)
      286    0.002    0.000    0.009    0.000 frozen importlib._bootstrap_external:1506(_get_spec)
      566    0.018    0.000    0.110    0.000 frozen importlib._bootstrap_external:1511(find_spec)
      319    0.000    0.000    0.016    0.000 frozen importlib._bootstrap_external:154(_path_isfile)
       32    0.001    0.000    0.002    0.000 frozen importlib._bootstrap_external:1562(_fill_cache)
       33    0.000    0.000    0.002    0.000 frozen importlib._bootstrap_external:159(_path_isdir)
       32    0.000    0.000    0.003    0.000 frozen importlib._bootstrap_external:1603(path_hook_for_FileFinder)
       41    0.000    0.000    0.000    0.000 frozen importlib._bootstrap_external:175(_path_isabs)
        1    0.000    0.000    0.001    0.001 frozen importlib._bootstrap_external:180(_write_atomic)
      554    0.009    0.000    0.032    0.000 frozen importlib._bootstrap_external:367(cache_from_source)
      286    0.002    0.000    0.027    0.000 frozen importlib._bootstrap_external:497(_get_cached)
        1    0.000    0.000    0.000    0.000 frozen importlib._bootstrap_external:509(_calc_mode)
      277    0.001    0.000    0.001    0.000 frozen importlib._bootstrap_external:529(_check_name_wrapper)
      277    0.002    0.000    0.005    0.000 frozen importlib._bootstrap_external:566(_classify_pyc)
      277    0.001    0.000    0.003    0.000 frozen importlib._bootstrap_external:599(_validate_timestamp_pyc)
      276    0.003    0.000    0.096    0.000 frozen importlib._bootstrap_external:651(_compile_bytecode)
        1    0.000    0.000    0.001    0.001 frozen importlib._bootstrap_external:664(_code_to_timestamp_pyc)
      566    0.000    0.000    0.000    0.000 frozen importlib._bootstrap_external:68(_relax_case)
      286    0.003    0.000    0.005    0.000 frozen importlib._bootstrap_external:702(spec_from_file_location)
        3    0.000    0.000    0.000    0.000 frozen importlib._bootstrap_external:74(_pack_uint32)
      830    0.002    0.000    0.004    0.000 frozen importlib._bootstrap_external:79(_unpack_uint32)
      277    0.000    0.000    0.000    0.000 frozen importlib._bootstrap_external:847(create_module)
   277/12    0.002    0.000    1.970    0.164 frozen importlib._bootstrap_external:850(exec_module)
        1    0.000    0.000    0.028    0.028 frozen importlib._bootstrap_external:914(source_to_code)
      277    0.009    0.000    0.195    0.001 frozen importlib._bootstrap_external:922(get_code)
       32    0.001    0.000    0.004    0.000 frozen zipimport:63(__init__)
        1    0.000    0.000    0.000    0.000 function.py:1(<module>)
        5    0.000    0.000    0.000    0.000 function.py:151(_getrestype)
        5    0.000    0.000    0.000    0.000 function.py:154(_setrestype)
        2    0.000    0.000    0.000    0.000 function.py:186(_ffishapes)
        2    0.000    0.000    0.000    0.000 function.py:189(<listcomp>)
        7    0.000    0.000    0.000    0.000 function.py:198(_set_address)
        7    0.000    0.000    0.000    0.000 function.py:203(_get_address)
        9    0.000    0.000    0.001    0.000 function.py:206(__init__)
        2    0.000    0.000    0.000    0.000 function.py:277(_wrap_callable)
        5    0.000    0.000    0.001    0.000 function.py:290(__call__)
        5    0.000    0.000    0.000    0.000 function.py:373(_call_funcptr)
        5    0.000    0.000    0.000    0.000 function.py:399(_do_errcheck)
        7    0.000    0.000    0.000    0.000 function.py:412(_getfuncptr_fromaddress)
        7    0.000    0.000    0.000    0.000 function.py:414(<listcomp>)
       10    0.000    0.000    0.000    0.000 function.py:418(_getfuncptr)
        5    0.000    0.000    0.000    0.000 function.py:441(<listcomp>)
        1    0.000    0.000    0.000    0.000 function.py:51(CFuncPtrType)
        5    0.000    0.000    0.000    0.000 function.py:512(_convert_args)
        5    0.000    0.000    0.000    0.000 function.py:606(_is_primitive)
        5    0.000    0.000    0.000    0.000 function.py:610(_wrap_result)
        5    0.000    0.000    0.000    0.000 function.py:630(_build_result)
        1    0.000    0.000    0.000    0.000 function.py:69(CFuncPtr)
        2    0.000    0.000    0.000    0.000 function.py:90(_getargtypes)
      110    0.002    0.000    0.004    0.000 functools.py:34(update_wrapper)
     2871    0.014    0.000    0.112    0.000 functools.py:449(__init__)
     5414    0.006    0.000    0.006    0.000 functools.py:453(__hash__)
     2871    0.016    0.000    0.130    0.000 functools.py:456(_make_key)
       11    0.000    0.000    0.000    0.000 functools.py:487(lru_cache)
       11    0.000    0.000    0.001    0.000 functools.py:525(decorating_function)
       11    0.000    0.000    0.000    0.000 functools.py:531(_lru_cache_wrapper)
2871/2661    0.032    0.000    0.425    0.000 functools.py:572(wrapper)
       52    0.000    0.000    0.001    0.000 functools.py:64(wraps)
        4    0.000    0.000    0.000    0.000 genericpath.py:121(_splitext)
       21    0.000    0.000    0.001    0.000 genericpath.py:16(exists)
       14    0.000    0.000    0.000    0.000 genericpath.py:27(isfile)
       11    0.000    0.000    0.000    0.000 genericpath.py:53(getmtime)
        1    0.000    0.000    0.000    0.000 getopt.py:1(<module>)
        1    0.000    0.000    0.000    0.000 getopt.py:43(GetoptError)
        1    0.000    0.000    0.000    0.000 getpass.py:1(<module>)
        1    0.000    0.000    0.000    0.000 getpass.py:26(GetPassWarning)
        6    0.000    0.000    0.000    0.000 gettext.py:216(_expand_lang)
        3    0.000    0.000    0.001    0.000 gettext.py:542(find)
        3    0.000    0.000    0.002    0.001 gettext.py:583(translation)
        3    0.000    0.000    0.002    0.001 gettext.py:664(dgettext)
        3    0.000    0.000    0.002    0.001 gettext.py:739(gettext)
        1    0.000    0.000    0.001    0.001 glob.py:1(<module>)
        2    0.000    0.000    0.012    0.006 globals.py:1(<module>)
        5    0.000    0.000    0.000    0.000 globals.py:22(get_current_context)
        5    0.000    0.000    0.000    0.000 globals.py:56(resolve_color_default)
        1    0.000    0.000    0.001    0.001 grammar.py:1(<module>)
 7291/750    0.203    0.000    0.287    0.000 grammar.py:132(_update_get_possible_ahead_rec)
     7291    0.019    0.000    0.037    0.000 grammar.py:133(<lambda>)
        5    0.000    0.000    0.001    0.000 grammar.py:239(grm_get_all_NTs)
        5    0.000    0.000    0.000    0.000 grammar.py:245(grm_get_all_inlined_NTs)
        5    0.000    0.000    0.001    0.000 grammar.py:251(grm_get_all_not_inlined_NTs)
        5    0.000    0.000    0.000    0.000 grammar.py:254(<listcomp>)
     2034    0.004    0.000    0.004    0.000 grammar.py:36(grm_get_prod)
     6340    0.007    0.000    0.007    0.000 grammar.py:39(grm_is_inlined_NT)
     4624    0.006    0.000    0.006    0.000 grammar.py:42(grm_is_supertype_NT)
     5949    0.009    0.000    0.025    0.000 grammar.py:45(grm_is_hidden_NT)
     6340    0.020    0.000    0.058    0.000 grammar.py:48(grm_is_skipped_NT)
     2052    0.004    0.000    0.004    0.000 grammar.py:53(grm_is_external_NT)
        5    0.009    0.002    2.194    0.439 grammar.py:60(grm_preprocess)
        5    0.000    0.000    0.000    0.000 grammar.py:61(<listcomp>)
    27076    0.055    0.000    0.061    0.000 grammar.py:66(_find_aliases)
 9414/874    0.209    0.000    0.267    0.000 grammar.py:76(_mark_get_possible_direct_children_rec)
        1    0.000    0.000    0.475    0.475 grammar_expand.py:1(<module>)
        1    0.000    0.000    0.000    0.000 grammar_expand.py:138(DelimitedParser)
        1    0.000    0.000    0.000    0.000 grammar_expand.py:21(Slot)
        1    0.000    0.000    0.000    0.000 grammar_expand.py:37(Expansion)
        1    0.000    0.000    0.000    0.000 grammar_expand.py:874(ExpandTrans)
        1    0.000    0.000    0.000    0.000 greenlet.py:1(<module>)
        1    0.000    0.000    0.000    0.000 greenlet.py:18(GreenletExit)
        1    0.000    0.000    0.000    0.000 greenlet.py:41(greenlet)
        1    0.000    0.000    0.000    0.000 grp.py:15(struct_group)
        1    0.000    0.000    0.002    0.002 grp.py:2(<module>)
       14    0.000    0.000    0.005    0.000 hashlib.py:124(__get_openssl_constructor)
        1    0.000    0.000    0.007    0.007 hashlib.py:5(<module>)
        8    0.000    0.000    0.004    0.001 hashlib.py:80(__get_builtin_constructor)
        1    0.000    0.000    0.000    0.000 header.py:179(Header)
        1    0.000    0.000    0.000    0.000 header.py:413(_ValueFormatter)
        1    0.000    0.000    0.003    0.003 header.py:5(<module>)
        1    0.000    0.000    0.000    0.000 header.py:541(_Accumulator)
        1    0.000    0.000    0.012    0.012 helpers.py:1(<module>)
        1    0.000    0.000    0.002    0.002 helpers.py:1034(<listcomp>)
        1    0.000    0.000    0.002    0.002 helpers.py:13(delimited_list)
        1    0.001    0.001    0.242    0.242 helpers.py:2(<module>)
        1    0.000    0.000    0.000    0.000 helpers.py:24(<module>)
        2    0.000    0.000    0.000    0.000 helpers.py:29(get_env)
        1    0.000    0.000    0.000    0.000 helpers.py:34(ChainedValue)
        1    0.000    0.000    0.000    0.000 helpers.py:37(get_debug_flag)
        1    0.000    0.000    0.000    0.000 helpers.py:51(get_load_dotenv)
        1    0.000    0.000    0.008    0.008 helpers.py:577(_makeTags)
        1    0.000    0.000    0.008    0.008 helpers.py:635(make_html_tags)
        1    0.005    0.005    0.006    0.006 helpers.py:677(<dictcomp>)
        1    0.000    0.000    0.000    0.000 helpers.py:688(OpAssoc)
        1    0.000    0.000    0.000    0.000 helpers.py:705(get_root_path)
        1    0.000    0.000    0.000    0.000 helpers.py:754(locked_cached_property)
        4    0.000    0.000    0.000    0.000 helpers.py:763(__init__)
        3    0.000    0.000    0.000    0.000 helpers.py:772(__get__)
        1    0.000    0.000    0.000    0.000 helpers.py:89(Tree)
        1    0.000    0.000    0.001    0.001 hmac.py:1(<module>)
      257    0.000    0.000    0.000    0.000 hmac.py:17(<genexpr>)
      257    0.000    0.000    0.000    0.000 hmac.py:18(<genexpr>)
        1    0.000    0.000    0.000    0.000 hmac.py:26(HMAC)
        1    0.001    0.001    0.024    0.024 http.py:1(<module>)
        1    0.000    0.000    0.000    0.000 http.py:180(COEP)
        1    0.000    0.000    0.000    0.000 http.py:187(COOP)
        1    0.000    0.000    0.000    0.000 idna.py:146(Codec)
        1    0.000    0.000    0.000    0.000 idna.py:147(encode)
        1    0.000    0.000    0.000    0.000 idna.py:218(IncrementalEncoder)
        1    0.000    0.000    0.000    0.000 idna.py:253(IncrementalDecoder)
        1    0.000    0.000    0.000    0.000 idna.py:292(StreamWriter)
        1    0.000    0.000    0.000    0.000 idna.py:295(StreamReader)
        1    0.000    0.000    0.005    0.005 idna.py:3(<module>)
        1    0.000    0.000    0.000    0.000 idna.py:300(getregentry)
        1    0.000    0.000    0.003    0.003 idtracking.py:1(<module>)
        1    0.000    0.000    0.000    0.000 idtracking.py:174(RootVisitor)
        1    0.000    0.000    0.000    0.000 idtracking.py:232(FrameSymbolVisitor)
        1    0.000    0.000    0.001    0.001 idtracking.py:30(Symbols)
        1    0.000    0.000    0.000    0.000 inputscanner.py:25(<module>)
        1    0.000    0.000    0.000    0.000 inputscanner.py:28(InputScanner)
        1    0.000    0.000    0.009    0.009 inspect.py:1(<module>)
       14    0.000    0.000    0.000    0.000 inspect.py:1217(formatannotation)
       15    0.000    0.000    0.000    0.000 inspect.py:162(isfunction)
       15    0.000    0.000    0.000    0.000 inspect.py:1737(_signature_get_user_defined_method)
        5    0.000    0.000    0.000    0.000 inspect.py:1836(_signature_bound_method)
        5    0.000    0.000    0.000    0.000 inspect.py:1862(_signature_is_builtin)
        5    0.000    0.000    0.000    0.000 inspect.py:1874(_signature_is_functionlike)
        1    0.000    0.000    0.000    0.000 inspect.py:2148(_NoValue)
        5    0.000    0.000    0.001    0.000 inspect.py:2158(_signature_from_function)
     10/5    0.000    0.000    0.002    0.000 inspect.py:2255(_signature_from_callable)
        1    0.000    0.000    0.000    0.000 inspect.py:2457(_void)
        1    0.000    0.000    0.000    0.000 inspect.py:2461(_empty)
        1    0.000    0.000    0.000    0.000 inspect.py:2465(_ParameterKind)
        1    0.000    0.000    0.000    0.000 inspect.py:2494(Parameter)
       14    0.000    0.000    0.000    0.000 inspect.py:2526(__init__)
       23    0.000    0.000    0.000    0.000 inspect.py:2576(name)
        9    0.000    0.000    0.000    0.000 inspect.py:2580(default)
       37    0.000    0.000    0.000    0.000 inspect.py:2588(kind)
        9    0.000    0.000    0.000    0.000 inspect.py:2610(__str__)
        1    0.000    0.000    0.000    0.000 inspect.py:2649(BoundArguments)
        1    0.000    0.000    0.000    0.000 inspect.py:2779(Signature)
       10    0.000    0.000    0.001    0.000 inspect.py:2809(__init__)
       19    0.000    0.000    0.000    0.000 inspect.py:2858(<genexpr>)
        5    0.000    0.000    0.002    0.000 inspect.py:2888(from_callable)
        5    0.000    0.000    0.000    0.000 inspect.py:289(isbuiltin)
       10    0.000    0.000    0.000    0.000 inspect.py:2894(parameters)
       10    0.000    0.000    0.000    0.000 inspect.py:2898(return_annotation)
        5    0.000    0.000    0.000    0.000 inspect.py:2902(replace)
        5    0.000    0.000    0.001    0.000 inspect.py:3094(__str__)
        5    0.000    0.000    0.002    0.000 inspect.py:3140(signature)
        1    0.000    0.000    0.000    0.000 inspect.py:491(getmro)
       10    0.000    0.000    0.000    0.000 inspect.py:497(unwrap)
       10    0.000    0.000    0.000    0.000 inspect.py:517(_is_wrapper)
        3    0.000    0.000    0.001    0.000 inspect.py:610(getdoc)
       14    0.001    0.000    0.001    0.000 inspect.py:629(cleandoc)
       10    0.000    0.000    0.000    0.000 inspect.py:76(isclass)
        1    0.000    0.000    0.000    0.000 inspect.py:899(EndOfBlock)
        1    0.000    0.000    0.000    0.000 inspect.py:901(BlockFinder)
        5    0.000    0.000    0.000    0.000 inspect.py:94(ismethoddescriptor)
        1    0.000    0.000    0.000    0.000 iterators.py:5(<module>)
        1    0.000    0.000    0.012    0.012 jws.py:1(<module>)
        1    0.000    0.000    0.000    0.000 jws.py:186(TimedJSONWebSignatureSerializer)
        1    0.000    0.000    0.000    0.000 jws.py:23(JSONWebSignatureSerializer)
        1    0.000    0.000    0.000    0.000 latin_1.py:41(getregentry)
        1    0.000    0.000    0.036    0.036 lexer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lexer.py:141(<dictcomp>)
       27    0.000    0.000    0.000    0.000 lexer.py:144(<genexpr>)
       26    0.000    0.000    0.000    0.000 lexer.py:144(<lambda>)
        1    0.000    0.000    0.000    0.000 lexer.py:252(Failure)
        1    0.000    0.000    0.000    0.000 lexer.py:267(Token)
        1    0.000    0.000    0.000    0.000 lexer.py:295(TokenStreamIterator)
        1    0.000    0.000    0.000    0.000 lexer.py:317(TokenStream)
        1    0.000    0.000    0.000    0.000 lexer.py:450(OptionalLStrip)
        1    0.000    0.000    0.001    0.001 lexer.py:463(_Rule)
        1    0.000    0.000    0.001    0.001 lexer.py:469(Lexer)
        1    0.000    0.000    0.005    0.005 linecache.py:1(<module>)
        8    0.000    0.000    0.000    0.000 linecache.py:147(lazycache)
        8    0.000    0.000    0.007    0.001 linecache.py:15(getline)
        8    0.000    0.000    0.007    0.001 linecache.py:37(getlines)
        7    0.000    0.000    0.000    0.000 linecache.py:53(checkcache)
        2    0.000    0.000    0.007    0.004 linecache.py:82(updatecache)
        1    0.000    0.000    0.006    0.006 loaders.py:1(<module>)
        1    0.000    0.000    0.001    0.001 loaders.py:151(FileSystemLoader)
        1    0.000    0.000    0.000    0.000 loaders.py:234(PackageLoader)
        1    0.000    0.000    0.000    0.000 loaders.py:395(DictLoader)
        1    0.000    0.000    0.001    0.001 loaders.py:41(BaseLoader)
        1    0.000    0.000    0.001    0.001 loaders.py:419(FunctionLoader)
        1    0.000    0.000    0.001    0.001 loaders.py:464(PrefixLoader)
        1    0.000    0.000    0.001    0.001 loaders.py:527(ChoiceLoader)
        1    0.000    0.000    0.000    0.000 loaders.py:575(_TemplateModule)
        1    0.000    0.000    0.000    0.000 loaders.py:579(ModuleLoader)
        1    0.000    0.000    0.010    0.010 local.py:1(<module>)
        1    0.000    0.000    0.001    0.001 local.py:116(Local)
        3    0.000    0.000    0.000    0.000 local.py:119(__init__)
        1    0.000    0.000    0.000    0.000 local.py:181(LocalStack)
        2    0.000    0.000    0.000    0.000 local.py:208(__init__)
        1    0.000    0.000    0.001    0.001 local.py:262(LocalManager)
        1    0.000    0.000    0.000    0.000 local.py:36(_CannotUseContextVar)
        1    0.000    0.000    0.001    0.001 local.py:378(_ProxyLookup)
       92    0.002    0.000    0.002    0.000 local.py:393(__init__)
       92    0.000    0.000    0.000    0.000 local.py:421(__set_name__)
        1    0.000    0.000    0.000    0.000 local.py:456(_ProxyIOp)
       13    0.000    0.000    0.000    0.000 local.py:463(__init__)
       14    0.000    0.000    0.000    0.000 local.py:478(_l_to_r_op)
        1    0.000    0.000    0.003    0.003 local.py:487(LocalProxy)
        5    0.000    0.000    0.000    0.000 local.py:535(__init__)
        6    0.000    0.000    0.000    0.000 locale.py:384(normalize)
        1    0.000    0.000    0.000    0.000 log.py:1(<module>)
        1    0.000    0.000    0.000    0.000 log.py:14(Log)
        1    0.000    0.000    0.000    0.000 log.py:16(__init__)
        1    0.000    0.000    0.000    0.000 logging.py:1(<module>)
        1    0.000    0.000    0.003    0.003 lzma.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lzma.py:38(LZMAFile)
        1    0.000    0.000    0.001    0.001 message.py:105(Message)
        1    0.000    0.000    0.000    0.000 message.py:1168(EmailMessage)
        1    0.000    0.000    0.006    0.006 message.py:5(<module>)
        1    0.000    0.000    0.000    0.000 message.py:945(MIMEPart)
        1    0.000    0.000    0.001    0.001 mimetypes.py:1(<module>)
        1    0.000    0.000    0.009    0.009 mimetypes.py:197(read)
        1    0.004    0.004    0.009    0.009 mimetypes.py:208(readfp)
        1    0.000    0.000    0.010    0.010 mimetypes.py:345(init)
        1    0.000    0.000    0.000    0.000 mimetypes.py:384(_default_mime_types)
        1    0.000    0.000    0.000    0.000 mimetypes.py:58(MimeTypes)
        1    0.000    0.000    0.001    0.001 mimetypes.py:66(__init__)
      698    0.002    0.000    0.002    0.000 mimetypes.py:80(add_type)
        1    0.000    0.000    0.000    0.000 msvcrt.py:1(<module>)
        1    0.000    0.000    0.054    0.054 multipart.py:1(<module>)
        1    0.000    0.000    0.000    0.000 multipart.py:17(Event)
        1    0.000    0.000    0.000    0.000 multipart.py:21(Preamble)
        1    0.000    0.000    0.000    0.000 multipart.py:229(MultipartEncoder)
        1    0.000    0.000    0.000    0.000 multipart.py:26(Field)
        1    0.000    0.000    0.000    0.000 multipart.py:32(File)
        1    0.000    0.000    0.000    0.000 multipart.py:39(Data)
        1    0.000    0.000    0.000    0.000 multipart.py:45(Epilogue)
        1    0.000    0.000    0.000    0.000 multipart.py:50(NeedData)
        1    0.000    0.000    0.000    0.000 multipart.py:57(State)
        1    0.000    0.000    0.000    0.000 multipart.py:75(MultipartDecoder)
        1    0.000    0.000    0.002    0.002 node_indexer.py:24(<module>)
        1    0.000    0.000    0.000    0.000 node_indexer.py:255(NodeInfo)
        1    0.000    0.000    0.000    0.000 node_indexer.py:261(__init__)
        1    0.000    0.000    0.000    0.000 node_indexer.py:29(NodeIndexer)
        1    0.000    0.000    0.030    0.030 nodes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 nodes.py:1009(Not)
        1    0.000    0.000    0.000    0.000 nodes.py:1015(Neg)
        1    0.000    0.000    0.000    0.000 nodes.py:1021(Pos)
        1    0.000    0.000    0.002    0.002 nodes.py:103(Node)
        1    0.000    0.000    0.000    0.000 nodes.py:1030(EnvironmentAttribute)
        1    0.000    0.000    0.000    0.000 nodes.py:1039(ExtensionAttribute)
        1    0.000    0.000    0.000    0.000 nodes.py:1052(ImportedName)
        1    0.000    0.000    0.000    0.000 nodes.py:1063(InternalName)
        1    0.000    0.000    0.000    0.000 nodes.py:1081(MarkSafe)
        1    0.000    0.000    0.000    0.000 nodes.py:1092(MarkSafeIfAutoescape)
        1    0.000    0.000    0.000    0.000 nodes.py:1114(ContextReference)
        1    0.000    0.000    0.000    0.000 nodes.py:1132(DerivedContextReference)
        1    0.000    0.000    0.000    0.000 nodes.py:1141(Continue)
        1    0.000    0.000    0.000    0.000 nodes.py:1145(Break)
        1    0.000    0.000    0.000    0.000 nodes.py:1149(Scope)
        1    0.000    0.000    0.000    0.000 nodes.py:1156(OverlayScope)
        1    0.000    0.000    0.000    0.000 nodes.py:1175(EvalContextModifier)
        1    0.000    0.000    0.000    0.000 nodes.py:1188(ScopedEvalContextModifier)
        1    0.000    0.000    0.000    0.000 nodes.py:280(Stmt)
        1    0.000    0.000    0.000    0.000 nodes.py:286(Helper)
        1    0.000    0.000    0.000    0.000 nodes.py:292(Template)
        1    0.000    0.000    0.000    0.000 nodes.py:301(Output)
        1    0.000    0.000    0.000    0.000 nodes.py:310(Extends)
        1    0.000    0.000    0.000    0.000 nodes.py:317(For)
        1    0.000    0.000    0.000    0.000 nodes.py:335(If)
        1    0.000    0.000    0.000    0.000 nodes.py:345(Macro)
        1    0.000    0.000    0.000    0.000 nodes.py:358(CallBlock)
        1    0.000    0.000    0.000    0.000 nodes.py:370(FilterBlock)
        1    0.000    0.000    0.000    0.000 nodes.py:378(With)
        1    0.000    0.000    0.000    0.000 nodes.py:391(Block)
        1    0.000    0.000    0.000    0.000 nodes.py:405(Include)
        1    0.000    0.000    0.000    0.000 nodes.py:414(Import)
        1    0.000    0.000    0.001    0.001 nodes.py:423(FromImport)
        1    0.000    0.000    0.000    0.000 nodes.py:441(ExprStmt)
        1    0.000    0.000    0.000    0.000 nodes.py:448(Assign)
        1    0.000    0.000    0.000    0.000 nodes.py:456(AssignBlock)
        1    0.000    0.000    0.000    0.000 nodes.py:465(Expr)
        1    0.000    0.000    0.000    0.000 nodes.py:48(Impossible)
        1    0.000    0.000    0.000    0.000 nodes.py:488(BinExpr)
        1    0.000    0.000    0.000    0.000 nodes.py:513(UnaryExpr)
        1    0.000    0.000    0.000    0.000 nodes.py:52(NodeType)
        1    0.000    0.000    0.000    0.000 nodes.py:537(Name)
        1    0.000    0.000    0.000    0.000 nodes.py:554(NSRef)
        1    0.000    0.000    0.000    0.000 nodes.py:569(Literal)
       69    0.001    0.000    0.002    0.000 nodes.py:57(__new__)
        1    0.000    0.000    0.000    0.000 nodes.py:575(Const)
        1    0.000    0.000    0.000    0.000 nodes.py:606(TemplateData)
        1    0.000    0.000    0.000    0.000 nodes.py:621(Tuple)
        1    0.000    0.000    0.000    0.000 nodes.py:642(List)
        1    0.000    0.000    0.001    0.001 nodes.py:653(Dict)
        1    0.000    0.000    0.000    0.000 nodes.py:668(Pair)
        1    0.000    0.000    0.000    0.000 nodes.py:682(Keyword)
        1    0.000    0.000    0.000    0.000 nodes.py:69(EvalContext)
        1    0.000    0.000    0.000    0.000 nodes.py:694(CondExpr)
        1    0.000    0.000    0.000    0.000 nodes.py:737(_FilterTestCommon)
        1    0.000    0.000    0.000    0.000 nodes.py:785(Filter)
        1    0.000    0.000    0.000    0.000 nodes.py:802(Test)
        1    0.000    0.000    0.000    0.000 nodes.py:815(Call)
        1    0.000    0.000    0.000    0.000 nodes.py:831(Getitem)
        1    0.000    0.000    0.000    0.000 nodes.py:853(Getattr)
        1    0.000    0.000    0.000    0.000 nodes.py:875(Slice)
        1    0.000    0.000    0.000    0.000 nodes.py:896(Concat)
        1    0.000    0.000    0.000    0.000 nodes.py:909(Compare)
        1    0.000    0.000    0.000    0.000 nodes.py:937(Operand)
        1    0.000    0.000    0.000    0.000 nodes.py:945(Mul)
        1    0.000    0.000    0.000    0.000 nodes.py:951(Div)
        1    0.000    0.000    0.000    0.000 nodes.py:957(FloorDiv)
        1    0.000    0.000    0.000    0.000 nodes.py:965(Add)
        1    0.000    0.000    0.000    0.000 nodes.py:971(Sub)
        1    0.000    0.000    0.000    0.000 nodes.py:977(Mod)
        1    0.000    0.000    0.000    0.000 nodes.py:983(Pow)
        1    0.000    0.000    0.000    0.000 nodes.py:989(And)
        1    0.000    0.000    0.000    0.000 nodes.py:999(Or)
        1    0.000    0.000    0.002    0.002 ntpath.py:2(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:12(Number)
        1    0.000    0.000    0.000    0.000 numbers.py:147(Real)
        1    0.000    0.000    0.000    0.000 numbers.py:267(Rational)
        1    0.000    0.000    0.000    0.000 numbers.py:294(Integral)
        1    0.000    0.000    0.000    0.000 numbers.py:32(Complex)
        1    0.000    0.000    0.001    0.001 numbers.py:4(<module>)
        1    0.000    0.000    0.003    0.003 opcode.py:2(<module>)
        1    0.002    0.002    0.002    0.002 opcode.py:37(<listcomp>)
      122    0.000    0.000    0.000    0.000 opcode.py:39(def_op)
       11    0.000    0.000    0.000    0.000 opcode.py:43(name_op)
        7    0.000    0.000    0.000    0.000 opcode.py:47(jrel_op)
        5    0.000    0.000    0.000    0.000 opcode.py:51(jabs_op)
        1    0.000    0.000    0.000    0.000 optimizer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 optimizer.py:26(Optimizer)
        4    0.000    0.000    0.000    0.000 options.py:108(_get_characters)
       10    0.000    0.000    0.000    0.000 options.py:120(_get_number)
        2    0.000    0.000    0.000    0.000 options.py:130(_get_selection)
        6    0.000    0.000    0.000    0.000 options.py:145(_get_selection_list)
       12    0.000    0.000    0.000    0.000 options.py:168(_is_valid_selection)
        2    0.000    0.000    0.001    0.000 options.py:186(_mergeOpts)
        2    0.000    0.000    0.000    0.000 options.py:213(_normalizeOpts)
        1    0.000    0.000    0.000    0.000 options.py:25(<module>)
        1    0.000    0.000    0.002    0.002 options.py:26(<module>)
        1    0.000    0.000    0.000    0.000 options.py:30(Options)
        1    0.000    0.000    0.000    0.000 options.py:31(BeautifierOptions)
        2    0.000    0.000    0.001    0.000 options.py:31(__init__)
        2    0.000    0.000    0.001    0.000 options.py:32(__init__)
        6    0.000    0.000    0.000    0.000 options.py:88(_get_array)
       34    0.000    0.000    0.000    0.000 options.py:98(_get_boolean)
        3    0.000    0.000    0.000    0.000 os.py:1073(__subclasshook__)
        1    0.000    0.000    0.000    0.000 os.py:42(_get_exports_list)
        1    0.000    0.000    0.000    0.000 os.py:46(<listcomp>)
        1    0.000    0.000    0.000    0.000 os.py:613(get_exec_path)
       69    0.000    0.000    0.001    0.000 os.py:670(__getitem__)
        1    0.000    0.000    0.000    0.000 os.py:678(__setitem__)
       40    0.000    0.000    0.000    0.000 os.py:693(__iter__)
        1    0.000    0.000    0.001    0.001 os.py:707(copy)
       71    0.000    0.000    0.000    0.000 os.py:748(encode)
       82    0.000    0.000    0.000    0.000 os.py:752(decode)
      108    0.000    0.000    0.001    0.000 os.py:800(fsencode)
        1    0.000    0.000    0.000    0.000 output.py:154(IndentStringCache)
        1    0.000    0.000    0.000    0.000 output.py:205(Output)
        1    0.000    0.000    0.000    0.000 output.py:25(<module>)
        1    0.000    0.000    0.000    0.000 output.py:34(OutputLine)
        1    0.000    0.000    0.002    0.002 parse.py:1(<module>)
        1    0.000    0.000    0.000    0.000 parse.py:130(_ResultMixinStr)
        1    0.000    0.000    0.000    0.000 parse.py:138(_ResultMixinBytes)
        1    0.000    0.000    0.000    0.000 parse.py:146(_NetlocResultMixinBase)
        1    0.000    0.000    0.000    0.000 parse.py:183(_NetlocResultMixinStr)
        1    0.000    0.000    0.000    0.000 parse.py:213(_NetlocResultMixinBytes)
        1    0.000    0.000    0.000    0.000 parse.py:318(DefragResult)
        1    0.000    0.000    0.000    0.000 parse.py:326(SplitResult)
        1    0.000    0.000    0.000    0.000 parse.py:331(ParseResult)
        1    0.000    0.000    0.000    0.000 parse.py:337(DefragResultBytes)
        1    0.000    0.000    0.000    0.000 parse.py:345(SplitResultBytes)
        1    0.000    0.000    0.000    0.000 parse.py:350(ParseResultBytes)
        1    0.000    0.000    0.000    0.000 parse.py:356(_fix_result_transcoding)
        1    0.000    0.000    0.000    0.000 parse.py:790(Quoter)
        2    0.000    0.000    0.012    0.006 parser.py:1(<module>)
       15    0.000    0.000    0.000    0.000 parser.py:109(split_opt)
        1    0.000    0.000    0.000    0.000 parser.py:126(BytesHeaderParser)
        1    0.000    0.000    0.000    0.000 parser.py:159(Option)
        1    0.000    0.000    0.000    0.000 parser.py:16(Parser)
        1    0.000    0.000    0.000    0.000 parser.py:213(Argument)
        1    0.000    0.000    0.000    0.000 parser.py:245(ParsingState)
        1    0.000    0.000    0.003    0.003 parser.py:253(OptionParser)
        1    0.000    0.000    0.006    0.006 parser.py:46(Parser)
        1    0.000    0.000    0.009    0.009 parser.py:5(<module>)
        1    0.000    0.000    0.000    0.000 parser.py:71(HeaderParser)
        1    0.000    0.000    0.000    0.000 parser.py:79(BytesParser)
        1    0.000    0.000    0.007    0.007 pathlib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pathlib.py:1002(PurePosixPath)
        1    0.000    0.000    0.000    0.000 pathlib.py:1012(PureWindowsPath)
        1    0.000    0.000    0.000    0.000 pathlib.py:1025(Path)
        1    0.000    0.000    0.000    0.000 pathlib.py:120(_WindowsFlavour)
        1    0.000    0.000    0.000    0.000 pathlib.py:136(<setcomp>)
        1    0.000    0.000    0.000    0.000 pathlib.py:137(<setcomp>)
        1    0.000    0.000    0.000    0.000 pathlib.py:1562(PosixPath)
        1    0.000    0.000    0.000    0.000 pathlib.py:1569(WindowsPath)
        1    0.000    0.000    0.000    0.000 pathlib.py:285(_PosixFlavour)
        1    0.000    0.000    0.000    0.000 pathlib.py:394(_Accessor)
        1    0.000    0.000    0.000    0.000 pathlib.py:399(_NormalAccessor)
        1    0.000    0.000    0.000    0.000 pathlib.py:479(_Selector)
        1    0.000    0.000    0.000    0.000 pathlib.py:504(_TerminatingSelector)
        1    0.000    0.000    0.000    0.000 pathlib.py:510(_PreciseSelector)
        1    0.000    0.000    0.000    0.000 pathlib.py:526(_WildcardSelector)
        1    0.000    0.000    0.000    0.000 pathlib.py:557(_RecursiveWildcardSelector)
        1    0.000    0.000    0.000    0.000 pathlib.py:57(_Flavour)
        1    0.000    0.000    0.000    0.000 pathlib.py:601(_PathParents)
        2    0.000    0.000    0.000    0.000 pathlib.py:61(__init__)
        1    0.000    0.000    0.000    0.000 pathlib.py:629(PurePath)
        1    0.000    0.000    0.000    0.000 pattern.py:25(<module>)
        1    0.000    0.000    0.000    0.000 pattern.py:28(Pattern)
        1    0.000    0.000    0.005    0.005 pickle.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pickle.py:109(_Stop)
        1    0.000    0.000    0.000    0.000 pickle.py:1150(_Unpickler)
        2    0.000    0.000    0.000    0.000 pickle.py:1755(_dumps)
        1    0.000    0.000    0.002    0.002 pickle.py:209(<listcomp>)
        1    0.000    0.000    0.000    0.000 pickle.py:212(_Framer)
        2    0.000    0.000    0.000    0.000 pickle.py:217(__init__)
        2    0.000    0.000    0.000    0.000 pickle.py:224(end_framing)
        2    0.000    0.000    0.000    0.000 pickle.py:229(commit_frame)
        6    0.000    0.000    0.000    0.000 pickle.py:253(write)
        1    0.000    0.000    0.000    0.000 pickle.py:276(_Unframer)
        1    0.000    0.000    0.000    0.000 pickle.py:420(_Pickler)
        2    0.000    0.000    0.000    0.000 pickle.py:422(__init__)
        2    0.000    0.000    0.000    0.000 pickle.py:489(dump)
        2    0.000    0.000    0.000    0.000 pickle.py:548(save)
        2    0.000    0.000    0.000    0.000 pickle.py:618(persistent_id)
        2    0.000    0.000    0.000    0.000 pickle.py:764(save_long)
        1    0.000    0.000    0.000    0.000 pickle.py:85(PickleError)
        1    0.000    0.000    0.000    0.000 pickle.py:89(PicklingError)
        1    0.000    0.000    0.000    0.000 pickle.py:96(UnpicklingError)
        1    0.000    0.000    0.016    0.016 platform.py:3(<module>)
        1    0.000    0.000    0.010    0.010 platform.py:604(_syscmd_uname)
        2    0.000    0.000    0.010    0.005 platform.py:747(uname)
        2    0.000    0.000    0.010    0.005 platform.py:885(system)
        1    0.000    0.000    0.000    0.000 pointer.py:17(PointerType)
        2    0.000    0.000    0.000    0.000 pointer.py:176(POINTER)
        3    0.000    0.000    0.000    0.000 pointer.py:18(__new__)
        1    0.000    0.000    0.000    0.000 pointer.py:2(<module>)
        2    0.000    0.000    0.000    0.000 pointer.py:65(set_type)
        1    0.000    0.000    0.000    0.000 pointer.py:92(_Pointer)
        4    0.000    0.000    0.000    0.000 posixpath.py:117(splitext)
        4    0.000    0.000    0.000    0.000 posixpath.py:140(basename)
        6    0.000    0.000    0.000    0.000 posixpath.py:150(dirname)
        9    0.000    0.000    0.000    0.000 posixpath.py:164(islink)
       12    0.001    0.000    0.001    0.000 posixpath.py:334(normpath)
        4    0.000    0.000    0.000    0.000 posixpath.py:372(abspath)
        1    0.000    0.000    0.001    0.001 posixpath.py:387(realpath)
        1    0.000    0.000    0.001    0.001 posixpath.py:396(_joinrealpath)
       93    0.000    0.000    0.000    0.000 posixpath.py:41(_get_sep)
        3    0.000    0.000    0.000    0.000 posixpath.py:52(normcase)
        5    0.000    0.000    0.000    0.000 posixpath.py:60(isabs)
       78    0.001    0.000    0.001    0.000 posixpath.py:71(join)
        1    0.000    0.000    0.000    0.000 pprint.py:103(PrettyPrinter)
        1    0.000    0.000    0.000    0.000 pprint.py:11(<module>)
        1    0.000    0.000    0.000    0.000 pprint.py:77(_safe_key)
        1    0.000    0.000    0.005    0.005 primitive.py:1(<module>)
        1    0.000    0.000    0.000    0.000 primitive.py:14(NULL)
        1    0.000    0.000    0.000    0.000 primitive.py:157(SimpleType)
    30/19    0.001    0.000    0.001    0.000 primitive.py:158(__new__)
        5    0.000    0.000    0.000    0.000 primitive.py:231(_getvalue)
        5    0.000    0.000    0.000    0.000 primitive.py:384(_CData_output)
       38    0.000    0.000    0.000    0.000 primitive.py:390(_sizeofinstances)
       35    0.000    0.000    0.000    0.000 primitive.py:396(_is_pointer_like)
        1    0.000    0.000    0.000    0.000 primitive.py:402(_SimpleCData)
        1    0.000    0.000    0.000    0.000 primitive.py:48(GlobalPyobjContainer)
        1    0.000    0.000    0.000    0.000 primitive.py:49(__init__)
        1    0.001    0.001   35.076   35.076 server_trans.py:1(<module>)
        5    0.000    0.000    0.044    0.009 server_trans.py:22(read_json)
        1    0.000    0.000    0.000    0.000 quopri.py:3(<module>)
        1    0.000    0.000    0.000    0.000 quoprimime.py:5(<module>)
        1    0.000    0.000    0.000    0.000 quoprimime.py:55(<listcomp>)
        1    0.000    0.000    0.006    0.006 random.py:1(<module>)
        1    0.000    0.000    0.000    0.000 random.py:103(__init_subclass__)
        1    0.000    0.000    0.000    0.000 random.py:123(seed)
       20    0.000    0.000    0.001    0.000 random.py:257(_randbelow_with_getrandbits)
       20    0.001    0.000    0.003    0.000 random.py:292(choice)
        1    0.000    0.000    0.000    0.000 random.py:716(SystemRandom)
       22    0.001    0.000    0.001    0.000 random.py:728(getrandbits)
        1    0.000    0.000    0.000    0.000 random.py:736(seed)
        1    0.000    0.000    0.000    0.000 random.py:78(Random)
        2    0.000    0.000    0.000    0.000 random.py:94(__init__)
      112    0.000    0.000    0.003    0.000 re.py:188(match)
        8    0.000    0.000    0.001    0.000 re.py:243(finditer)
      208    0.000    0.000    0.627    0.003 re.py:250(compile)
       89    0.000    0.000    0.000    0.000 re.py:270(escape)
      328    0.011    0.000    0.630    0.002 re.py:289(_compile)
        1    0.000    0.000    0.000    0.000 re.py:315(_compile_repl)
        1    0.000    0.000    0.000    0.000 re.py:325(_subx)
       27    0.000    0.000    0.001    0.000 re.py:331(filter)
        1    0.000    0.000    0.005    0.005 repr.py:1(<module>)
        1    0.000    0.000    0.002    0.002 repr.py:120(DebugReprGenerator)
        1    0.000    0.000    0.000    0.000 repr.py:51(_Helper)
        5    0.000    0.000    0.000    0.000 repr.py:97(_sequence_repr_maker)
        2    0.000    0.000    0.000    0.000 reprlib.py:12(decorating_function)
        2    0.000    0.000    0.000    0.000 reprlib.py:9(recursive_repr)
        3    0.000    0.000    0.242    0.081 request.py:1(<module>)
        1    0.000    0.000    0.000    0.000 request.py:1056(HTTPBasicAuthHandler)
        1    0.000    0.000    0.000    0.000 request.py:1067(ProxyBasicAuthHandler)
        1    0.000    0.000    0.000    0.000 request.py:1086(AbstractDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 request.py:1232(HTTPDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 request.py:1250(ProxyDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 request.py:1262(AbstractHTTPHandler)
        1    0.000    0.000    0.000    0.000 request.py:1380(HTTPHandler)
        1    0.000    0.000    0.000    0.000 request.py:1389(HTTPSHandler)
        1    0.000    0.000    0.000    0.000 request.py:1404(HTTPCookieProcessor)
        1    0.000    0.000    0.000    0.000 request.py:1422(UnknownHandler)
        1    0.000    0.000    0.000    0.000 request.py:1480(FileHandler)
        1    0.000    0.000    0.000    0.000 request.py:1537(FTPHandler)
        1    0.000    0.000    0.000    0.000 request.py:1595(CacheFTPHandler)
        1    0.000    0.000    0.000    0.000 request.py:1648(DataHandler)
        1    0.000    0.000    0.000    0.000 request.py:1701(URLopener)
        1    0.000    0.000    0.000    0.000 request.py:2146(FancyURLopener)
        1    0.000    0.000    0.000    0.000 request.py:2399(ftpwrapper)
        1    0.000    0.000    0.002    0.002 request.py:30(Request)
        1    0.000    0.000    0.000    0.000 request.py:323(Request)
        1    0.000    0.000    0.002    0.002 request.py:39(Request)
        1    0.000    0.000    0.000    0.000 request.py:432(OpenerDirector)
        1    0.000    0.000    0.000    0.000 request.py:611(BaseHandler)
        1    0.000    0.000    0.000    0.000 request.py:615(StreamOnlyMixin)
        1    0.000    0.000    0.000    0.000 request.py:630(HTTPErrorProcessor)
        1    0.000    0.000    0.000    0.000 request.py:638(PlainRequest)
        1    0.000    0.000    0.000    0.000 request.py:647(HTTPDefaultErrorHandler)
        1    0.000    0.000    0.000    0.000 request.py:651(HTTPRedirectHandler)
        1    0.000    0.000    0.000    0.000 request.py:797(ProxyHandler)
        1    0.000    0.000    0.000    0.000 request.py:840(HTTPPasswordMgr)
        1    0.000    0.000    0.000    0.000 request.py:904(HTTPPasswordMgrWithDefaultRealm)
        1    0.000    0.000    0.000    0.000 request.py:914(HTTPPasswordMgrWithPriorAuth)
        1    0.000    0.000    0.002    0.002 request.py:945(AbstractBasicAuthHandler)
        3    0.000    0.000    0.020    0.007 response.py:1(<module>)
        1    0.000    0.000    0.000    0.000 response.py:14(addbase)
        3    0.000    0.000    0.001    0.000 response.py:37(_set_property)
        1    0.000    0.000    0.000    0.000 response.py:37(addclosehook)
        1    0.000    0.000    0.000    0.000 response.py:57(addinfo)
        1    0.000    0.000    0.006    0.006 response.py:63(Response)
        1    0.000    0.000    0.003    0.003 response.py:66(Response)
        1    0.000    0.000    0.000    0.000 response.py:68(addinfourl)
        1    0.000    0.000    0.000    0.000 response.py:836(ResponseStream)
        1    0.000    0.000    0.000    0.000 response.py:881(ResponseStreamMixin)
        1    0.000    0.000    0.000    0.000 results.py:11(_ParseResultsWithOffset)
       82    0.001    0.000    0.001    0.000 results.py:136(__new__)
        4    0.000    0.000    0.000    0.000 results.py:14(__init__)
    82/80    0.000    0.000    0.000    0.000 results.py:159(__init__)
       16    0.000    0.000    0.000    0.000 results.py:17(__getitem__)
       24    0.000    0.000    0.000    0.000 results.py:191(__getitem__)
        1    0.000    0.000    0.001    0.001 results.py:2(<module>)
        4    0.000    0.000    0.000    0.000 results.py:200(__setitem__)
       18    0.000    0.000    0.000    0.000 results.py:244(__bool__)
        2    0.000    0.000    0.000    0.000 results.py:247(__iter__)
        6    0.000    0.000    0.000    0.000 results.py:262(haskeys)
        1    0.000    0.000    0.000    0.000 results.py:27(ParseResults)
        2    0.000    0.000    0.000    0.000 results.py:418(__getattr__)
       12    0.000    0.000    0.000    0.000 results.py:431(__iadd__)
        2    0.000    0.000    0.000    0.000 results.py:434(<lambda>)
        2    0.000    0.000    0.000    0.000 results.py:436(<listcomp>)
        1    0.000    0.000    0.000    0.000 results.py:85(List)
        1    0.000    0.000    0.058    0.058 routing.py:1(<module>)
       36    0.000    0.000    0.003    0.000 routing.py:1004(_parts)
       36    0.000    0.000    0.002    0.000 routing.py:1005(<listcomp>)
       36    0.000    0.000    0.000    0.000 routing.py:1027(_join)
       18    0.000    0.000    0.000    0.000 routing.py:1036(<listcomp>)
       18    0.000    0.000    0.000    0.000 routing.py:1041(<listcomp>)
        1    0.000    0.000    0.000    0.000 routing.py:1189(BaseConverter)
        2    0.000    0.000    0.000    0.000 routing.py:1195(__init__)
        1    0.000    0.000    0.000    0.000 routing.py:1207(UnicodeConverter)
        1    0.000    0.000    0.000    0.000 routing.py:1244(AnyConverter)
        1    0.000    0.000    0.000    0.000 routing.py:1260(PathConverter)
        1    0.000    0.000    0.000    0.000 routing.py:1274(NumberConverter)
        1    0.000    0.000    0.000    0.000 routing.py:1320(IntegerConverter)
        1    0.000    0.000    0.000    0.000 routing.py:1345(FloatConverter)
        1    0.000    0.000    0.000    0.000 routing.py:1377(UUIDConverter)
        1    0.000    0.000    0.007    0.007 routing.py:1411(Map)
        1    0.000    0.000    0.000    0.000 routing.py:1464(__init__)
        9    0.000    0.000    0.040    0.004 routing.py:1533(add)
        1    0.000    0.000    0.005    0.005 routing.py:1741(MapAdapter)
       28    0.000    0.000    0.000    0.000 routing.py:214(parse_rule)
        1    0.000    0.000    0.000    0.000 routing.py:246(RoutingException)
        1    0.000    0.000    0.001    0.001 routing.py:254(RequestRedirect)
        1    0.000    0.000    0.000    0.000 routing.py:275(RequestPath)
        1    0.000    0.000    0.000    0.000 routing.py:285(RequestAliasRedirect)
        1    0.000    0.000    0.001    0.001 routing.py:293(BuildError)
        1    0.000    0.000    0.000    0.000 routing.py:363(WebsocketMismatch)
        1    0.000    0.000    0.000    0.000 routing.py:369(ValidationError)
        1    0.000    0.000    0.000    0.000 routing.py:375(RuleFactory)
        1    0.000    0.000    0.000    0.000 routing.py:387(Subdomain)
        1    0.000    0.000    0.000    0.000 routing.py:418(Submount)
        1    0.000    0.000    0.000    0.000 routing.py:444(EndpointPrefix)
        1    0.000    0.000    0.000    0.000 routing.py:469(RuleTemplate)
        1    0.000    0.000    0.000    0.000 routing.py:495(RuleTemplateFactory)
       25    0.001    0.000    0.006    0.000 routing.py:534(_prefix_names)
        1    0.000    0.000    0.003    0.003 routing.py:557(Rule)
        9    0.000    0.000    0.000    0.000 routing.py:681(__init__)
        9    0.000    0.000    0.000    0.000 routing.py:715(<setcomp>)
       18    0.000    0.000    0.000    0.000 routing.py:773(get_rules)
        9    0.000    0.000    0.040    0.004 routing.py:784(bind)
        2    0.000    0.000    0.000    0.000 routing.py:801(get_converter)
        9    0.000    0.000    0.040    0.004 routing.py:824(compile)
       18    0.000    0.000    0.001    0.000 routing.py:839(_build_regex)
       18    0.000    0.000    0.000    0.000 routing.py:967(_get_func_code)
       18    0.004    0.000    0.032    0.002 routing.py:974(_compile_builder)
        4    0.000    0.000    0.001    0.000 routing.py:999(_convert)
        1    0.000    0.000    0.012    0.012 runtime.py:1(<module>)
        1    0.000    0.000    0.000    0.000 runtime.py:1012(ChainableUndefined)
        1    0.000    0.000    0.000    0.000 runtime.py:1039(DebugUndefined)
        1    0.000    0.000    0.000    0.000 runtime.py:1071(StrictUndefined)
        1    0.000    0.000    0.000    0.000 runtime.py:133(TemplateReference)
        3    0.000    0.000    0.000    0.000 runtime.py:147(_dict_method_all)
        1    0.000    0.000    0.002    0.002 runtime.py:155(Context)
        1    0.000    0.000    0.000    0.000 runtime.py:390(BlockReference)
        1    0.000    0.000    0.001    0.001 runtime.py:438(LoopContext)
        1    0.000    0.000    0.003    0.003 runtime.py:635(AsyncLoopContext)
        1    0.000    0.000    0.000    0.000 runtime.py:706(Macro)
        1    0.000    0.000    0.000    0.000 runtime.py:840(Undefined)
        1    0.000    0.000    0.014    0.014 scaffold.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scaffold.py:249(static_folder)
        1    0.000    0.000    0.000    0.000 scaffold.py:259(static_folder)
        1    0.000    0.000    0.000    0.000 scaffold.py:266(has_static_folder)
        1    0.000    0.000    0.000    0.000 scaffold.py:274(static_url_path)
        1    0.000    0.000    0.000    0.000 scaffold.py:290(static_url_path)
       20    0.014    0.001    0.014    0.001 scaffold.py:40(setupmethod)
        8    0.000    0.000    0.000    0.000 scaffold.py:413(route)
        8    0.000    0.000    0.033    0.004 scaffold.py:437(decorator)
        9    0.000    0.000    0.041    0.005 scaffold.py:45(wrapper_func)
        1    0.000    0.000    0.007    0.007 scaffold.py:62(Scaffold)
        8    0.000    0.000    0.000    0.000 scaffold.py:751(_endpoint_from_view_func)
        1    0.000    0.000    0.000    0.000 scaffold.py:784(_find_package_path)
        1    0.000    0.000    0.000    0.000 scaffold.py:836(find_package)
        1    0.000    0.000    0.000    0.000 scaffold.py:92(__init__)
        1    0.000    0.000    0.004    0.004 scanner.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scanner.py:15(py_make_scanner)
        1    0.000    0.000    0.000    0.000 secrets.py:1(<module>)
        1    0.000    0.000    0.006    0.006 security.py:1(<module>)
        1    0.000    0.000    0.003    0.003 security.py:131(gen_salt)
       21    0.000    0.000    0.003    0.000 security.py:136(<genexpr>)
        1    0.000    0.000    0.000    0.000 security.py:16(<genexpr>)
        1    0.000    0.000    0.003    0.003 selectors.py:1(<module>)
        1    0.000    0.000    0.000    0.000 selectors.py:206(_BaseSelectorImpl)
        1    0.000    0.000    0.000    0.000 selectors.py:290(SelectSelector)
        1    0.000    0.000    0.000    0.000 selectors.py:341(_PollLikeSelector)
        1    0.000    0.000    0.000    0.000 selectors.py:433(PollSelector)
        1    0.000    0.000    0.000    0.000 selectors.py:442(EpollSelector)
        1    0.000    0.000    0.000    0.000 selectors.py:60(_SelectorMapping)
        1    0.000    0.000    0.000    0.000 selectors.py:80(BaseSelector)
        1    0.000    0.000    0.010    0.010 serializer.py:1(<module>)
        1    0.000    0.000    0.001    0.001 serializer.py:25(Serializer)
        1    0.000    0.000    0.145    0.145 server.py:1(<module>)
        1    0.000    0.000    0.000    0.000 server.py:132(HTTPServer)
        1    0.000    0.000    0.000    0.000 server.py:144(ThreadingHTTPServer)
        1    0.000    0.000    0.000    0.000 server.py:148(BaseHTTPRequestHandler)
        1    0.000    0.000    0.000    0.000 server.py:622(<dictcomp>)
        1    0.000    0.000    0.010    0.010 server.py:628(SimpleHTTPRequestHandler)
        1    0.000    0.000    0.000    0.000 server.py:963(CGIHTTPRequestHandler)
        1    0.000    0.000    0.282    0.282 serving.py:1(<module>)
        1    0.000    0.000    0.000    0.000 serving.py:148(WSGIRequestHandler)
        1    0.000    0.000    0.000    0.000 serving.py:608(select_address_family)
        1    0.000    0.000    0.007    0.007 serving.py:618(get_sockaddr)
        1    0.000    0.000    0.001    0.001 serving.py:652(BaseWSGIServer)
        1    0.000    0.000    0.000    0.000 serving.py:732(ThreadedWSGIServer)
        1    0.000    0.000    0.000    0.000 serving.py:740(ForkingWSGIServer)
        1    0.000    0.000    0.000    0.000 serving.py:802(is_running_from_reloader)
        1    0.000    0.000   30.847   30.847 serving.py:811(run_simple)
        1    0.000    0.000    0.000    0.000 serving.py:86(DechunkedInput)
        1    0.000    0.000    0.001    0.001 serving.py:915(log_startup)
        1    0.000    0.000    0.045    0.045 sessions.py:1(<module>)
        1    0.000    0.000    0.001    0.001 sessions.py:107(SessionInterface)
        1    0.000    0.000    0.000    0.000 sessions.py:20(SessionMixin)
        1    0.000    0.000    0.015    0.015 sessions.py:316(SecureCookieSessionInterface)
        1    0.000    0.000    0.000    0.000 sessions.py:48(SecureCookieSession)
        1    0.000    0.000    0.000    0.000 sessions.py:90(NullSession)
        1    0.000    0.000    0.011    0.011 shutil.py:1(<module>)
        1    0.000    0.000    0.000    0.000 shutil.py:69(Error)
        1    0.000    0.000    0.000    0.000 shutil.py:72(SameFileError)
        1    0.000    0.000    0.000    0.000 shutil.py:75(SpecialFileError)
        1    0.000    0.000    0.000    0.000 shutil.py:79(ExecError)
        1    0.000    0.000    0.000    0.000 shutil.py:82(ReadError)
        1    0.000    0.000    0.000    0.000 shutil.py:85(RegistryError)
        1    0.000    0.000    0.000    0.000 shutil.py:89(_GiveupOnFastCopy)
        1    0.000    0.000    0.005    0.005 signal.py:1(<module>)
       73    0.000    0.000    0.000    0.000 signal.py:10(<lambda>)
       74    0.000    0.000    0.000    0.000 signal.py:17(<lambda>)
       75    0.000    0.000    0.000    0.000 signal.py:22(<lambda>)
        1    0.000    0.000    0.000    0.000 signal.py:25(_int_to_enum)
        2    0.000    0.000    0.000    0.000 signal.py:35(_enum_to_int)
        1    0.000    0.000    0.000    0.000 signal.py:45(signal)
        1    0.000    0.000    0.001    0.001 signals.py:1(<module>)
        1    0.000    0.000    0.000    0.000 signals.py:10(Namespace)
       10    0.000    0.000    0.000    0.000 signals.py:11(signal)
        1    0.000    0.000    0.000    0.000 signals.py:14(_FakeSignal)
       10    0.000    0.000    0.000    0.000 signals.py:21(__init__)
        1    0.000    0.000    0.003    0.003 signer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 signer.py:16(SigningAlgorithm)
        1    0.000    0.000    0.000    0.000 signer.py:32(NoneAlgorithm)
        1    0.000    0.000    0.000    0.000 signer.py:41(HMACAlgorithm)
        3    0.000    0.000    0.000    0.000 signer.py:49(__init__)
        1    0.000    0.000    0.000    0.000 signer.py:67(Signer)
        1    0.000    0.000    0.000    0.000 single_path_functions.py:109(SinglePathFunction)
        1    0.000    0.000    0.000    0.000 single_path_functions.py:24(<module>)
        1    0.000    0.000    0.000    0.000 single_path_functions.py:677(UseOnlySPFA)
        1    0.000    0.000    0.000    0.000 socket.py:210(_GiveupOnSendfile)
        1    0.000    0.000    0.000    0.000 socket.py:213(socket)
        1    0.000    0.000    0.000    0.000 socket.py:219(__init__)
        1    0.001    0.001    0.011    0.011 socket.py:4(<module>)
        1    0.000    0.000    0.000    0.000 socket.py:512(family)
        1    0.000    0.000    0.000    0.000 socket.py:532(set_inheritable)
        1    0.000    0.000    0.000    0.000 socket.py:626(SocketIO)
      264    0.000    0.000    0.000    0.000 socket.py:76(<lambda>)
      265    0.000    0.000    0.000    0.000 socket.py:81(<lambda>)
      266    0.000    0.000    0.000    0.000 socket.py:86(<lambda>)
        1    0.000    0.000    0.006    0.006 socket.py:901(getaddrinfo)
      267    0.000    0.000    0.000    0.000 socket.py:91(<lambda>)
        3    0.000    0.000    0.000    0.000 socket.py:97(_intenum_converter)
        1    0.000    0.000    0.011    0.011 socketserver.py:1(<module>)
        1    0.000    0.000    0.000    0.000 socketserver.py:153(BaseServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:390(TCPServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:516(UDPServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:543(ForkingMixIn)
        1    0.000    0.000    0.000    0.000 socketserver.py:631(_Threads)
        1    0.000    0.000    0.000    0.000 socketserver.py:653(_NoThreads)
        1    0.000    0.000    0.000    0.000 socketserver.py:664(ThreadingMixIn)
        1    0.000    0.000    0.000    0.000 socketserver.py:705(ForkingUDPServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:706(ForkingTCPServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:708(ThreadingUDPServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:709(ThreadingTCPServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:713(UnixStreamServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:716(UnixDatagramServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:719(ThreadingUnixStreamServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:721(ThreadingUnixDatagramServer)
        1    0.000    0.000    0.000    0.000 socketserver.py:723(BaseRequestHandler)
        1    0.000    0.000    0.000    0.000 socketserver.py:769(StreamRequestHandler)
        1    0.000    0.000    0.000    0.000 socketserver.py:814(_SocketWriter)
        1    0.000    0.000    0.000    0.000 socketserver.py:833(DatagramRequestHandler)
        1    0.000    0.000    0.001    0.001 spawn.py:1(<module>)
      611    0.004    0.000    0.005    0.000 sre_compile.py:249(_compile_charset)
      611    0.046    0.000    0.064    0.000 sre_compile.py:276(_optimize_charset)
      141    0.002    0.000    0.011    0.000 sre_compile.py:411(_mk_bitmap)
      141    0.008    0.000    0.008    0.000 sre_compile.py:413(<listcomp>)
       56    0.001    0.000    0.002    0.000 sre_compile.py:416(_bytes_to_codes)
      631    0.002    0.000    0.005    0.000 sre_compile.py:423(_simple)
       41    0.000    0.000    0.000    0.000 sre_compile.py:432(_generate_overlap_table)
      382    0.000    0.000    0.000    0.000 sre_compile.py:453(_get_iscased)
  231/192    0.001    0.000    0.002    0.000 sre_compile.py:461(_get_literal_prefix)
      151    0.001    0.000    0.001    0.000 sre_compile.py:492(_get_charset_prefix)
      204    0.003    0.000    0.027    0.000 sre_compile.py:536(_compile_info)
      408    0.001    0.000    0.001    0.000 sre_compile.py:595(isstring)
      204    0.001    0.000    0.231    0.001 sre_compile.py:598(_code)
      321    0.000    0.000    0.000    0.000 sre_compile.py:65(_combine_flags)
 3584/204    0.107    0.000    0.202    0.001 sre_compile.py:71(_compile)
      204    0.009    0.000    0.613    0.003 sre_compile.py:759(compile)
        2    0.000    0.000    0.000    0.000 sre_parse.py:101(checklookbehindgroup)
       27    0.000    0.000    0.000    0.000 sre_parse.py:1054(expand_template)
     3717    0.008    0.000    0.008    0.000 sre_parse.py:111(__init__)
     5431    0.004    0.000    0.007    0.000 sre_parse.py:160(__len__)
       22    0.000    0.000    0.000    0.000 sre_parse.py:162(__delitem__)
    40056    0.030    0.000    0.035    0.000 sre_parse.py:164(__getitem__)
      699    0.001    0.000    0.002    0.000 sre_parse.py:168(__setitem__)
    16686    0.009    0.000    0.015    0.000 sre_parse.py:172(append)
 3811/460    0.049    0.000    0.055    0.000 sre_parse.py:174(getwidth)
      205    0.002    0.000    0.003    0.000 sre_parse.py:224(__init__)
    27797    0.028    0.000    0.028    0.000 sre_parse.py:233(__next)
     6179    0.033    0.000    0.041    0.000 sre_parse.py:249(match)
    23484    0.014    0.000    0.032    0.000 sre_parse.py:254(get)
       19    0.000    0.000    0.000    0.000 sre_parse.py:258(getwhile)
       59    0.002    0.000    0.003    0.000 sre_parse.py:267(getuntil)
     1968    0.005    0.000    0.007    0.000 sre_parse.py:286(tell)
        7    0.000    0.000    0.000    0.000 sre_parse.py:288(seek)
      213    0.001    0.000    0.002    0.000 sre_parse.py:295(_class_escape)
      484    0.002    0.000    0.004    0.000 sre_parse.py:355(_escape)
      341    0.004    0.000    0.006    0.000 sre_parse.py:432(_uniq)
  598/204    0.014    0.000    0.364    0.002 sre_parse.py:435(_parse_sub)
 2982/271    0.160    0.000    0.360    0.001 sre_parse.py:493(_parse)
      204    0.001    0.000    0.001    0.000 sre_parse.py:76(__init__)
      921    0.001    0.000    0.001    0.000 sre_parse.py:81(groups)
      253    0.001    0.000    0.002    0.000 sre_parse.py:84(opengroup)
        2    0.000    0.000    0.000    0.000 sre_parse.py:861(_parse_flags)
      204    0.001    0.000    0.001    0.000 sre_parse.py:921(fix_flags)
      204    0.003    0.000    0.372    0.002 sre_parse.py:937(parse)
      253    0.000    0.000    0.039    0.000 sre_parse.py:96(closegroup)
        1    0.000    0.000    0.000    0.000 sre_parse.py:969(parse_template)
        1    0.000    0.000    0.000    0.000 sre_parse.py:978(addgroup)
        2    0.000    0.000    0.000    0.000 sre_parse.py:98(checkgroup)
      183    0.000    0.000    0.000    0.000 ssl.py:124(<lambda>)
      183    0.000    0.000    0.000    0.000 ssl.py:129(<lambda>)
      183    0.000    0.000    0.000    0.000 ssl.py:134(<lambda>)
      183    0.000    0.000    0.000    0.000 ssl.py:139(<lambda>)
      183    0.000    0.000    0.000    0.000 ssl.py:144(<lambda>)
      183    0.000    0.000    0.000    0.000 ssl.py:149(<lambda>)
        1    0.000    0.000    0.000    0.000 ssl.py:153(<dictcomp>)
        1    0.000    0.000    0.000    0.000 ssl.py:158(TLSVersion)
        1    0.000    0.000    0.000    0.000 ssl.py:168(_TLSContentType)
        1    0.000    0.000    0.000    0.000 ssl.py:182(_TLSAlertType)
        1    0.000    0.000    0.000    0.000 ssl.py:223(_TLSMessageType)
        1    0.000    0.000    0.055    0.055 ssl.py:4(<module>)
        1    0.000    0.000    0.000    0.000 ssl.py:446(_ASN1Object)
        4    0.000    0.000    0.000    0.000 ssl.py:451(__new__)
        1    0.000    0.000    0.000    0.000 ssl.py:467(Purpose)
        1    0.000    0.000    0.000    0.000 ssl.py:474(SSLContext)
        1    0.000    0.000    0.000    0.000 ssl.py:812(SSLObject)
       15    0.000    0.000    0.000    0.000 ssl.py:965(_sslcopydoc)
        1    0.000    0.000    0.000    0.000 ssl.py:971(SSLSocket)
       11    0.000    0.000    0.000    0.000 stat.py:27(S_IFMT)
        2    0.000    0.000    0.000    0.000 stat.py:62(S_ISREG)
        9    0.000    0.000    0.000    0.000 stat.py:70(S_ISLNK)
        1    0.000    0.000    0.003    0.003 string.py:1(<module>)
        1    0.000    0.000    0.000    0.000 string.py:161(Formatter)
        1    0.000    0.000    0.000    0.000 string.py:57(_TemplateMetaclass)
        1    0.000    0.000    0.002    0.002 string.py:67(__init__)
        1    0.000    0.000    0.000    0.000 string.py:80(Template)
        1    0.000    0.000    0.000    0.000 stringprep.py:2(<module>)
        1    0.000    0.000    0.000    0.000 struct.py:1(<module>)
        1    0.000    0.000    0.000    0.000 structure.py:1(<module>)
        1    0.000    0.000    0.000    0.000 structure.py:10(names_and_fields)
        1    0.000    0.000    0.000    0.000 structure.py:154(_set_shape)
      6/1    0.000    0.000    0.000    0.000 structure.py:161(struct_setattr)
        1    0.000    0.000    0.000    0.000 structure.py:165(<listcomp>)
        1    0.000    0.000    0.000    0.000 structure.py:180(StructOrUnionMeta)
        4    0.000    0.000    0.000    0.000 structure.py:181(__new__)
        3    0.000    0.000    0.000    0.000 structure.py:208(_make_final)
        1    0.000    0.000    0.000    0.000 structure.py:280(StructOrUnion)
        1    0.000    0.000    0.000    0.000 structure.py:335(StructureMeta)
        1    0.000    0.000    0.000    0.000 structure.py:339(Structure)
        1    0.000    0.000    0.000    0.000 structure.py:35(<listcomp>)
        1    0.000    0.000    0.000    0.000 structure.py:96(Field)
        1    0.000    0.000    0.002    0.002 subprocess.py:10(<module>)
        1    0.000    0.000    0.000    0.000 subprocess.py:1067(poll)
        3    0.000    0.000    0.000    0.000 subprocess.py:1073(_remaining_time)
        3    0.000    0.000   30.795   10.265 subprocess.py:1093(wait)
        2    0.000    0.000    0.000    0.000 subprocess.py:1116(_close_pipe_fds)
        1    0.000    0.000    0.000    0.000 subprocess.py:136(TimeoutExpired)
        2    0.000    0.000    0.000    0.000 subprocess.py:1487(_get_handles)
        2    0.001    0.000    0.011    0.006 subprocess.py:1580(_execute_child)
       27    0.000    0.000    0.000    0.000 subprocess.py:1663(<genexpr>)
        2    0.000    0.000    0.000    0.000 subprocess.py:1736(_handle_exitstatus)
        2    0.000    0.000    0.000    0.000 subprocess.py:1754(_internal_poll)
        6    0.000    0.000   30.780    5.130 subprocess.py:1789(_try_wait)
        4    0.000    0.000   30.795    7.699 subprocess.py:1802(_wait)
        1    0.000    0.000    0.000    0.000 subprocess.py:1957(send_signal)
        1    0.000    0.000    0.000    0.000 subprocess.py:1968(kill)
        2    0.000    0.000    0.000    0.000 subprocess.py:241(_cleanup)
        1    0.000    0.000   30.803   30.803 subprocess.py:332(call)
        1    0.000    0.000    0.005    0.005 subprocess.py:368(check_output)
        1    0.000    0.000    0.000    0.000 subprocess.py:419(CompletedProcess)
        1    0.000    0.000    0.000    0.000 subprocess.py:430(__init__)
        1    0.000    0.000    0.005    0.005 subprocess.py:452(run)
        1    0.000    0.000    0.000    0.000 subprocess.py:638(_use_posix_spawn)
        1    0.000    0.000    0.000    0.000 subprocess.py:688(Popen)
        2    0.000    0.000    0.012    0.006 subprocess.py:736(__init__)
        2    0.000    0.000    0.000    0.000 subprocess.py:923(__enter__)
        2    0.000    0.000    0.000    0.000 subprocess.py:926(__exit__)
        1    0.000    0.000    0.000    0.000 subprocess.py:954(__del__)
        1    0.000    0.000    0.000    0.000 subprocess.py:96(SubprocessError)
        1    0.000    0.000    0.000    0.000 subprocess.py:969(_get_devnull)
        1    0.000    0.000    0.000    0.000 subprocess.py:99(CalledProcessError)
        1    0.000    0.000    0.001    0.001 subprocess.py:999(communicate)
        2    0.000    0.000    0.005    0.003 sysconfig.py:1(<module>)
        1    0.000    0.000    0.001    0.001 sysconfig.py:111(_safe_realpath)
        1    0.000    0.000    0.000    0.000 sysconfig.py:132(_is_python_source_dir)
        1    0.000    0.000    0.000    0.000 sysconfig.py:149(is_python_build)
        2    0.000    0.000    0.000    0.000 sysconfig.py:192(_get_default_scheme)
        1    0.000    0.000    0.003    0.003 sysconfig_pypy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sysconfig_pypy.py:59(_python_build)
        1    0.000    0.000    0.002    0.002 tag.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tag.py:116(PassDict)
        1    0.000    0.000    0.000    0.000 tag.py:130(TagTuple)
        1    0.000    0.000    0.000    0.000 tag.py:144(PassList)
        1    0.000    0.000    0.000    0.000 tag.py:156(TagBytes)
        1    0.000    0.000    0.000    0.000 tag.py:170(TagMarkup)
        1    0.000    0.000    0.000    0.000 tag.py:188(TagUUID)
        1    0.000    0.000    0.000    0.000 tag.py:202(TagDateTime)
        1    0.000    0.000    0.001    0.001 tag.py:216(TaggedJSONSerializer)
        1    0.000    0.000    0.000    0.000 tag.py:246(__init__)
        8    0.000    0.000    0.000    0.000 tag.py:253(register)
        1    0.000    0.000    0.000    0.000 tag.py:57(JSONTag)
        8    0.000    0.000    0.000    0.000 tag.py:66(__init__)
        1    0.000    0.000    0.000    0.000 tag.py:90(TagDict)
        1    0.000    0.000    0.010    0.010 tbtools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tbtools.py:186(Line)
        1    0.000    0.000    0.001    0.001 tbtools.py:214(Traceback)
        1    0.000    0.000    0.000    0.000 tbtools.py:330(Group)
        1    0.000    0.000    0.002    0.002 tbtools.py:423(Frame)
        1    0.000    0.000    0.000    0.000 tempfile.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tempfile.py:123(_RandomNameSequence)
        1    0.000    0.000    0.000    0.000 tempfile.py:406(_TemporaryFileCloser)
        1    0.000    0.000    0.000    0.000 tempfile.py:449(_TemporaryFileWrapper)
        1    0.000    0.000    0.000    0.000 tempfile.py:622(SpooledTemporaryFile)
        1    0.000    0.000    0.000    0.000 tempfile.py:767(TemporaryDirectory)
        1    0.000    0.000    0.000    0.000 templatablepattern.py:25(<module>)
        1    0.000    0.000    0.000    0.000 templatablepattern.py:31(TemplateNames)
        1    0.000    0.000    0.000    0.000 templatablepattern.py:40(TemplatePatterns)
        1    0.000    0.000    0.000    0.000 templatablepattern.py:59(TemplatablePattern)
        1    0.000    0.000    0.004    0.004 templating.py:1(<module>)
        1    0.000    0.000    0.000    0.000 templating.py:33(Environment)
        1    0.000    0.000    0.002    0.002 templating.py:46(DispatchingJinjaLoader)
        1    0.000    0.000    0.049    0.049 termui.py:1(<module>)
        1    0.000    0.000    0.000    0.000 termui.py:474(_interpret_color)
        2    0.000    0.000    0.000    0.000 termui.py:487(style)
        2    0.000    0.000    0.000    0.000 termui.py:628(secho)
        1    0.000    0.000    0.360    0.360 test.py:1(<module>)
        1    0.000    0.000    0.010    0.010 test.py:1265(TestResponse)
        1    0.000    0.000    0.000    0.000 test.py:154(_TestCookieHeaders)
        1    0.000    0.000    0.000    0.000 test.py:179(_TestCookieResponse)
        1    0.000    0.000    0.000    0.000 test.py:191(_TestCookieJar)
        1    0.000    0.000    0.023    0.023 test.py:240(EnvironBuilder)
        1    0.000    0.000    0.000    0.000 test.py:825(ClientRedirectError)
        1    0.000    0.000    0.000    0.000 test.py:831(Client)
        1    0.000    0.000    0.000    0.000 testing.py:124(TestParseResultsAsserts)
        1    0.000    0.000    0.000    0.000 testing.py:15(pyparsing_test)
        1    0.000    0.000    0.000    0.000 testing.py:20(reset_pyparsing_context)
        1    0.000    0.000    0.001    0.001 testing.py:3(<module>)
        1    0.000    0.000    0.000    0.000 tests.py:1(<module>)
        1    0.000    0.000    0.008    0.008 threading.py:1(<module>)
        2    0.000    0.000    0.000    0.000 threading.py:1031(name)
        1    0.000    0.000    0.000    0.000 threading.py:1095(daemon)
        1    0.000    0.000    0.000    0.000 threading.py:1177(_make_invoke_excepthook)
        1    0.000    0.000    0.000    0.000 threading.py:1230(Timer)
        1    0.000    0.000    0.000    0.000 threading.py:1260(_MainThread)
        1    0.000    0.000    0.000    0.000 threading.py:1262(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:1281(_DummyThread)
        2    0.000    0.000    0.000    0.000 threading.py:1306(current_thread)
        1    0.000    0.000    0.000    0.000 threading.py:210(Condition)
        1    0.000    0.000    0.000    0.000 threading.py:222(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:246(__enter__)
        1    0.000    0.000    0.000    0.000 threading.py:249(__exit__)
        1    0.000    0.000    0.000    0.000 threading.py:261(_is_owned)
        1    0.000    0.000    0.000    0.000 threading.py:341(notify)
        1    0.000    0.000    0.000    0.000 threading.py:364(notify_all)
        1    0.000    0.000    0.000    0.000 threading.py:376(Semaphore)
        1    0.000    0.000    0.000    0.000 threading.py:456(BoundedSemaphore)
        1    0.000    0.000    0.000    0.000 threading.py:494(Event)
        1    0.000    0.000    0.000    0.000 threading.py:505(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:519(set)
        1    0.000    0.000    0.000    0.000 threading.py:573(Barrier)
        1    0.000    0.000    0.000    0.000 threading.py:727(BrokenBarrierError)
        1    0.000    0.000    0.000    0.000 threading.py:750(Thread)
        1    0.000    0.000    0.000    0.000 threading.py:761(__init__)
       10    0.000    0.000    0.000    0.000 threading.py:81(RLock)
        1    0.000    0.000    0.000    0.000 threading.py:896(_set_ident)
        1    0.000    0.000    0.000    0.000 threading.py:903(_set_tstate_lock)
        1    0.000    0.000    0.000    0.000 threading.py:94(_RLock)
        1    0.000    0.000    0.002    0.002 timed.py:1(<module>)
        1    0.000    0.000    0.000    0.000 timed.py:169(TimedSerializer)
        1    0.000    0.000    0.001    0.001 timed.py:26(TimestampSigner)
        1    0.000    0.000    0.000    0.000 timeit.py:3(<module>)
        1    0.000    0.000    0.000    0.000 timeit.py:85(Timer)
        1    0.000    0.000    0.000    0.000 token.py:26(<module>)
        1    0.000    0.000    0.000    0.000 token.py:26(Token)
        1    0.001    0.001    0.003    0.003 tokenize.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tokenize.py:157(TokenError)
        1    0.000    0.000    0.000    0.000 tokenize.py:159(StopTokenizing)
        1    0.000    0.000    0.000    0.000 tokenize.py:162(Untokenizer)
        2    0.000    0.000    0.000    0.000 tokenize.py:295(detect_encoding)
        3    0.000    0.000    0.000    0.000 tokenize.py:319(read_or_stop)
        3    0.000    0.000    0.000    0.000 tokenize.py:325(find_cookie)
        2    0.000    0.000    0.000    0.000 tokenize.py:388(open)
        1    0.000    0.000    0.000    0.000 tokenize.py:45(TokenInfo)
       19    0.000    0.000    0.000    0.000 tokenize.py:58(group)
        1    0.000    0.000    0.000    0.000 tokenize.py:59(any)
        2    0.000    0.000    0.000    0.000 tokenize.py:60(maybe)
        3    0.000    0.000    0.000    0.000 tokenize.py:83(_all_string_prefixes)
       24    0.000    0.000    0.000    0.000 tokenize.py:94(<listcomp>)
        1    0.000    0.000    0.000    0.000 tokenizer.py:126(TokenizerPatterns)
        1    0.000    0.000    0.000    0.000 tokenizer.py:164(Tokenizer)
        2    0.000    0.000    0.033    0.017 tokenizer.py:25(<module>)
        1    0.000    0.000    0.000    0.000 tokenizer.py:35(TokenTypes)
        1    0.000    0.000    0.000    0.000 tokenizer.py:39(TokenTypes)
        1    0.000    0.000    0.000    0.000 tokenizer.py:40(__init__)
        1    0.000    0.000    0.000    0.000 tokenizer.py:47(TokenizerPatterns)
        1    0.000    0.000    0.000    0.000 tokenizer.py:52(Tokenizer)
        1    0.000    0.000    0.000    0.000 tokenizer.py:56(__init__)
        1    0.000    0.000    0.000    0.000 tokenstream.py:25(<module>)
        1    0.000    0.000    0.000    0.000 tokenstream.py:30(TokenStream)
        1    0.000    0.000    0.005    0.005 traceback.py:1(<module>)
        4    0.000    0.000    0.008    0.002 traceback.py:260(extract_stack)
        1    0.000    0.000    0.000    0.000 traceback.py:287(FrameSummary)
        8    0.000    0.000    0.000    0.000 traceback.py:303(__init__)
       34    0.000    0.000    0.000    0.000 traceback.py:332(__getitem__)
       16    0.000    0.000    0.000    0.000 traceback.py:342(__len__)
       42    0.000    0.000    0.008    0.000 traceback.py:345(line)
        8    0.000    0.000    0.000    0.000 traceback.py:352(walk_stack)
        1    0.000    0.000    0.000    0.000 traceback.py:378(StackSummary)
        4    0.000    0.000    0.008    0.002 traceback.py:381(extract)
        1    0.000    0.000    0.000    0.000 traceback.py:500(TracebackException)
        1    0.000    0.000    0.019    0.019 types.py:1(<module>)
        1    0.000    0.000    0.000    0.000 types.py:148(CompositeParamType)
        1    0.000    0.000    0.000    0.000 types.py:156(FuncParamType)
        1    0.000    0.000    0.000    0.000 types.py:180(UnprocessedParamType)
      152    0.000    0.000    0.000    0.000 types.py:181(__get__)
        1    0.000    0.000    0.000    0.000 types.py:192(StringParamType)
        1    0.000    0.000    0.000    0.000 types.py:218(Choice)
        1    0.000    0.000    0.001    0.001 types.py:22(ParamType)
        1    0.000    0.000    0.000    0.000 types.py:237(__init__)
        1    0.000    0.000    0.000    0.000 types.py:325(DateTime)
        1    0.000    0.000    0.000    0.000 types.py:392(_NumberParamTypeBase)
        1    0.000    0.000    0.000    0.000 types.py:410(_NumberRangeBase)
        1    0.000    0.000    0.000    0.000 types.py:496(IntParamType)
        1    0.000    0.000    0.000    0.000 types.py:504(IntRange)
        1    0.000    0.000    0.000    0.000 types.py:530(FloatParamType)
        1    0.000    0.000    0.000    0.000 types.py:538(FloatRange)
        1    0.000    0.000    0.000    0.000 types.py:581(BoolParamType)
        1    0.000    0.000    0.000    0.000 types.py:606(UUIDParameterType)
        1    0.000    0.000    0.000    0.000 types.py:630(File)
        1    0.000    0.000    0.000    0.000 types.py:746(Path)
        3    0.000    0.000    0.002    0.001 types.py:780(__init__)
        1    0.000    0.000    0.000    0.000 types.py:912(Tuple)
       18    0.000    0.000    0.000    0.000 types.py:962(convert_type)
        2    0.001    0.000    0.022    0.011 typing.py:1(<module>)
        1    0.000    0.000    0.000    0.000 typing.py:1006(_ProtocolMeta)
        1    0.000    0.000    0.000    0.000 typing.py:1026(Protocol)
        7    0.000    0.000    0.000    0.000 typing.py:1060(__init_subclass__)
        7    0.000    0.000    0.000    0.000 typing.py:1065(<genexpr>)
        7    0.000    0.000    0.000    0.000 typing.py:1124(runtime_checkable)
       66    0.000    0.000    0.000    0.000 typing.py:1149(cast)
     1717    0.024    0.000    0.046    0.000 typing.py:120(_type_check)
       46    0.000    0.000    0.000    0.000 typing.py:1362(overload)
       38    0.000    0.000    0.003    0.000 typing.py:1435(_alias)
        1    0.000    0.000    0.000    0.000 typing.py:1521(SupportsInt)
        1    0.000    0.000    0.000    0.000 typing.py:1531(SupportsFloat)
        1    0.000    0.000    0.000    0.000 typing.py:1541(SupportsComplex)
        1    0.000    0.000    0.000    0.000 typing.py:1551(SupportsBytes)
        1    0.000    0.000    0.000    0.000 typing.py:1561(SupportsIndex)
        1    0.000    0.000    0.000    0.000 typing.py:1571(SupportsAbs)
        1    0.000    0.000    0.000    0.000 typing.py:1581(SupportsRound)
        6    0.000    0.000    0.003    0.001 typing.py:1591(_make_nmtuple)
        6    0.000    0.000    0.000    0.000 typing.py:1593(<listcomp>)
        6    0.000    0.000    0.000    0.000 typing.py:1594(<listcomp>)
        1    0.000    0.000    0.000    0.000 typing.py:1613(NamedTupleMeta)
        7    0.000    0.000    0.003    0.000 typing.py:1615(__new__)
        1    0.000    0.000    0.000    0.000 typing.py:1644(NamedTuple)
      817    0.007    0.000    0.011    0.000 typing.py:172(_collect_type_vars)
        1    0.000    0.000    0.000    0.000 typing.py:1734(_TypedDictMeta)
        1    0.000    0.000    0.000    0.000 typing.py:1735(__new__)
        1    0.000    0.000    0.000    0.000 typing.py:1749(<dictcomp>)
        1    0.000    0.000    0.000    0.000 typing.py:1760(TypedDict)
      424    0.000    0.000    0.000    0.000 typing.py:183(<listcomp>)
        1    0.000    0.000    0.000    0.000 typing.py:1838(IO)
      204    0.004    0.000    0.029    0.000 typing.py:187(_subs_tvars)
        1    0.000    0.000    0.000    0.000 typing.py:1937(BinaryIO)
        1    0.000    0.000    0.000    0.000 typing.py:1951(TextIO)
        1    0.000    0.000    0.000    0.000 typing.py:1986(io)
        1    0.000    0.000    0.000    0.000 typing.py:2001(re)
      215    0.001    0.000    0.001    0.000 typing.py:206(_check_generic)
      371    0.008    0.000    0.018    0.000 typing.py:219(_remove_dups_flatten)
        4    0.000    0.000    0.000    0.000 typing.py:248(_tp_cache)
2870/2660    0.036    0.000    0.461    0.000 typing.py:255(inner)
        1    0.000    0.000    0.000    0.000 typing.py:281(_Final)
        5    0.000    0.000    0.000    0.000 typing.py:286(__init_subclass__)
        1    0.000    0.000    0.000    0.000 typing.py:290(_Immutable)
        1    0.000    0.000    0.000    0.000 typing.py:300(_SpecialForm)
        7    0.000    0.000    0.000    0.000 typing.py:307(__new__)
        7    0.000    0.000    0.000    0.000 typing.py:320(__init__)
     1616    0.002    0.000    0.004    0.000 typing.py:324(__eq__)
     3235    0.005    0.000    0.025    0.000 typing.py:329(__hash__)
  587/377    0.052    0.000    0.181    0.000 typing.py:347(__getitem__)
     1165    0.002    0.000    0.020    0.000 typing.py:358(<genexpr>)
        1    0.000    0.000    0.000    0.000 typing.py:489(ForwardRef)
      141    0.002    0.000    0.010    0.000 typing.py:496(__init__)
       60    0.000    0.000    0.000    0.000 typing.py:524(__eq__)
      486    0.001    0.000    0.001    0.000 typing.py:532(__hash__)
        1    0.000    0.000    0.000    0.000 typing.py:539(TypeVar)
       39    0.001    0.000    0.002    0.000 typing.py:586(__init__)
       49    0.000    0.000    0.000    0.000 typing.py:598(<genexpr>)
     6049    0.005    0.000    0.009    0.000 typing.py:646(_is_dunder)
        1    0.000    0.000    0.000    0.000 typing.py:650(_GenericAlias)
      808    0.022    0.000    0.119    0.000 typing.py:659(__init__)
     2422    0.005    0.000    0.005    0.000 typing.py:669(<genexpr>)
      204    0.003    0.000    0.042    0.000 typing.py:677(__getitem__)
      451    0.001    0.000    0.009    0.000 typing.py:685(<genexpr>)
      378    0.002    0.000    0.058    0.000 typing.py:689(copy_with)
     1167    0.002    0.000    0.003    0.000 typing.py:711(__eq__)
4526/2280    0.026    0.000    0.052    0.000 typing.py:720(__hash__)
       20    0.000    0.000    0.000    0.000 typing.py:725(__call__)
        9    0.000    0.000    0.000    0.000 typing.py:736(__mro_entries__)
     6049    0.063    0.000    0.081    0.000 typing.py:762(__setattr__)
        1    0.000    0.000    0.000    0.000 typing.py:798(_VariadicGenericAlias)
      392    0.002    0.000    0.074    0.000 typing.py:802(__getitem__)
      174    0.002    0.000    0.046    0.000 typing.py:818(__getitem_inner__)
      274    0.000    0.000    0.006    0.000 typing.py:830(<genexpr>)
      187    0.000    0.000    0.002    0.000 typing.py:839(<genexpr>)
        1    0.000    0.000    0.000    0.000 typing.py:845(Generic)
       32    0.000    0.000    0.000    0.000 typing.py:868(__new__)
       15    0.000    0.000    0.003    0.000 typing.py:878(__class_getitem__)
       30    0.000    0.000    0.000    0.000 typing.py:886(<genexpr>)
        8    0.000    0.000    0.000    0.000 typing.py:889(<genexpr>)
       16    0.000    0.000    0.000    0.000 typing.py:900(__init_subclass__)
        1    0.000    0.000    0.000    0.000 typing.py:936(_TypingEmpty)
        1    0.000    0.000    0.000    0.000 typing.py:943(_TypingEllipsis)
      130    0.000    0.000    0.000    0.000 unicode.py:111(<genexpr>)
        1    0.000    0.000    0.000    0.000 unicode.py:118(pyparsing_unicode)
        1    0.000    0.000    0.000    0.000 unicode.py:125(Latin1)
        1    0.000    0.000    0.000    0.000 unicode.py:132(LatinA)
        1    0.000    0.000    0.000    0.000 unicode.py:138(LatinB)
     10/3    0.000    0.000    0.010    0.003 unicode.py:14(__get__)
        1    0.000    0.000    0.000    0.000 unicode.py:144(Greek)
       44    0.000    0.000    0.000    0.000 unicode.py:18(<genexpr>)
        1    0.000    0.000    0.000    0.000 unicode.py:184(Cyrillic)
        1    0.000    0.000    0.000    0.000 unicode.py:197(Chinese)
        1    0.000    0.000    0.000    0.000 unicode.py:220(Japanese)
        1    0.000    0.000    0.000    0.000 unicode.py:224(Kanji)
        1    0.000    0.000    0.000    0.000 unicode.py:231(Hiragana)
        1    0.000    0.000    0.000    0.000 unicode.py:243(Katakana)
        1    0.000    0.000    0.000    0.000 unicode.py:257(Hangul)
        1    0.000    0.000    0.000    0.000 unicode.py:279(CJK)
        1    0.000    0.000    0.000    0.000 unicode.py:283(Thai)
        1    0.000    0.000    0.000    0.000 unicode.py:287(Arabic)
        1    0.000    0.000    0.000    0.000 unicode.py:295(Hebrew)
        1    0.000    0.000    0.001    0.001 unicode.py:3(<module>)
        1    0.000    0.000    0.000    0.000 unicode.py:309(Devanagari)
        1    0.000    0.000    0.000    0.000 unicode.py:31(unicode_set)
        2    0.000    0.000    0.009    0.004 unicode.py:55(_chars_for_ranges)
        2    0.006    0.003    0.007    0.004 unicode.py:63(<listcomp>)
        1    0.000    0.000    0.009    0.009 unicode.py:70(alphas)
        1    0.000    0.000    0.000    0.000 unicode.py:75(nums)
        1    0.000    0.000    0.000    0.000 unicode.py:8(_lazyclassproperty)
        1    0.000    0.000    0.009    0.009 unicode.py:80(alphanums)
        1    0.000    0.000    0.001    0.001 unicode.py:85(identchars)
        7    0.000    0.000    0.000    0.000 unicode.py:9(__init__)
        1    0.000    0.000    0.000    0.000 unicode.py:99(identbodychars)
        1    0.000    0.000    0.000    0.000 union.py:1(<module>)
        1    0.000    0.000    0.000    0.000 union.py:3(UnionMeta)
        1    0.000    0.000    0.000    0.000 union.py:6(Union)
        1    0.000    0.000    0.005    0.005 unixccompiler.py:1(<module>)
        1    0.000    0.000    0.000    0.000 unixccompiler.py:45(UnixCCompiler)
        1    0.000    0.000    0.001    0.001 url_safe.py:1(<module>)
        1    0.000    0.000    0.000    0.000 url_safe.py:12(URLSafeSerializerMixin)
        1    0.000    0.000    0.000    0.000 url_safe.py:69(URLSafeSerializer)
        1    0.000    0.000    0.000    0.000 url_safe.py:76(URLSafeTimedSerializer)
        1    0.000    0.000    0.012    0.012 urls.py:1(<module>)
        1    0.000    0.000    0.000    0.000 urls.py:1108(Href)
        1    0.000    0.000    0.000    0.000 urls.py:330(URL)
        1    0.003    0.003    0.003    0.003 urls.py:35(<dictcomp>)
        1    0.000    0.000    0.000    0.000 urls.py:355(BytesURL)
        1    0.000    0.000    0.000    0.000 urls.py:40(<listcomp>)
        1    0.000    0.000    0.000    0.000 urls.py:43(_URLTuple)
        2    0.000    0.000    0.000    0.000 urls.py:508(_make_fast_url_quote)
        1    0.000    0.000    0.001    0.001 urls.py:51(BaseURL)
        2    0.000    0.000    0.000    0.000 urls.py:531(<listcomp>)
       38    0.001    0.000    0.001    0.000 urls.py:547(url_quote)
        1    0.000    0.000    0.000    0.000 urls.py:699(<listcomp>)
        2    0.000    0.000    0.000    0.000 user_agent.py:1(<module>)
        1    0.000    0.000    0.000    0.000 user_agent.py:4(UserAgent)
        1    0.000    0.000    0.000    0.000 user_agent.py:5(UserAgentMixin)
        1    0.000    0.000    0.101    0.101 useragents.py:1(<module>)
        1    0.000    0.000    0.004    0.004 useragents.py:11(_UserAgentParser)
        1    0.000    0.000    0.000    0.000 useragents.py:115(UserAgentParser)
        1    0.000    0.000    0.000    0.000 useragents.py:133(_deprecated_property)
        4    0.000    0.000    0.000    0.000 useragents.py:134(__init__)
        1    0.000    0.000    0.097    0.097 useragents.py:151(_UserAgent)
        1    0.000    0.000    0.000    0.000 useragents.py:177(UserAgent)
        1    0.000    0.000    0.097    0.097 useragents.py:67(__init__)
        1    0.000    0.000    0.011    0.011 useragents.py:68(<listcomp>)
        1    0.000    0.000    0.086    0.086 useragents.py:69(<listcomp>)
       11    0.000    0.000    0.000    0.000 utf_8.py:15(decode)
   180214    0.009    0.000    0.012    0.000 utf_8.py:19(encode)
        1    0.000    0.000    0.000    0.000 util.py:1(<module>)
        1    0.000    0.000    0.000    0.000 util.py:102(_FifoCache)
        1    0.000    0.000    0.000    0.000 util.py:12(__config_flags)
        1    0.000    0.000    0.000    0.000 util.py:125(LRUMemo)
        1    0.000    0.000    0.000    0.000 util.py:164(UnboundedMemo)
        2    0.000    0.000    0.000    0.000 util.py:173(_escape_regex_range_chars)
       30    0.009    0.000    0.020    0.001 util.py:182(_collapse_string_to_ranges)
     2840    0.008    0.000    0.009    0.000 util.py:185(is_consecutive)
      168    0.000    0.000    0.000    0.000 util.py:196(escape_re_range_char)
      103    0.000    0.000    0.000    0.000 util.py:199(no_escape_re_range_char)
        1    0.000    0.000    0.001    0.001 util.py:2(<module>)
        4    0.000    0.000    0.000    0.000 util.py:222(<listcomp>)
        1    0.000    0.000    0.000    0.000 util.py:541(Mixin2to3)
        1    0.000    0.000    0.000    0.000 util.py:73(find_spec)
        1    0.000    0.000    0.000    0.000 util.py:81(_UnboundedCache)
        1    0.000    0.000    0.000    0.000 util_log.py:1(<module>)
    15651    0.321    0.000    0.322    0.000 util_log.py:10(default)
        5    0.003    0.001    1.425    0.285 util_log.py:15(log_json)
        5    0.000    0.000    0.000    0.000 util_log.py:6(_get_log_filename)
        1    0.000    0.000    0.000    0.000 util_log.py:9(SetEncoder)
        1    0.000    0.000    0.473    0.473 util_sexpr.py:1(<module>)
        5    0.000    0.000    0.199    0.040 util_traverse.py:23(traverse_nested_list_and_dict)
  27081/5    0.128    0.000    0.199    0.040 util_traverse.py:27(_traverse_rec)
        1    0.000    0.000    0.000    0.000 util_traverse.py:5(<module>)
        1    0.000    0.000    0.000    0.000 utility.py:1(<module>)
        4    0.000    0.000    0.000    0.000 utility.py:10(_str_with_len)
       10    0.000    0.000    0.000    0.000 utility.py:16(_str_to_ffi_buffer)
       30    0.000    0.000    0.000    0.000 utility.py:27(_str_from_buf)
        4    0.001    0.000    0.053    0.013 utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 utils.py:102(LazyFile)
        1    0.000    0.000    0.000    0.000 utils.py:1041(ArgumentValidationError)
        1    0.000    0.000    0.000    0.000 utils.py:1060(ImportStringError)
        1    0.000    0.000    0.000    0.000 utils.py:140(environ_property)
       18    0.000    0.000    0.000    0.000 utils.py:155(internalcode)
        1    0.000    0.000    0.000    0.000 utils.py:167(header_property)
        1    0.000    0.000    0.000    0.000 utils.py:174(HTMLBuilder)
        1    0.000    0.000    0.000    0.000 utils.py:184(KeepOpenFile)
        5    0.000    0.000    0.001    0.000 utils.py:204(echo)
        2    0.000    0.000    0.000    0.000 utils.py:243(__init__)
        6    0.000    0.000    0.000    0.000 utils.py:30(pass_context)
        1    0.000    0.000    0.000    0.000 utils.py:461(PacifyFlushWrapper)
        8    0.000    0.000    0.000    0.000 utils.py:47(pass_eval_context)
        1    0.000    0.000    0.001    0.001 utils.py:498(LRUCache)
        1    0.000    0.000    0.026    0.026 utils.py:5(<module>)
        1    0.000    0.000    0.000    0.000 utils.py:506(__init__)
        1    0.000    0.000    0.000    0.000 utils.py:51(cached_property)
        1    0.000    0.000    0.000    0.000 utils.py:512(_postinit)
       13    0.000    0.000    0.000    0.000 utils.py:64(pass_environment)
        1    0.000    0.000    0.000    0.000 utils.py:744(Cycler)
        1    0.000    0.000    0.000    0.000 utils.py:77(_PassArg)
       40    0.000    0.000    0.000    0.000 utils.py:77(__init__)
        1    0.000    0.000    0.000    0.000 utils.py:798(Joiner)
        1    0.000    0.000    0.000    0.000 utils.py:812(Namespace)
       11    0.000    0.000    0.000    0.000 utils.py:82(from_obj)
        1    0.000    0.000    0.000    0.000 utils.py:836(Markup)
        3    0.000    0.000    0.000    0.000 utils.py:90(__get__)
        1    0.000    0.000    0.000    0.000 uu.py:27(<module>)
        1    0.000    0.000    0.000    0.000 uu.py:39(Error)
        1    0.000    0.000    0.001    0.001 uuid.py:1(<module>)
        4    0.000    0.000    0.000    0.000 uuid.py:132(__init__)
        1    0.000    0.000    0.000    0.000 uuid.py:72(SafeUUID)
        1    0.000    0.000    0.000    0.000 uuid.py:78(UUID)
        1    0.000    0.000    0.000    0.000 visitor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 visitor.py:16(NodeVisitor)
        1    0.000    0.000    0.000    0.000 visitor.py:50(NodeTransformer)
        1    0.000    0.000    0.000    0.000 warnings.py:165(simplefilter)
        1    0.000    0.000    0.000    0.000 warnings.py:181(_add_filter)
        1    0.000    0.000    0.000    0.000 warnings.py:437(__init__)
        1    0.000    0.000    0.000    0.000 warnings.py:458(__enter__)
        1    0.000    0.000    0.000    0.000 warnings.py:477(__exit__)
        1    0.000    0.000    0.000    0.000 weakref.py:122(__init__)
        1    0.000    0.000    0.000    0.000 weakref.py:310(update)
        5    0.000    0.000    0.000    0.000 weakref.py:369(__init__)
        1    0.000    0.000    0.000    0.000 weakref.py:428(__setitem__)
        5    0.000    0.000    0.000    0.000 weakref.py:452(get)
        1    0.000    0.000    0.000    0.000 whitespacepattern.py:25(<module>)
        1    0.000    0.000    0.000    0.000 whitespacepattern.py:31(WhitespacePattern)
        1    0.000    0.000    0.050    0.050 wrappers.py:1(<module>)
        1    0.000    0.000    0.000    0.000 wrappers.py:134(Response)
        1    0.000    0.000    0.050    0.050 wrappers.py:16(Request)
        1    0.000    0.000    0.010    0.010 wsgi.py:1(<module>)
        1    0.000    0.000    0.001    0.001 wsgi.py:416(ClosingIterator)
        1    0.000    0.000    0.000    0.000 wsgi.py:492(FileWrapper)
        1    0.000    0.000    0.001    0.001 wsgi.py:544(_RangeWrapper)
        1    0.000    0.000    0.000    0.000 wsgi.py:828(LimitedStream)
1081/1058    0.027    0.000    0.605    0.001 {built-in function __build_class__}
       22    0.000    0.000    0.000    0.000 {built-in function __pypy__.builtinify}
        7    0.000    0.000    0.000    0.000 {built-in function _cffi_backend.callback}
        1    0.000    0.000    0.000    0.000 {built-in function _codecs.lookup}
        1    0.000    0.000    0.000    0.000 {built-in function _codecs.register_error}
       80    0.001    0.000    0.001    0.000 {built-in function _codecs.utf_8_decode}
   180214    0.003    0.000    0.003    0.000 {built-in function _codecs.utf_8_encode}
      276    0.006    0.000    0.006    0.000 {built-in function _imp._fix_co_filename}
     3225    0.002    0.000    0.002    0.000 {built-in function _imp.acquire_lock}
       16    0.001    0.000    0.001    0.000 {built-in function _imp.create_builtin}
        9    0.006    0.001    0.006    0.001 {built-in function _imp.create_dynamic}
       16    0.000    0.000    0.000    0.000 {built-in function _imp.exec_builtin}
        9    0.002    0.000    0.002    0.000 {built-in function _imp.exec_dynamic}
      140    0.000    0.000    0.000    0.000 {built-in function _imp.is_builtin}
      308    0.000    0.000    0.000    0.000 {built-in function _imp.is_frozen}
     3225    0.001    0.000    0.001    0.000 {built-in function _imp.release_lock}
      278    0.009    0.000    0.009    0.000 {built-in function _io.open_code}
       14    0.003    0.000    0.005    0.000 {built-in function _io.open}
       11    0.000    0.000    0.000    0.000 {built-in function _locale.nl_langinfo}
        2    0.004    0.002    0.004    0.002 {built-in function _posixsubprocess.fork_exec}
        5    0.006    0.001    0.006    0.001 {built-in function _pypyjson.loads}
    67619    0.058    0.000    0.058    0.000 {built-in function _pypyjson.raw_encode_basestring_ascii}
        3    0.000    0.000    0.000    0.000 {built-in function _rawffi.alignment}
        2    0.000    0.000    0.000    0.000 {built-in function _rawffi.get_libc}
       51    0.000    0.000    0.000    0.000 {built-in function _rawffi.sizeof}
        1    0.000    0.000    0.000    0.000 {built-in function _signal.signal}
        1    0.000    0.000    0.006    0.006 {built-in function _socket.getaddrinfo}
       26    0.000    0.000    0.000    0.000 {built-in function _sre.ascii_iscased}
       25    0.000    0.000    0.000    0.000 {built-in function _sre.ascii_tolower}
      684    0.000    0.000    0.000    0.000 {built-in function _sre.unicode_iscased}
      577    0.000    0.000    0.000    0.000 {built-in function _sre.unicode_tolower}
       18    0.000    0.000    0.000    0.000 {built-in function _struct.calcsize}
        4    0.000    0.000    0.000    0.000 {built-in function _struct.pack}
        1    0.000    0.000    0.000    0.000 {built-in function _thread._set_sentinel}
      820    0.001    0.000    0.001    0.000 {built-in function _thread.allocate_lock}
     3805    0.001    0.000    0.001    0.000 {built-in function _thread.get_ident}
        3    0.000    0.000    0.000    0.000 {built-in function _warnings._filters_mutated}
      107    0.000    0.000    0.000    0.000 {built-in function abs}
      741    0.000    0.000    0.000    0.000 {built-in function callable}
     2444    0.001    0.000    0.001    0.000 {built-in function chr}
      203    0.041    0.000    0.041    0.000 {built-in function compile}
        5    0.000    0.000    0.000    0.000 {built-in function cpyext.is_cpyext_function}
       70    0.000    0.000    0.000    0.000 {built-in function divmod}
    355/1    0.013    0.000   35.076   35.076 {built-in function exec}
     5737    0.006    0.000    0.006    0.000 {built-in function getattr}
       97    0.000    0.000    0.000    0.000 {built-in function globals}
     4317    0.005    0.000    0.005    0.000 {built-in function hasattr}
11118/3222    0.074    0.000    0.105    0.000 {built-in function hash}
    82052    0.013    0.000    0.013    0.000 {built-in function id}
478156/478032    0.079    0.000    0.123    0.000 {built-in function isinstance}
      740    0.001    0.000    0.001    0.000 {built-in function issubclass}
      208    0.000    0.000    0.000    0.000 {built-in function iter}
63711/59978    0.050    0.000    0.052    0.000 {built-in function len}
       27    0.000    0.000    0.000    0.000 {built-in function locals}
        1    0.001    0.001    0.001    0.001 {built-in function marshal.dumps}
      276    0.085    0.000    0.085    0.000 {built-in function marshal.loads}
        1    0.000    0.000    0.000    0.000 {built-in function math.exp}
        2    0.000    0.000    0.000    0.000 {built-in function math.log}
        1    0.000    0.000    0.000    0.000 {built-in function math.sqrt}
     3027    0.003    0.000    0.005    0.000 {built-in function max}
     9802    0.005    0.000    0.005    0.000 {built-in function min}
      362    0.000    0.000    0.000    0.000 {built-in function next}
    19806    0.003    0.000    0.003    0.000 {built-in function ord}
        2    0.000    0.000    0.000    0.000 {built-in function posix.WEXITSTATUS}
        2    0.000    0.000    0.000    0.000 {built-in function posix.WIFEXITED}
        2    0.000    0.000    0.000    0.000 {built-in function posix.WIFSIGNALED}
        6    0.000    0.000    0.000    0.000 {built-in function posix.close}
     1066    0.001    0.000    0.001    0.000 {built-in function posix.fspath}
      124    0.001    0.000    0.001    0.000 {built-in function posix.getcwd}
        2    0.000    0.000    0.000    0.000 {built-in function posix.getpid}
       32    0.002    0.000    0.002    0.000 {built-in function posix.listdir}
        9    0.000    0.000    0.000    0.000 {built-in function posix.lstat}
        2    0.000    0.000    0.000    0.000 {built-in function posix.open}
        3    0.000    0.000    0.000    0.000 {built-in function posix.pipe}
        1    0.000    0.000    0.000    0.000 {built-in function posix.putenv}
        2    0.005    0.002    0.005    0.002 {built-in function posix.read}
        3    0.000    0.000    0.000    0.000 {built-in function posix.register_at_fork}
        1    0.000    0.000    0.000    0.000 {built-in function posix.replace}
        1    0.000    0.000    0.000    0.000 {built-in function posix.set_inheritable}
     1281    0.034    0.000    0.063    0.000 {built-in function posix.stat}
        1    0.000    0.000    0.000    0.000 {built-in function posix.uname}
        6   30.780    5.130   30.780    5.130 {built-in function posix.waitpid}
        1    0.000    0.000    0.000    0.000 {built-in function pow}
      111    0.001    0.000    0.001    0.000 {built-in function repr}
       13    0.000    0.000    0.000    0.000 {built-in function round}
     1186    0.002    0.000    0.004    0.000 {built-in function setattr}
       80    0.000    0.000    0.000    0.000 {built-in function sys._getframe}
        2    0.000    0.000    0.000    0.000 {built-in function sys.audit}
        2    0.000    0.000    0.000    0.000 {built-in function sys.exc_info}
        1    0.000    0.000    0.000    0.000 {built-in function sys.getdefaultencoding}
       10    0.000    0.000    0.000    0.000 {built-in function sys.getrecursionlimit}
      194    0.000    0.000    0.000    0.000 {built-in function sys.intern}
        1    0.000    0.000    0.000    0.000 {built-in function sys.setrecursionlimit}
        4    0.000    0.000    0.000    0.000 {built-in function time.monotonic}
        3    0.015    0.005    0.015    0.005 {built-in function time.sleep}
        3    0.000    0.000    0.000    0.000 {built-in function time.time}
        2    0.000    0.000    0.000    0.000 {method 'Pointer' of 'type' objects}
      145    0.000    0.000    0.000    0.000 {method '__contains__' of 'frozenset' objects}
        1    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}
        1    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.lock' objects}
       18    0.000    0.000    0.000    0.000 {method '__get__' of 'function' objects}
      7/3    0.000    0.000    0.005    0.002 {method '__import__' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method '__init__' of 'Config' objects}
       29    0.000    0.000    0.000    0.000 {method '__init__' of '_EnumDict' objects}
        1    0.000    0.000    0.000    0.000 {method '__init__' of '_TemplateMetaclass' objects}
        4    0.000    0.000    0.000    0.000 {method '__init__' of '_deprecated_property' objects}
       36    0.000    0.000    0.000    0.000 {method '__init__' of 'cached_property' objects}
        4    0.000    0.000    0.000    0.000 {method '__init__' of 'locked_cached_property' objects}
        2    0.000    0.000    0.000    0.000 {method '__init__' of 'object' objects}
        1    0.000    0.000    0.000    0.000 {method '__init__' of 'socket' objects}
        8    0.000    0.000    0.000    0.000 {method '__init_subclass__' of 'object' objects}
      400    0.000    0.000    0.000    0.000 {method '__len__' of 'dict' objects}
      405    0.000    0.000    0.000    0.000 {method '__new__' of 'ABCMeta' objects}
       31    0.000    0.000    0.000    0.000 {method '__new__' of 'EnumMeta' objects}
        5    0.000    0.000    0.000    0.000 {method '__new__' of 'SimpleType' objects}
     1230    0.001    0.000    0.001    0.000 {method '__new__' of 'structseqtype' objects}
        2    0.000    0.000    0.000    0.000 {method '__new__' of 'type' objects}
        1    0.000    0.000    0.000    0.000 {method '__next__' of 'itertools.count' objects}
        2    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
       27    0.000    0.000    0.000    0.000 {method '__setattr__' of 'Context' objects}
      514    0.000    0.000    0.000    0.000 {method '__setattr__' of 'EnumMeta' objects}
        3    0.000    0.000    0.000    0.000 {method '__setattr__' of 'Local' objects}
       15    0.000    0.000    0.000    0.000 {method '__setattr__' of 'LocalProxy' objects}
        6    0.000    0.000    0.000    0.000 {method '__setattr__' of 'StructOrUnionMeta' objects}
        8    0.000    0.000    0.000    0.000 {method '__setattr__' of 'UUID' objects}
       16    0.000    0.000    0.000    0.000 {method '__setattr__' of '_GenericAlias' objects}
     1229    0.004    0.000    0.004    0.000 {method '__setattr__' of 'stat_result' objects}
        1    0.000    0.000    0.000    0.000 {method '__setattr__' of 'uname_result' objects}
      428    0.000    0.000    0.000    0.000 {method '__setitem__' of '_EnumDict' objects}
      287    0.000    0.000    0.000    0.000 {method '__str__' of 'int' objects}
       16    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}
        6    0.000    0.000    0.000    0.000 {method 'acquire_lock' of '_thread.lock' objects}
     4585    0.006    0.000    0.006    0.000 {method 'add' of 'set' objects}
      118    0.000    0.000    0.000    0.000 {method 'append' of 'bytearray' objects}
        2    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
        8    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'bind' of '_socket.socket' objects}
       35    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
        2    0.000    0.000    0.000    0.000 {method 'byptr' of 'CallbackPtr' objects}
        7    0.000    0.000    0.001    0.000 {method 'callback' of '_cffi_backend.FFI' objects}
       56    0.000    0.000    0.000    0.000 {method 'cast' of 'memoryview' objects}
        8    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}
        2    0.000    0.000    0.000    0.000 {method 'close' of '_io.TextIOWrapper' objects}
       19    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}
        6    0.000    0.000    0.000    0.000 {method 'copy' of 'list' objects}
        5    0.000    0.000    0.000    0.000 {method 'count' of 'list' objects}
      158    0.000    0.000    0.000    0.000 {method 'decode' of 'bytes' objects}
        2    0.000    0.000    0.000    0.000 {method 'deleter' of 'property' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        4    0.000    0.000    0.000    0.000 {method 'discard' of 'set' objects}
     1295    0.001    0.000    0.001    0.000 {method 'encode' of 'str' objects}
       14    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
       26    0.000    0.000    0.000    0.000 {method 'endswith' of 'bytes' objects}
     4015    0.004    0.000    0.004    0.000 {method 'endswith' of 'str' objects}
       16    0.000    0.000    0.000    0.000 {method 'expandtabs' of 'str' objects}
        4    0.000    0.000    0.000    0.000 {method 'extend' of 'bytearray' objects}
      615    0.001    0.000    0.011    0.000 {method 'extend' of 'collections.deque' objects}
     1259    0.003    0.000    0.003    0.000 {method 'extend' of 'list' objects}
        2    0.000    0.000    0.000    0.000 {method 'fileno' of '_socket.socket' objects}
     1792    0.003    0.000    0.003    0.000 {method 'find' of 'bytearray' objects}
       20    0.000    0.000    0.000    0.000 {method 'find' of 'str' objects}
        7    0.000    0.000    0.000    0.000 {method 'flush' of '_io.TextIOWrapper' objects}
     1041    0.005    0.000    0.005    0.000 {method 'format' of 'str' objects}
        5    0.000    0.000    0.000    0.000 {method 'free_temp_buffers' of '_rawffi.alt.FuncPtr' objects}
       16    0.000    0.000    0.000    0.000 {method 'from_buffer' of '_cffi_backend.FFI' objects}
      852    0.001    0.000    0.001    0.000 {method 'from_bytes' of 'type' objects}
       59    0.000    0.000    0.000    0.000 {method 'from_handle' of '_cffi_backend.FFI' objects}
        7    0.000    0.000    0.000    0.000 {method 'fromaddr' of 'type' objects}
      341    0.002    0.000    0.002    0.000 {method 'fromkeys' of 'type' objects}
        6    0.000    0.000    0.000    0.000 {method 'gc' of '_cffi_backend.FFI' objects}
        1    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      549    0.000    0.000    0.000    0.000 {method 'get' of 'mappingproxy' objects}
        5    0.000    0.000    0.000    0.000 {method 'getaddr' of '_rawffi.alt.FuncPtr' objects}
        2    0.000    0.000    0.000    0.000 {method 'getaddressindll' of 'CDLL' objects}
        5    0.000    0.000    0.000    0.000 {method 'getfunc' of '_rawffi.alt.CDLL' objects}
        1    0.000    0.000    0.000    0.000 {method 'getsockname' of '_socket.socket' objects}
        2    0.000    0.000    0.000    0.000 {method 'getvalue' of '_io.BytesIO' objects}
       67    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
       14    0.000    0.000    0.000    0.000 {method 'groupdict' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 {method 'index' of 'str' objects}
       41    0.000    0.000    0.000    0.000 {method 'index' of 'tuple' objects}
       40    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
       25    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
        5    0.000    0.000    0.000    0.000 {method 'isatty' of '_io.TextIOWrapper' objects}
      436    0.000    0.000    0.000    0.000 {method 'isidentifier' of 'str' objects}
     1135    0.000    0.000    0.000    0.000 {method 'isupper' of 'str' objects}
     9587    0.002    0.000    0.002    0.000 {method 'items' of 'dict' objects}
      141    0.000    0.000    0.000    0.000 {method 'items' of 'mappingproxy' objects}
2973/2960    0.008    0.000    0.013    0.000 {method 'join' of 'str' objects}
       35    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'listen' of '_socket.socket' objects}
       33    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
       49    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
        2    0.000    0.000    0.000    0.000 {method 'maketrans' of 'type' objects}
      172    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}
        5    0.000    0.000    0.000    0.000 {method 'mro' of 'type' objects}
        4    0.000    0.000    0.000    0.000 {method 'new' of '_cffi_backend.FFI' objects}
        1    0.000    0.000    0.000    0.000 {method 'new_handle' of '_cffi_backend.FFI' objects}
      116    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}
      158    0.000    0.000    0.000    0.000 {method 'pop' of 'collections.deque' objects}
       58    0.000    0.000    0.000    0.000 {method 'pop' of 'dict' objects}
       15    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
      615    0.000    0.000    0.000    0.000 {method 'popleft' of 'collections.deque' objects}
      278    0.009    0.000    0.009    0.000 {method 'read' of '_io.BufferedReader' objects}
        6    0.031    0.005    0.037    0.006 {method 'read' of '_io.TextIOWrapper' objects}
        3    0.000    0.000    0.000    0.000 {method 'readline' of '_io.BufferedReader' objects}
      837    0.001    0.000    0.001    0.000 {method 'readline' of '_io.TextIOWrapper' objects}
        2    0.006    0.003    0.007    0.003 {method 'readlines' of '_io._IOBase' objects}
       16    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}
        4    0.000    0.000    0.000    0.000 {method 'release_lock' of '_thread.lock' objects}
        4    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
      149    0.000    0.000    0.000    0.000 {method 'replace' of 'str' objects}
        4    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
        2    0.000    0.000    0.000    0.000 {method 'rfind' of 'bytes' objects}
      572    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}
     2449    0.002    0.000    0.002    0.000 {method 'rpartition' of 'str' objects}
      774    0.001    0.000    0.001    0.000 {method 'rsplit' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'bytes' objects}
     6778    0.002    0.000    0.002    0.000 {method 'rstrip' of 'str' objects}
        8    0.000    0.000    0.000    0.000 {method 'scanner' of 're.Pattern' objects}
        2    0.000    0.000    0.000    0.000 {method 'search' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 {method 'seed' of 'Random' objects}
        2    0.000    0.000    0.000    0.000 {method 'seek' of '_io.BufferedReader' objects}
       29    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'setsockopt' of '_socket.socket' objects}
       64    0.000    0.000    0.000    0.000 {method 'setter' of 'property' objects}
       31    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'split' of 'bytes' objects}
      905    0.001    0.000    0.001    0.000 {method 'split' of 'str' objects}
       28    0.000    0.000    0.000    0.000 {method 'startswith' of 'bytes' objects}
    16152    0.021    0.000    0.021    0.000 {method 'startswith' of 'str' objects}
       31    0.000    0.000    0.000    0.000 {method 'string' of '_cffi_backend.FFI' objects}
       22    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
        6    0.000    0.000    0.001    0.000 {method 'sub' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 {method 'title' of 'str' objects}
      164    0.000    0.000    0.000    0.000 {method 'to_bytes' of 'int' objects}
       56    0.001    0.000    0.001    0.000 {method 'tolist' of 'memoryview' objects}
      141    0.002    0.000    0.002    0.000 {method 'translate' of 'bytearray' objects}
       89    0.000    0.000    0.000    0.000 {method 'translate' of 'str' objects}
     8267    0.011    0.000    0.011    0.000 {method 'union' of 'set' objects}
      541    0.012    0.000    0.012    0.000 {method 'update' of 'dict' objects}
    10402    0.019    0.000    0.019    0.000 {method 'update' of 'set' objects}
       63    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
       16    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
       13    0.000    0.000    0.000    0.000 {method 'values' of 'mappingproxy' objects}
        6    0.000    0.000    0.000    0.000 {method 'write' of '_io.BytesIO' objects}
        1    0.000    0.000    0.000    0.000 {method 'write' of '_io.FileIO' objects}
180140/180132    0.107    0.000    0.119    0.000 {method 'write' of '_io.TextIOWrapper' objects}


