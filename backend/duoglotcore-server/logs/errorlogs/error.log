=============== Initialization BEGIN ===============

# grm_preprocess py _external_symbols: ['_newline', '_indent', '_dedent', '_string_start', 'string_content', '_string_end']
# grm_preprocess py _aliased_symbols: {'lambda', 'block', 'identifier', 'list_splat_pattern', 'parenthesized_expression'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- CHOICE: 2  ahead_size: 9 --------------------------------
  MEMBER: (SYMBOL _simple_statements) 
    -----cset:  1 {('symbol', '_simple_statements')} 
    -----ahead:  1 {('symbol', '_simple_statements')}
  MEMBER: (SYMBOL _compound_statement) 
    -----cset:  8 {('symbol', 'function_definition'), ('symbol', 'class_definition'), ('symbol', 'try_statement'), ('symbol', 'if_statement'), ('symbol', 'for_statement'), ('symbol', 'with_statement'), ('symbol', 'while_statement'), ('symbol', 'decorated_definition')} 
    -----ahead:  8 {('symbol', 'for_statement'), ('symbol', 'if_statement'), ('symbol', 'function_definition'), ('symbol', 'with_statement'), ('symbol', 'class_definition'), ('symbol', 'while_statement'), ('symbol', 'try_statement'), ('symbol', 'decorated_definition')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (STR ;) 
    -----cset:  1 {('str', ';')} 
    -----ahead:  2 {('str', ';'), ('symbol', '_newline')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('blank', None), ('symbol', '_newline')}
-------------------------------- CHOICE: 15  ahead_size: 18 --------------------------------
  MEMBER: (SYMBOL future_import_statement) 
    -----cset:  1 {('symbol', 'future_import_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL import_statement) 
    -----cset:  1 {('symbol', 'import_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'import_statement'), ('symbol', 'raise_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL import_from_statement) 
    -----cset:  1 {('symbol', 'import_from_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL print_statement) 
    -----cset:  1 {('symbol', 'print_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL assert_statement) 
    -----cset:  1 {('symbol', 'assert_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL expression_statement) 
    -----cset:  1 {('symbol', 'expression_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'expression_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL return_statement) 
    -----cset:  1 {('symbol', 'return_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL delete_statement) 
    -----cset:  1 {('symbol', 'delete_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL raise_statement) 
    -----cset:  1 {('symbol', 'raise_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL pass_statement) 
    -----cset:  1 {('symbol', 'pass_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'pass_statement'), ('symbol', 'break_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL break_statement) 
    -----cset:  1 {('symbol', 'break_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'break_statement'), ('symbol', 'exec_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL continue_statement) 
    -----cset:  1 {('symbol', 'continue_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL global_statement) 
    -----cset:  1 {('symbol', 'global_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL nonlocal_statement) 
    -----cset:  1 {('symbol', 'nonlocal_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
  MEMBER: (SYMBOL exec_statement) 
    -----cset:  1 {('symbol', 'exec_statement')} 
    -----ahead:  18 {('symbol', 'future_import_statement'), ('symbol', 'nonlocal_statement'), ('symbol', 'exec_statement'), ('symbol', 'break_statement'), ('symbol', 'pass_statement'), ('symbol', 'expression_statement'), ('symbol', 'global_statement'), ('symbol', '_newline'), ('symbol', 'continue_statement'), ('blank', None), ('symbol', 'print_statement'), ('symbol', 'assert_statement'), ('symbol', 'import_from_statement'), ('symbol', 'return_statement'), ('str', ';'), ('symbol', 'raise_statement'), ('symbol', 'import_statement'), ('symbol', 'delete_statement')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (SYMBOL dotted_name) 
    -----cset:  1 {('symbol', 'dotted_name')} 
    -----ahead:  1 {('symbol', 'dotted_name')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (SYMBOL _import_list) 
    -----cset:  1 {('symbol', '_import_list')} 
    -----ahead:  1 {('symbol', '_import_list')}
  MEMBER: (SEQ (STR () (SYMBOL _import_list) (STR ))) 
    -----cset:  3 {('symbol', '_import_list'), ('str', ')'), ('str', '(')} 
    -----ahead:  3 {('symbol', '_import_list'), ('str', ')'), ('str', '(')}
-------------------------------- CHOICE: 2  ahead_size: 7 --------------------------------
  MEMBER: (SYMBOL relative_import) 
    -----cset:  1 {('symbol', 'relative_import')} 
    -----ahead:  6 {('symbol', 'wildcard_import'), ('symbol', 'relative_import'), ('symbol', '_import_list'), ('str', 'import'), ('str', ')'), ('str', '(')}
  MEMBER: (SYMBOL dotted_name) 
    -----cset:  1 {('symbol', 'dotted_name')} 
    -----ahead:  6 {('symbol', 'wildcard_import'), ('symbol', 'dotted_name'), ('symbol', '_import_list'), ('str', 'import'), ('str', ')'), ('str', '(')}
-------------------------------- CHOICE: 3  ahead_size: 4 --------------------------------
  MEMBER: (SYMBOL wildcard_import) 
    -----cset:  1 {('symbol', 'wildcard_import')} 
    -----ahead:  1 {('symbol', 'wildcard_import')}
  MEMBER: (SYMBOL _import_list) 
    -----cset:  1 {('symbol', '_import_list')} 
    -----ahead:  1 {('symbol', '_import_list')}
  MEMBER: (SEQ (STR () (SYMBOL _import_list) (STR ))) 
    -----cset:  3 {('symbol', '_import_list'), ('str', ')'), ('str', '(')} 
    -----ahead:  3 {('symbol', '_import_list'), ('str', ')'), ('str', '(')}
-------------------------------- CHOICE: 2  ahead_size: 4 --------------------------------
  MEMBER: (SYMBOL dotted_name) 
    -----cset:  1 {('symbol', 'dotted_name')} 
    -----ahead:  4 {('str', ','), ('blank', None), ('symbol', 'dotted_name'), ('symbol', 'aliased_import')}
  MEMBER: (SYMBOL aliased_import) 
    -----cset:  1 {('symbol', 'aliased_import')} 
    -----ahead:  4 {('str', ','), ('blank', None), ('symbol', 'dotted_name'), ('symbol', 'aliased_import')}
-------------------------------- CHOICE: 2  ahead_size: 4 --------------------------------
  MEMBER: (SYMBOL dotted_name) 
    -----cset:  1 {('symbol', 'dotted_name')} 
    -----ahead:  3 {('blank', None), ('str', ','), ('symbol', 'dotted_name')}
  MEMBER: (SYMBOL aliased_import) 
    -----cset:  1 {('symbol', 'aliased_import')} 
    -----ahead:  3 {('symbol', 'aliased_import'), ('str', ','), ('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 35 --------------------------------
  MEMBER: (PREC 1 (SEQ (STR print) (SYMBOL chevron) (REPEAT (SEQ (STR ,) (FIELD argument (SYMBOL expression)))) (CHOICE (STR ,) | (BLANK)))) 
    -----cset:  35 {('str', 'print'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'chevron'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  35 {('str', 'print'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'binary_operator'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'chevron'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
  MEMBER: (PREC -10 (SEQ (STR print) (SEQ (FIELD argument (SYMBOL expression)) (REPEAT (SEQ (STR ,) (FIELD argument (SYMBOL expression))))) (CHOICE (STR ,) | (BLANK)))) 
    -----cset:  34 {('str', 'print'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  34 {('str', 'print'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'binary_operator'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 5  ahead_size: 36 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  33 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'binary_operator'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
  MEMBER: (SEQ (SEQ (SYMBOL expression) (REPEAT (SEQ (STR ,) (SYMBOL expression)))) (CHOICE (STR ,) | (BLANK))) 
    -----cset:  33 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  33 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'binary_operator'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
  MEMBER: (SYMBOL assignment) 
    -----cset:  1 {('symbol', 'assignment')} 
    -----ahead:  1 {('symbol', 'assignment')}
  MEMBER: (SYMBOL augmented_assignment) 
    -----cset:  1 {('symbol', 'augmented_assignment')} 
    -----ahead:  1 {('symbol', 'augmented_assignment')}
  MEMBER: (SYMBOL yield) 
    -----cset:  1 {('symbol', 'yield')} 
    -----ahead:  1 {('symbol', 'yield')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 34 --------------------------------
  MEMBER: (SYMBOL _expressions) 
    -----cset:  32 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  34 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'binary_operator'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 94 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  94 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('str', '/='), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'set'), ('str', '>>')}
  MEMBER: (SYMBOL expression_list) 
    -----cset:  1 {('symbol', 'expression_list')} 
    -----ahead:  41 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'binary_operator'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'elif_clause'), ('symbol', 'list'), ('str', ','), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', '_indent'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
-------------------------------- CHOICE: 2  ahead_size: 35 --------------------------------
  MEMBER: (SYMBOL _expressions) 
    -----cset:  32 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  35 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'binary_operator'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  34 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'binary_operator'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
-------------------------------- CHOICE: 2  ahead_size: 34 --------------------------------
  MEMBER: (SEQ (STR from) (FIELD cause (SYMBOL expression))) 
    -----cset:  32 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  34 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'binary_operator'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 8  ahead_size: 8 --------------------------------
  MEMBER: (SYMBOL if_statement) 
    -----cset:  1 {('symbol', 'if_statement')} 
    -----ahead:  1 {('symbol', 'if_statement')}
  MEMBER: (SYMBOL for_statement) 
    -----cset:  1 {('symbol', 'for_statement')} 
    -----ahead:  1 {('symbol', 'for_statement')}
  MEMBER: (SYMBOL while_statement) 
    -----cset:  1 {('symbol', 'while_statement')} 
    -----ahead:  1 {('symbol', 'while_statement')}
  MEMBER: (SYMBOL try_statement) 
    -----cset:  1 {('symbol', 'try_statement')} 
    -----ahead:  1 {('symbol', 'try_statement')}
  MEMBER: (SYMBOL with_statement) 
    -----cset:  1 {('symbol', 'with_statement')} 
    -----ahead:  1 {('symbol', 'with_statement')}
  MEMBER: (SYMBOL function_definition) 
    -----cset:  1 {('symbol', 'function_definition')} 
    -----ahead:  1 {('symbol', 'function_definition')}
  MEMBER: (SYMBOL class_definition) 
    -----cset:  1 {('symbol', 'class_definition')} 
    -----ahead:  1 {('symbol', 'class_definition')}
  MEMBER: (SYMBOL decorated_definition) 
    -----cset:  1 {('symbol', 'decorated_definition')} 
    -----ahead:  1 {('symbol', 'decorated_definition')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (FIELD alternative (SYMBOL else_clause)) 
    -----cset:  1 {('symbol', 'else_clause')} 
    -----ahead:  1 {('symbol', 'else_clause')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 48 --------------------------------
  MEMBER: (STR async) 
    -----cset:  1 {('str', 'async')} 
    -----ahead:  48 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('symbol', 'pattern_list'), ('alias_symbol', 'block'), ('str', 'async'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('str', 'for'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', '_indent'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  47 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('symbol', 'pattern_list'), ('alias_symbol', 'block'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('str', 'for'), ('blank', None), ('symbol', 'lambda'), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', '_indent'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (SYMBOL else_clause) 
    -----cset:  1 {('symbol', 'else_clause')} 
    -----ahead:  1 {('symbol', 'else_clause')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (FIELD alternative (SYMBOL else_clause)) 
    -----cset:  1 {('symbol', 'else_clause')} 
    -----ahead:  1 {('symbol', 'else_clause')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 4 --------------------------------
  MEMBER: (SEQ {'type': 'REPEAT1', 'content': {'type': 'SYMBOL', 'name': 'except_clause', '_direct_cset': {('symbol', 'except_clause')}, '_sym_ahead_set': {('symbol', 'finally_clause'), ('blank', None), ('symbol', 'else_clause'), ('symbol', 'except_clause')}}, '_direct_cset': {('symbol', 'except_clause')}, '_sym_ahead_set': {('symbol', 'finally_clause'), ('blank', None), ('symbol', 'else_clause'), ('symbol', 'except_clause')}} (CHOICE (SYMBOL else_clause) | (BLANK)) (CHOICE (SYMBOL finally_clause) | (BLANK))) 
    -----cset:  4 {('blank', None), ('symbol', 'else_clause'), ('symbol', 'finally_clause'), ('symbol', 'except_clause')} 
    -----ahead:  4 {('symbol', 'finally_clause'), ('blank', None), ('symbol', 'else_clause'), ('symbol', 'except_clause')}
  MEMBER: (SYMBOL finally_clause) 
    -----cset:  1 {('symbol', 'finally_clause')} 
    -----ahead:  1 {('symbol', 'finally_clause')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (SYMBOL else_clause) 
    -----cset:  1 {('symbol', 'else_clause')} 
    -----ahead:  3 {('symbol', 'finally_clause'), ('blank', None), ('symbol', 'else_clause')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('symbol', 'finally_clause'), ('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (SYMBOL finally_clause) 
    -----cset:  1 {('symbol', 'finally_clause')} 
    -----ahead:  1 {('symbol', 'finally_clause')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 45 --------------------------------
  MEMBER: (SEQ (SYMBOL expression) (CHOICE (SEQ (CHOICE (STR as) | (STR ,)) (SYMBOL expression)) | (BLANK))) 
    -----cset:  34 {('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'integer'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'dictionary_comprehension'), ('symbol', 'set')} 
    -----ahead:  45 {('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'integer'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  9 {('blank', None), ('symbol', 'block'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('alias_symbol', 'block'), ('symbol', 'else_clause'), ('str', ':'), ('symbol', 'except_clause')}
-------------------------------- CHOICE: 2  ahead_size: 45 --------------------------------
  MEMBER: (SEQ (CHOICE (STR as) | (STR ,)) (SYMBOL expression)) 
    -----cset:  33 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  45 {('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'integer'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  9 {('blank', None), ('symbol', 'block'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('alias_symbol', 'block'), ('symbol', 'else_clause'), ('str', ':'), ('symbol', 'except_clause')}
-------------------------------- CHOICE: 2  ahead_size: 45 --------------------------------
  MEMBER: (STR as) 
    -----cset:  1 {('str', 'as')} 
    -----ahead:  45 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('alias_symbol', 'block'), ('str', ','), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  44 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('str', ','), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', '_indent'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
-------------------------------- CHOICE: 2  ahead_size: 12 --------------------------------
  MEMBER: (STR async) 
    -----cset:  1 {('str', 'async')} 
    -----ahead:  12 {('blank', None), ('symbol', 'block'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('str', 'with'), ('alias_symbol', 'block'), ('str', 'async'), ('symbol', 'else_clause'), ('str', ':'), ('symbol', 'with_clause'), ('symbol', 'except_clause')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  11 {('blank', None), ('symbol', 'block'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('str', 'with'), ('alias_symbol', 'block'), ('symbol', 'else_clause'), ('str', ':'), ('symbol', 'with_clause'), ('symbol', 'except_clause')}
-------------------------------- CHOICE: 2  ahead_size: 4 --------------------------------
  MEMBER: (SEQ (SYMBOL with_item) (REPEAT (SEQ (STR ,) (SYMBOL with_item)))) 
    -----cset:  2 {('str', ','), ('symbol', 'with_item')} 
    -----ahead:  2 {('str', ','), ('symbol', 'with_item')}
  MEMBER: (SEQ (STR () (SEQ (SYMBOL with_item) (REPEAT (SEQ (STR ,) (SYMBOL with_item)))) (STR ))) 
    -----cset:  4 {('str', ','), ('str', ')'), ('symbol', 'with_item'), ('str', '(')} 
    -----ahead:  4 {('str', ','), ('symbol', 'with_item'), ('str', ')'), ('str', '(')}
-------------------------------- CHOICE: 2  ahead_size: 48 --------------------------------
  MEMBER: (SEQ (STR as) (FIELD alias (SYMBOL pattern))) 
    -----cset:  8 {('str', 'as'), ('alias_symbol', 'identifier'), ('symbol', 'list_pattern'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'list_splat_pattern'), ('symbol', 'tuple_pattern'), ('symbol', 'subscript')} 
    -----ahead:  48 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'list_pattern'), ('str', ','), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 15 --------------------------------
  MEMBER: (STR async) 
    -----cset:  1 {('str', 'async')} 
    -----ahead:  15 {('symbol', 'parameters'), ('blank', None), ('symbol', 'block'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('symbol', 'type'), ('alias_symbol', 'block'), ('str', 'async'), ('symbol', 'else_clause'), ('symbol', 'identifier'), ('str', ':'), ('str', '->'), ('str', 'def'), ('symbol', 'except_clause')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  14 {('symbol', 'parameters'), ('blank', None), ('symbol', 'block'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('symbol', 'type'), ('alias_symbol', 'block'), ('symbol', 'else_clause'), ('symbol', 'identifier'), ('str', ':'), ('str', '->'), ('str', 'def'), ('symbol', 'except_clause')}
-------------------------------- CHOICE: 2  ahead_size: 11 --------------------------------
  MEMBER: (SEQ (STR ->) (FIELD return_type (SYMBOL type))) 
    -----cset:  2 {('symbol', 'type'), ('str', '->')} 
    -----ahead:  11 {('blank', None), ('symbol', 'block'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'type'), ('symbol', 'elif_clause'), ('alias_symbol', 'block'), ('symbol', 'else_clause'), ('str', ':'), ('str', '->'), ('symbol', 'except_clause')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  9 {('blank', None), ('symbol', 'block'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('alias_symbol', 'block'), ('symbol', 'else_clause'), ('str', ':'), ('symbol', 'except_clause')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (SYMBOL _parameters) 
    -----cset:  1 {('symbol', '_parameters')} 
    -----ahead:  2 {('symbol', '_parameters'), ('str', ')')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('blank', None), ('str', ')')}
-------------------------------- CHOICE: 2  ahead_size: 48 --------------------------------
  MEMBER: (SEQ (STR in) (SEQ (SYMBOL expression) (REPEAT (SEQ (STR ,) (SYMBOL expression))))) 
    -----cset:  33 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  48 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('alias_symbol', 'block'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 10 --------------------------------
  MEMBER: (SYMBOL argument_list) 
    -----cset:  1 {('symbol', 'argument_list')} 
    -----ahead:  10 {('blank', None), ('symbol', 'block'), ('symbol', 'argument_list'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('alias_symbol', 'block'), ('symbol', 'else_clause'), ('str', ':'), ('symbol', 'except_clause')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  9 {('blank', None), ('symbol', 'block'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('alias_symbol', 'block'), ('symbol', 'else_clause'), ('str', ':'), ('symbol', 'except_clause')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (ALIAS True parenthesized_expression (SYMBOL parenthesized_list_splat)) 
    -----cset:  1 {('alias_symbol', 'parenthesized_expression')} 
    -----ahead:  2 {('str', ')'), ('alias_symbol', 'parenthesized_expression')}
  MEMBER: (SYMBOL list_splat) 
    -----cset:  1 {('symbol', 'list_splat')} 
    -----ahead:  2 {('symbol', 'list_splat'), ('str', ')')}
-------------------------------- CHOICE: 2  ahead_size: 53 --------------------------------
  MEMBER: (SEQ (CHOICE (SYMBOL expression) | (SYMBOL list_splat) | (SYMBOL dictionary_splat) | (ALIAS True parenthesized_expression (SYMBOL parenthesized_list_splat)) | (SYMBOL keyword_argument)) (REPEAT (SEQ (STR ,) (CHOICE (SYMBOL expression) | (SYMBOL list_splat) | (SYMBOL dictionary_splat) | (ALIAS True parenthesized_expression (SYMBOL parenthesized_list_splat)) | (SYMBOL keyword_argument))))) 
    -----cset:  36 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'list_splat'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')} 
    -----ahead:  53 {('str', ')'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  3 {('blank', None), ('str', ','), ('str', ')')}
-------------------------------- CHOICE: 5  ahead_size: 53 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  53 {('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'set')}
  MEMBER: (SYMBOL list_splat) 
    -----cset:  1 {('symbol', 'list_splat')} 
    -----ahead:  53 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', ')'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('str', ','), ('alias_symbol', 'block'), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')}
  MEMBER: (SYMBOL dictionary_splat) 
    -----cset:  1 {('symbol', 'dictionary_splat')} 
    -----ahead:  53 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', ')'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('str', ','), ('alias_symbol', 'block'), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')}
  MEMBER: (ALIAS True parenthesized_expression (SYMBOL parenthesized_list_splat)) 
    -----cset:  1 {('alias_symbol', 'parenthesized_expression')} 
    -----ahead:  53 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', ')'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('str', ','), ('alias_symbol', 'block'), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')}
  MEMBER: (SYMBOL keyword_argument) 
    -----cset:  1 {('symbol', 'keyword_argument')} 
    -----ahead:  53 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', ')'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('str', ','), ('alias_symbol', 'block'), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')}
-------------------------------- CHOICE: 5  ahead_size: 53 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  49 {('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', 'integer'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'set')}
  MEMBER: (SYMBOL list_splat) 
    -----cset:  1 {('symbol', 'list_splat')} 
    -----ahead:  4 {('symbol', 'list_splat'), ('str', ')'), ('str', ','), ('blank', None)}
  MEMBER: (SYMBOL dictionary_splat) 
    -----cset:  1 {('symbol', 'dictionary_splat')} 
    -----ahead:  4 {('blank', None), ('symbol', 'dictionary_splat'), ('str', ','), ('str', ')')}
  MEMBER: (ALIAS True parenthesized_expression (SYMBOL parenthesized_list_splat)) 
    -----cset:  1 {('alias_symbol', 'parenthesized_expression')} 
    -----ahead:  4 {('blank', None), ('str', ')'), ('str', ','), ('alias_symbol', 'parenthesized_expression')}
  MEMBER: (SYMBOL keyword_argument) 
    -----cset:  1 {('symbol', 'keyword_argument')} 
    -----ahead:  4 {('blank', None), ('str', ','), ('str', ')'), ('symbol', 'keyword_argument')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  2 {('str', ','), ('str', ')')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('blank', None), ('str', ')')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (SYMBOL class_definition) 
    -----cset:  1 {('symbol', 'class_definition')} 
    -----ahead:  1 {('symbol', 'class_definition')}
  MEMBER: (SYMBOL function_definition) 
    -----cset:  1 {('symbol', 'function_definition')} 
    -----ahead:  1 {('symbol', 'function_definition')}
-------------------------------- CHOICE: 3  ahead_size: 8 --------------------------------
  MEMBER: (ALIAS True block (SYMBOL _simple_statements)) 
    -----cset:  1 {('alias_symbol', 'block')} 
    -----ahead:  6 {('blank', None), ('alias_symbol', 'block'), ('symbol', 'else_clause'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('symbol', 'except_clause')}
  MEMBER: (SEQ (SYMBOL _indent) (SYMBOL block)) 
    -----cset:  2 {('symbol', 'block'), ('symbol', '_indent')} 
    -----ahead:  7 {('blank', None), ('symbol', 'block'), ('symbol', '_indent'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('symbol', 'else_clause'), ('symbol', 'except_clause')}
  MEMBER: (ALIAS True block (SYMBOL _newline)) 
    -----cset:  1 {('alias_symbol', 'block')} 
    -----ahead:  6 {('blank', None), ('alias_symbol', 'block'), ('symbol', 'else_clause'), ('symbol', 'finally_clause'), ('symbol', 'elif_clause'), ('symbol', 'except_clause')}
-------------------------------- CHOICE: 2  ahead_size: 54 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (SEQ {'type': 'REPEAT1', 'content': {'type': 'SEQ', 'members': [{'type': 'STRING', 'value': ',', '_direct_cset': {('str', ',')}, '_sym_ahead_set': {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', '_newline'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'keyword_argument'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('str', ','), ('alias_symbol', 'block'), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')}}, {'type': 'SYMBOL', 'name': 'expression', '_direct_cset': {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')}, '_sym_ahead_set': {('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'set')}}], '_direct_cset': {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}, '_sym_ahead_set': {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', '_newline'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'keyword_argument'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('str', ','), ('alias_symbol', 'block'), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')}}, '_direct_cset': {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')}, '_sym_ahead_set': {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', '_newline'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'keyword_argument'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('str', ','), ('alias_symbol', 'block'), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')}} (CHOICE (STR ,) | (BLANK))) 
    -----cset:  33 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('str', ','), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  54 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', '_newline'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'keyword_argument'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('str', ','), ('alias_symbol', 'block'), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 8  ahead_size: 10 --------------------------------
  MEMBER: (SYMBOL identifier) 
    -----cset:  1 {('symbol', 'identifier')} 
    -----ahead:  10 {('blank', None), ('symbol', 'dictionary_splat_pattern'), ('symbol', 'default_parameter'), ('symbol', 'typed_parameter'), ('alias_symbol', 'list_splat_pattern'), ('symbol', 'typed_default_parameter'), ('str', ','), ('symbol', 'identifier'), ('symbol', 'list_splat_pattern'), ('symbol', 'tuple_pattern')}
  MEMBER: (SYMBOL typed_parameter) 
    -----cset:  1 {('symbol', 'typed_parameter')} 
    -----ahead:  10 {('blank', None), ('symbol', 'dictionary_splat_pattern'), ('symbol', 'default_parameter'), ('symbol', 'typed_parameter'), ('alias_symbol', 'list_splat_pattern'), ('symbol', 'typed_default_parameter'), ('str', ','), ('symbol', 'list_splat_pattern'), ('symbol', 'identifier'), ('symbol', 'tuple_pattern')}
  MEMBER: (SYMBOL default_parameter) 
    -----cset:  1 {('symbol', 'default_parameter')} 
    -----ahead:  10 {('blank', None), ('symbol', 'dictionary_splat_pattern'), ('symbol', 'default_parameter'), ('symbol', 'typed_parameter'), ('alias_symbol', 'list_splat_pattern'), ('symbol', 'typed_default_parameter'), ('str', ','), ('symbol', 'list_splat_pattern'), ('symbol', 'identifier'), ('symbol', 'tuple_pattern')}
  MEMBER: (SYMBOL typed_default_parameter) 
    -----cset:  1 {('symbol', 'typed_default_parameter')} 
    -----ahead:  10 {('blank', None), ('symbol', 'dictionary_splat_pattern'), ('symbol', 'default_parameter'), ('symbol', 'typed_parameter'), ('alias_symbol', 'list_splat_pattern'), ('symbol', 'typed_default_parameter'), ('str', ','), ('symbol', 'list_splat_pattern'), ('symbol', 'identifier'), ('symbol', 'tuple_pattern')}
  MEMBER: (SYMBOL list_splat_pattern) 
    -----cset:  1 {('symbol', 'list_splat_pattern')} 
    -----ahead:  10 {('blank', None), ('symbol', 'dictionary_splat_pattern'), ('symbol', 'default_parameter'), ('symbol', 'typed_parameter'), ('alias_symbol', 'list_splat_pattern'), ('symbol', 'typed_default_parameter'), ('str', ','), ('symbol', 'list_splat_pattern'), ('symbol', 'identifier'), ('symbol', 'tuple_pattern')}
  MEMBER: (SYMBOL tuple_pattern) 
    -----cset:  1 {('symbol', 'tuple_pattern')} 
    -----ahead:  10 {('blank', None), ('symbol', 'dictionary_splat_pattern'), ('symbol', 'default_parameter'), ('symbol', 'typed_parameter'), ('alias_symbol', 'list_splat_pattern'), ('symbol', 'typed_default_parameter'), ('str', ','), ('symbol', 'list_splat_pattern'), ('symbol', 'identifier'), ('symbol', 'tuple_pattern')}
  MEMBER: (ALIAS True list_splat_pattern (STR *)) 
    -----cset:  1 {('alias_symbol', 'list_splat_pattern')} 
    -----ahead:  10 {('blank', None), ('symbol', 'dictionary_splat_pattern'), ('symbol', 'default_parameter'), ('symbol', 'typed_parameter'), ('alias_symbol', 'list_splat_pattern'), ('symbol', 'typed_default_parameter'), ('str', ','), ('symbol', 'list_splat_pattern'), ('symbol', 'identifier'), ('symbol', 'tuple_pattern')}
  MEMBER: (SYMBOL dictionary_splat_pattern) 
    -----cset:  1 {('symbol', 'dictionary_splat_pattern')} 
    -----ahead:  10 {('symbol', 'dictionary_splat_pattern'), ('blank', None), ('symbol', 'default_parameter'), ('symbol', 'typed_parameter'), ('alias_symbol', 'list_splat_pattern'), ('symbol', 'typed_default_parameter'), ('str', ','), ('symbol', 'list_splat_pattern'), ('symbol', 'identifier'), ('symbol', 'tuple_pattern')}
-------------------------------- CHOICE: 7  ahead_size: 104 --------------------------------
  MEMBER: (SYMBOL identifier) 
    -----cset:  1 {('symbol', 'identifier')} 
    -----ahead:  95 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL keyword_identifier) 
    -----cset:  1 {('alias_symbol', 'identifier')} 
    -----ahead:  104 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL subscript) 
    -----cset:  1 {('symbol', 'subscript')} 
    -----ahead:  95 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL attribute) 
    -----cset:  1 {('symbol', 'attribute')} 
    -----ahead:  95 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL list_splat_pattern) 
    -----cset:  1 {('symbol', 'list_splat_pattern')} 
    -----ahead:  95 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL tuple_pattern) 
    -----cset:  1 {('symbol', 'tuple_pattern')} 
    -----ahead:  95 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL list_pattern) 
    -----cset:  1 {('symbol', 'list_pattern')} 
    -----ahead:  95 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('str', '>>')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (SYMBOL _patterns) 
    -----cset:  1 {('symbol', '_patterns')} 
    -----ahead:  2 {('symbol', '_patterns'), ('str', ')')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('blank', None), ('str', ')')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (SYMBOL _patterns) 
    -----cset:  1 {('symbol', '_patterns')} 
    -----ahead:  2 {('symbol', '_patterns'), ('str', ']')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('blank', None), ('str', ']')}
-------------------------------- CHOICE: 4  ahead_size: 54 --------------------------------
  MEMBER: (SYMBOL identifier) 
    -----cset:  1 {('symbol', 'identifier')} 
    -----ahead:  1 {('symbol', 'identifier')}
  MEMBER: (SYMBOL keyword_identifier) 
    -----cset:  1 {('alias_symbol', 'identifier')} 
    -----ahead:  54 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', '_newline'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'keyword_argument'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('alias_symbol', 'block'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')}
  MEMBER: (SYMBOL subscript) 
    -----cset:  1 {('symbol', 'subscript')} 
    -----ahead:  1 {('symbol', 'subscript')}
  MEMBER: (SYMBOL attribute) 
    -----cset:  1 {('symbol', 'attribute')} 
    -----ahead:  1 {('symbol', 'attribute')}
-------------------------------- CHOICE: 4  ahead_size: 54 --------------------------------
  MEMBER: (SYMBOL identifier) 
    -----cset:  1 {('symbol', 'identifier')} 
    -----ahead:  1 {('symbol', 'identifier')}
  MEMBER: (SYMBOL keyword_identifier) 
    -----cset:  1 {('alias_symbol', 'identifier')} 
    -----ahead:  54 {('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', '_newline'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'none'), ('symbol', 'keyword_argument'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('alias_symbol', 'block'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'except_clause'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', '_indent'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'concatenated_string'), ('symbol', 'set'), ('symbol', 'dictionary_splat')}
  MEMBER: (SYMBOL subscript) 
    -----cset:  1 {('symbol', 'subscript')} 
    -----ahead:  1 {('symbol', 'subscript')}
  MEMBER: (SYMBOL attribute) 
    -----cset:  1 {('symbol', 'attribute')} 
    -----ahead:  1 {('symbol', 'attribute')}
-------------------------------- CHOICE: 2  ahead_size: 55 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  54 {('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'set')}
  MEMBER: (ALIAS True lambda (SYMBOL lambda_within_for_in_clause)) 
    -----cset:  1 {('alias_symbol', 'lambda')} 
    -----ahead:  1 {('alias_symbol', 'lambda')}
-------------------------------- CHOICE: 8  ahead_size: 108 --------------------------------
  MEMBER: (SYMBOL comparison_operator) 
    -----cset:  1 {('symbol', 'comparison_operator')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL not_operator) 
    -----cset:  1 {('symbol', 'not_operator')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL boolean_operator) 
    -----cset:  1 {('symbol', 'boolean_operator')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL await) 
    -----cset:  1 {('symbol', 'await')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL lambda) 
    -----cset:  1 {('symbol', 'lambda')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL primary_expression) 
    -----cset:  24 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'subscript')} 
    -----ahead:  108 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('symbol', 'slice'), ('str', 'else'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', '=='), ('str', ']'), ('str', '}'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('symbol', '_expression_within_for_in_clause'), ('str', '['), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('symbol', 'format_specifier'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', 'if'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (SYMBOL conditional_expression) 
    -----cset:  1 {('symbol', 'conditional_expression')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL named_expression) 
    -----cset:  1 {('symbol', 'named_expression')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
-------------------------------- CHOICE: 24  ahead_size: 108 --------------------------------
  MEMBER: (SYMBOL binary_operator) 
    -----cset:  1 {('symbol', 'binary_operator')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL identifier) 
    -----cset:  1 {('symbol', 'identifier')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL keyword_identifier) 
    -----cset:  1 {('alias_symbol', 'identifier')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL string) 
    -----cset:  1 {('symbol', 'string')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL concatenated_string) 
    -----cset:  1 {('symbol', 'concatenated_string')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL integer) 
    -----cset:  1 {('symbol', 'integer')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL float) 
    -----cset:  1 {('symbol', 'float')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL true) 
    -----cset:  1 {('symbol', 'true')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL false) 
    -----cset:  1 {('symbol', 'false')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL none) 
    -----cset:  1 {('symbol', 'none')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL unary_operator) 
    -----cset:  1 {('symbol', 'unary_operator')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL attribute) 
    -----cset:  1 {('symbol', 'attribute')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL subscript) 
    -----cset:  1 {('symbol', 'subscript')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL call) 
    -----cset:  1 {('symbol', 'call')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL list) 
    -----cset:  1 {('symbol', 'list')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL list_comprehension) 
    -----cset:  1 {('symbol', 'list_comprehension')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL dictionary) 
    -----cset:  1 {('symbol', 'dictionary')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL dictionary_comprehension) 
    -----cset:  1 {('symbol', 'dictionary_comprehension')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL set) 
    -----cset:  1 {('symbol', 'set')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL set_comprehension) 
    -----cset:  1 {('symbol', 'set_comprehension')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL tuple) 
    -----cset:  1 {('symbol', 'tuple')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL parenthesized_expression) 
    -----cset:  1 {('symbol', 'parenthesized_expression')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL generator_expression) 
    -----cset:  1 {('symbol', 'generator_expression')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
  MEMBER: (SYMBOL ellipsis) 
    -----cset:  1 {('symbol', 'ellipsis')} 
    -----ahead:  108 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'type_conversion'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'format_specifier'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', 'else'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', 'if'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
-------------------------------- CHOICE: 2  ahead_size: 56 --------------------------------
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR and)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  56 {('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR or)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  55 {('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('symbol', 'set')}
-------------------------------- CHOICE: 13  ahead_size: 69 --------------------------------
  MEMBER: (PREC_LEFT 16 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('str', '+'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'subscript')} 
    -----ahead:  69 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 16 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('str', '-'), ('symbol', 'subscript')} 
    -----ahead:  68 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('str', '*'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'subscript')} 
    -----ahead:  67 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR @)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('str', '@'), ('symbol', 'subscript')} 
    -----ahead:  66 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('str', '/'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'subscript')} 
    -----ahead:  65 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('str', '%'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'subscript')} 
    -----ahead:  64 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR //)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('str', '//'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'subscript')} 
    -----ahead:  63 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_RIGHT 19 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR **)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'subscript')} 
    -----ahead:  62 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('str', '|'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'subscript')} 
    -----ahead:  61 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('str', '&'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'subscript')} 
    -----ahead:  60 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 14 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('str', '^'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'subscript')} 
    -----ahead:  59 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 15 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('str', '<<'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'subscript')} 
    -----ahead:  58 {('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (PREC_LEFT 15 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'set'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('str', '>>'), ('symbol', 'subscript')} 
    -----ahead:  57 {('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
-------------------------------- CHOICE: 3  ahead_size: 70 --------------------------------
  MEMBER: (STR +) 
    -----cset:  1 {('str', '+')} 
    -----ahead:  69 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (STR -) 
    -----cset:  1 {('str', '-')} 
    -----ahead:  69 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (STR ~) 
    -----cset:  1 {('str', '~')} 
    -----ahead:  70 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('str', '~'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
-------------------------------- CHOICE: 11  ahead_size: 78 --------------------------------
  MEMBER: (STR <) 
    -----cset:  1 {('str', '<')} 
    -----ahead:  70 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', '<'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (STR <=) 
    -----cset:  1 {('str', '<=')} 
    -----ahead:  70 {('str', '<='), ('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (STR ==) 
    -----cset:  1 {('str', '==')} 
    -----ahead:  70 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('str', '=='), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (STR !=) 
    -----cset:  1 {('str', '!=')} 
    -----ahead:  70 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('str', '!='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (STR >=) 
    -----cset:  1 {('str', '>=')} 
    -----ahead:  70 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (STR >) 
    -----cset:  1 {('str', '>')} 
    -----ahead:  70 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (STR <>) 
    -----cset:  1 {('str', '<>')} 
    -----ahead:  70 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (STR in) 
    -----cset:  1 {('str', 'in')} 
    -----ahead:  69 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (SEQ (STR not) (STR in)) 
    -----cset:  2 {('str', 'not'), ('str', 'in')} 
    -----ahead:  70 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (STR is) 
    -----cset:  1 {('str', 'is')} 
    -----ahead:  70 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', 'is'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (SEQ (STR is) (STR not)) 
    -----cset:  2 {('str', 'not'), ('str', 'is')} 
    -----ahead:  71 {('str', '^'), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('symbol', 'conditional_expression'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', 'is'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
-------------------------------- CHOICE: 2  ahead_size: 79 --------------------------------
  MEMBER: (SYMBOL lambda_parameters) 
    -----cset:  1 {('symbol', 'lambda_parameters')} 
    -----ahead:  79 {('str', '^'), ('str', '<='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'lambda_parameters'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('str', '!='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', 'is'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  78 {('str', '^'), ('str', '<='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('str', '!='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', 'is'), ('str', '>>'), ('symbol', 'set')}
-------------------------------- CHOICE: 2  ahead_size: 4 --------------------------------
  MEMBER: (SYMBOL lambda_parameters) 
    -----cset:  1 {('symbol', 'lambda_parameters')} 
    -----ahead:  3 {('symbol', 'lambda_parameters'), ('symbol', '_expression_within_for_in_clause'), ('str', ':')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  3 {('blank', None), ('symbol', '_expression_within_for_in_clause'), ('str', ':')}
-------------------------------- CHOICE: 3  ahead_size: 4 --------------------------------
  MEMBER: (SEQ (STR =) (FIELD right (SYMBOL _right_hand_side))) 
    -----cset:  2 {('symbol', '_right_hand_side'), ('str', '=')} 
    -----ahead:  2 {('symbol', '_right_hand_side'), ('str', '=')}
  MEMBER: (SEQ (STR :) (FIELD type (SYMBOL type))) 
    -----cset:  2 {('symbol', 'type'), ('str', ':')} 
    -----ahead:  2 {('symbol', 'type'), ('str', ':')}
  MEMBER: (SEQ (STR :) (FIELD type (SYMBOL type)) (STR =) (FIELD right (SYMBOL _right_hand_side))) 
    -----cset:  4 {('symbol', 'type'), ('symbol', '_right_hand_side'), ('str', '='), ('str', ':')} 
    -----ahead:  4 {('symbol', 'type'), ('symbol', '_right_hand_side'), ('str', '='), ('str', ':')}
-------------------------------- CHOICE: 13  ahead_size: 14 --------------------------------
  MEMBER: (STR +=) 
    -----cset:  1 {('str', '+=')} 
    -----ahead:  2 {('symbol', '_right_hand_side'), ('str', '+=')}
  MEMBER: (STR -=) 
    -----cset:  1 {('str', '-=')} 
    -----ahead:  2 {('symbol', '_right_hand_side'), ('str', '-=')}
  MEMBER: (STR *=) 
    -----cset:  1 {('str', '*=')} 
    -----ahead:  2 {('str', '*='), ('symbol', '_right_hand_side')}
  MEMBER: (STR /=) 
    -----cset:  1 {('str', '/=')} 
    -----ahead:  2 {('str', '/='), ('symbol', '_right_hand_side')}
  MEMBER: (STR @=) 
    -----cset:  1 {('str', '@=')} 
    -----ahead:  2 {('symbol', '_right_hand_side'), ('str', '@=')}
  MEMBER: (STR //=) 
    -----cset:  1 {('str', '//=')} 
    -----ahead:  2 {('symbol', '_right_hand_side'), ('str', '//=')}
  MEMBER: (STR %=) 
    -----cset:  1 {('str', '%=')} 
    -----ahead:  2 {('str', '%='), ('symbol', '_right_hand_side')}
  MEMBER: (STR **=) 
    -----cset:  1 {('str', '**=')} 
    -----ahead:  2 {('symbol', '_right_hand_side'), ('str', '**=')}
  MEMBER: (STR >>=) 
    -----cset:  1 {('str', '>>=')} 
    -----ahead:  2 {('symbol', '_right_hand_side'), ('str', '>>=')}
  MEMBER: (STR <<=) 
    -----cset:  1 {('str', '<<=')} 
    -----ahead:  2 {('symbol', '_right_hand_side'), ('str', '<<=')}
  MEMBER: (STR &=) 
    -----cset:  1 {('str', '&=')} 
    -----ahead:  2 {('symbol', '_right_hand_side'), ('str', '&=')}
  MEMBER: (STR ^=) 
    -----cset:  1 {('str', '^=')} 
    -----ahead:  2 {('str', '^='), ('symbol', '_right_hand_side')}
  MEMBER: (STR |=) 
    -----cset:  1 {('str', '|=')} 
    -----ahead:  2 {('str', '|='), ('symbol', '_right_hand_side')}
-------------------------------- CHOICE: 2  ahead_size: 105 --------------------------------
  MEMBER: (SYMBOL pattern) 
    -----cset:  7 {('symbol', 'list_pattern'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'list_splat_pattern'), ('symbol', 'tuple_pattern'), ('symbol', 'subscript'), ('alias_symbol', 'identifier')} 
    -----ahead:  104 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('symbol', 'slice'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', '=='), ('str', ']'), ('str', '}'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('symbol', '_expression_within_for_in_clause'), ('str', '['), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (SYMBOL pattern_list) 
    -----cset:  1 {('symbol', 'pattern_list')} 
    -----ahead:  60 {('symbol', 'tuple'), ('str', '%='), ('symbol', 'call'), ('symbol', 'not_operator'), ('str', '//='), ('str', '+='), ('symbol', 'dictionary'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('str', '&='), ('symbol', 'type'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'attribute'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('str', '/='), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('symbol', 'none'), ('str', '@='), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'pattern_list'), ('symbol', 'conditional_expression'), ('symbol', 'list'), ('str', '*='), ('alias_symbol', 'block'), ('str', ','), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'expression_list'), ('symbol', 'true'), ('str', '='), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', '_indent'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', '_right_hand_side'), ('str', '<<='), ('symbol', 'concatenated_string'), ('str', '>>='), ('symbol', 'set'), ('str', '|=')}
-------------------------------- CHOICE: 2  ahead_size: 94 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (SEQ {'type': 'REPEAT1', 'content': {'type': 'SEQ', 'members': [{'type': 'STRING', 'value': ',', '_direct_cset': {('str', ',')}, '_sym_ahead_set': {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('str', '>>')}}, {'type': 'SYMBOL', 'name': 'pattern', '_direct_cset': {('symbol', 'list_pattern'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'list_splat_pattern'), ('symbol', 'tuple_pattern'), ('symbol', 'subscript'), ('alias_symbol', 'identifier')}, '_sym_ahead_set': {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('str', '<='), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', '=='), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}}], '_direct_cset': {('alias_symbol', 'identifier'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'list_splat_pattern'), ('symbol', 'tuple_pattern'), ('symbol', 'subscript')}, '_sym_ahead_set': {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('str', '>>')}}, '_direct_cset': {('alias_symbol', 'identifier'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'list_splat_pattern'), ('symbol', 'tuple_pattern'), ('symbol', 'subscript')}, '_sym_ahead_set': {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('str', '>>')}} (CHOICE (STR ,) | (BLANK))) 
    -----cset:  9 {('blank', None), ('alias_symbol', 'identifier'), ('str', ','), ('symbol', 'list_pattern'), ('symbol', 'attribute'), ('symbol', 'identifier'), ('symbol', 'list_splat_pattern'), ('symbol', 'tuple_pattern'), ('symbol', 'subscript')} 
    -----ahead:  94 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', '='), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('str', '>>')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 5  ahead_size: 97 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  94 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('str', '/='), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'set'), ('str', '>>')}
  MEMBER: (SYMBOL expression_list) 
    -----cset:  1 {('symbol', 'expression_list')} 
    -----ahead:  1 {('symbol', 'expression_list')}
  MEMBER: (SYMBOL assignment) 
    -----cset:  1 {('symbol', 'assignment')} 
    -----ahead:  1 {('symbol', 'assignment')}
  MEMBER: (SYMBOL augmented_assignment) 
    -----cset:  1 {('symbol', 'augmented_assignment')} 
    -----ahead:  1 {('symbol', 'augmented_assignment')}
  MEMBER: (SYMBOL yield) 
    -----cset:  1 {('symbol', 'yield')} 
    -----ahead:  1 {('symbol', 'yield')}
-------------------------------- CHOICE: 2  ahead_size: 94 --------------------------------
  MEMBER: (SEQ (STR from) (SYMBOL expression)) 
    -----cset:  32 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'from'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  94 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('str', '/='), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', 'list_splat_pattern'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'set'), ('str', '>>')}
  MEMBER: (CHOICE (SYMBOL _expressions) | (BLANK)) 
    -----cset:  33 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  94 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('symbol', 'set'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('str', '>>')}
-------------------------------- CHOICE: 2  ahead_size: 94 --------------------------------
  MEMBER: (SYMBOL _expressions) 
    -----cset:  32 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('symbol', 'expression_list'), ('symbol', 'true'), ('symbol', 'lambda'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  94 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', '=='), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 97 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  97 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('symbol', 'slice'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', ']'), ('str', '=='), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (SYMBOL slice) 
    -----cset:  1 {('symbol', 'slice')} 
    -----ahead:  97 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('str', ']'), ('symbol', 'dictionary'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('symbol', 'set'), ('str', '>>')}
-------------------------------- CHOICE: 2  ahead_size: 97 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  96 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', ']'), ('str', '=='), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (SYMBOL slice) 
    -----cset:  1 {('symbol', 'slice')} 
    -----ahead:  4 {('blank', None), ('str', ','), ('symbol', 'slice'), ('str', ']')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  2 {('str', ','), ('str', ']')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('blank', None), ('str', ']')}
-------------------------------- CHOICE: 2  ahead_size: 98 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  98 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('symbol', 'slice'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', ']'), ('str', '=='), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('str', '['), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  98 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('symbol', 'set'), ('str', '>>')}
-------------------------------- CHOICE: 2  ahead_size: 98 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  98 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('symbol', 'slice'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', ']'), ('str', '=='), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('str', '['), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  98 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('symbol', 'set'), ('str', '>>')}
-------------------------------- CHOICE: 2  ahead_size: 98 --------------------------------
  MEMBER: (SEQ (STR :) (CHOICE (SYMBOL expression) | (BLANK))) 
    -----cset:  33 {('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'unary_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('alias_symbol', 'identifier'), ('symbol', 'list_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('symbol', 'true'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'await'), ('symbol', 'string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  98 {('str', '^'), ('str', '<='), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('symbol', 'set'), ('str', '>>')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 98 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  98 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('symbol', 'slice'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', ']'), ('str', '=='), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('str', '['), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (SYMBOL generator_expression) 
    -----cset:  1 {('symbol', 'generator_expression')} 
    -----ahead:  1 {('symbol', 'generator_expression')}
  MEMBER: (SYMBOL argument_list) 
    -----cset:  1 {('symbol', 'argument_list')} 
    -----ahead:  1 {('symbol', 'argument_list')}
-------------------------------- CHOICE: 3  ahead_size: 5 --------------------------------
  MEMBER: (SYMBOL identifier) 
    -----cset:  1 {('symbol', 'identifier')} 
    -----ahead:  3 {('symbol', 'type'), ('symbol', 'identifier'), ('str', ':')}
  MEMBER: (SYMBOL list_splat_pattern) 
    -----cset:  1 {('symbol', 'list_splat_pattern')} 
    -----ahead:  3 {('symbol', 'type'), ('symbol', 'list_splat_pattern'), ('str', ':')}
  MEMBER: (SYMBOL dictionary_splat_pattern) 
    -----cset:  1 {('symbol', 'dictionary_splat_pattern')} 
    -----ahead:  3 {('symbol', 'dictionary_splat_pattern'), ('symbol', 'type'), ('str', ':')}
-------------------------------- CHOICE: 2  ahead_size: 99 --------------------------------
  MEMBER: (SYMBOL identifier) 
    -----cset:  1 {('symbol', 'identifier')} 
    -----ahead:  99 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('symbol', 'integer'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', '='), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('str', '/='), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('symbol', 'set'), ('str', '>>')}
  MEMBER: (SYMBOL keyword_identifier) 
    -----cset:  1 {('alias_symbol', 'identifier')} 
    -----ahead:  99 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('symbol', 'slice'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', '=='), ('str', ']'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('str', '['), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (SYMBOL _collection_elements) 
    -----cset:  1 {('symbol', '_collection_elements')} 
    -----ahead:  2 {('symbol', '_collection_elements'), ('str', ']')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('blank', None), ('str', ']')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (SYMBOL _collection_elements) 
    -----cset:  1 {('symbol', '_collection_elements')} 
    -----ahead:  2 {('symbol', '_collection_elements'), ('str', ')')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('blank', None), ('str', ')')}
-------------------------------- CHOICE: 2  ahead_size: 5 --------------------------------
  MEMBER: (SEQ (CHOICE (SYMBOL pair) | (SYMBOL dictionary_splat)) (REPEAT (SEQ (STR ,) (CHOICE (SYMBOL pair) | (SYMBOL dictionary_splat))))) 
    -----cset:  3 {('str', ','), ('symbol', 'dictionary_splat'), ('symbol', 'pair')} 
    -----ahead:  5 {('blank', None), ('symbol', 'dictionary_splat'), ('symbol', 'pair'), ('str', ','), ('str', '}')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  3 {('blank', None), ('str', '}'), ('str', ',')}
-------------------------------- CHOICE: 2  ahead_size: 5 --------------------------------
  MEMBER: (SYMBOL pair) 
    -----cset:  1 {('symbol', 'pair')} 
    -----ahead:  5 {('str', ','), ('blank', None), ('symbol', 'dictionary_splat'), ('str', '}'), ('symbol', 'pair')}
  MEMBER: (SYMBOL dictionary_splat) 
    -----cset:  1 {('symbol', 'dictionary_splat')} 
    -----ahead:  5 {('str', '}'), ('str', ','), ('blank', None), ('symbol', 'dictionary_splat'), ('symbol', 'pair')}
-------------------------------- CHOICE: 2  ahead_size: 5 --------------------------------
  MEMBER: (SYMBOL pair) 
    -----cset:  1 {('symbol', 'pair')} 
    -----ahead:  4 {('blank', None), ('str', ','), ('str', '}'), ('symbol', 'pair')}
  MEMBER: (SYMBOL dictionary_splat) 
    -----cset:  1 {('symbol', 'dictionary_splat')} 
    -----ahead:  4 {('str', '}'), ('blank', None), ('symbol', 'dictionary_splat'), ('str', ',')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  2 {('str', ','), ('str', '}')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('blank', None), ('str', '}')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (SYMBOL for_in_clause) 
    -----cset:  1 {('symbol', 'for_in_clause')} 
    -----ahead:  1 {('symbol', 'for_in_clause')}
  MEMBER: (SYMBOL if_clause) 
    -----cset:  1 {('symbol', 'if_clause')} 
    -----ahead:  1 {('symbol', 'if_clause')}
-------------------------------- CHOICE: 2  ahead_size: 102 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  101 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('symbol', 'slice'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', ']'), ('str', '=='), ('str', '}'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('str', '['), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (SYMBOL yield) 
    -----cset:  1 {('symbol', 'yield')} 
    -----ahead:  2 {('str', ')'), ('symbol', 'yield')}
-------------------------------- CHOICE: 4  ahead_size: 103 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  103 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('symbol', 'slice'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', ']'), ('str', '=='), ('str', '}'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('str', '['), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (SYMBOL yield) 
    -----cset:  1 {('symbol', 'yield')} 
    -----ahead:  103 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('symbol', 'set'), ('str', '>>')}
  MEMBER: (SYMBOL list_splat) 
    -----cset:  1 {('symbol', 'list_splat')} 
    -----ahead:  103 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('symbol', 'set'), ('str', '>>')}
  MEMBER: (SYMBOL parenthesized_list_splat) 
    -----cset:  1 {('symbol', 'parenthesized_list_splat')} 
    -----ahead:  103 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', ']'), ('str', '=='), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('blank', None), ('str', '='), ('symbol', 'block'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('str', '<'), ('symbol', 'slice'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('symbol', 'list_splat_pattern'), ('symbol', 'set'), ('str', '>>')}
-------------------------------- CHOICE: 4  ahead_size: 103 --------------------------------
  MEMBER: (SYMBOL expression) 
    -----cset:  31 {('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'conditional_expression'), ('symbol', 'comparison_operator'), ('symbol', 'call'), ('symbol', 'not_operator'), ('symbol', 'list'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'set_comprehension'), ('symbol', 'named_expression'), ('symbol', 'true'), ('symbol', 'integer'), ('symbol', 'parenthesized_expression'), ('symbol', 'lambda'), ('symbol', 'unary_operator'), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('symbol', 'ellipsis'), ('symbol', 'float'), ('symbol', 'await'), ('symbol', 'subscript'), ('alias_symbol', 'identifier'), ('symbol', 'string'), ('symbol', 'list_comprehension'), ('symbol', 'dictionary_comprehension'), ('symbol', 'binary_operator'), ('symbol', 'identifier'), ('symbol', 'attribute'), ('symbol', 'concatenated_string'), ('symbol', 'set')} 
    -----ahead:  101 {('str', '^'), ('symbol', 'not_operator'), ('symbol', 'dictionary'), ('symbol', '_newline'), ('symbol', 'integer'), ('str', 'and'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'named_expression'), ('str', ':'), ('str', '&'), ('symbol', 'true'), ('str', 'or'), ('symbol', 'lambda'), ('str', '='), ('symbol', 'generator_expression'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'call'), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '&='), ('symbol', 'type'), ('str', '!='), ('str', '**='), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('symbol', 'conditional_expression'), ('symbol', 'slice'), ('str', ','), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('str', 'is'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('str', ')'), ('str', 'not'), ('str', ']'), ('str', '=='), ('str', '}'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('alias_symbol', 'block'), ('str', '/'), ('blank', None), ('symbol', 'block'), ('str', '@'), ('str', '|='), ('symbol', 'finally_clause'), ('str', '//='), ('str', '+='), ('str', '['), ('symbol', 'unary_operator'), ('str', '//'), ('symbol', 'float'), ('symbol', 'list_comprehension'), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '@='), ('str', '<'), ('str', '.'), ('str', '*='), ('symbol', 'list_pattern'), ('str', '|'), ('symbol', 'list_splat_pattern'), ('str', '>>'), ('symbol', 'set')}
  MEMBER: (SYMBOL yield) 
    -----cset:  1 {('symbol', 'yield')} 
    -----ahead:  3 {('blank', None), ('str', ','), ('symbol', 'yield')}
  MEMBER: (SYMBOL list_splat) 
    -----cset:  1 {('symbol', 'list_splat')} 
    -----ahead:  3 {('symbol', 'list_splat'), ('str', ','), ('blank', None)}
  MEMBER: (SYMBOL parenthesized_list_splat) 
    -----cset:  1 {('symbol', 'parenthesized_list_splat')} 
    -----ahead:  3 {('blank', None), ('symbol', 'parenthesized_list_splat'), ('str', ',')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 2  ahead_size: 107 --------------------------------
  MEMBER: (STR async) 
    -----cset:  1 {('str', 'async')} 
    -----ahead:  107 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('str', 'async'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', '='), ('str', 'for'), ('symbol', 'lambda'), ('str', 'or'), ('blank', None), ('symbol', 'generator_expression'), ('symbol', 'block'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('symbol', 'pattern_list'), ('symbol', 'slice'), ('str', '<'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('symbol', 'set'), ('str', '>>')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  106 {('str', '^'), ('str', '<='), ('symbol', 'argument_list'), ('str', '%='), ('symbol', 'not_operator'), ('str', ')'), ('str', 'not'), ('symbol', 'dictionary'), ('str', '=='), ('str', ']'), ('symbol', '_newline'), ('str', '}'), ('symbol', 'integer'), ('symbol', 'parenthesized_list_splat'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'ellipsis'), ('str', 'and'), ('alias_symbol', 'identifier'), ('symbol', 'attribute'), ('str', '**'), ('symbol', 'none'), ('symbol', 'elif_clause'), ('symbol', 'comparison_operator'), ('symbol', 'list'), ('symbol', 'yield'), ('alias_symbol', 'block'), ('symbol', 'named_expression'), ('str', ':'), ('str', '/'), ('str', '&'), ('symbol', 'true'), ('str', '='), ('str', 'for'), ('blank', None), ('symbol', 'lambda'), ('str', 'or'), ('symbol', 'generator_expression'), ('symbol', 'block'), ('symbol', 'boolean_operator'), ('str', 'as'), ('str', 'from'), ('symbol', 'await'), ('str', '<>'), ('symbol', 'string'), ('symbol', '_comprehension_clauses'), ('str', '@'), ('str', '<<='), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_splat'), ('str', '|='), ('str', '+'), ('symbol', 'tuple'), ('symbol', 'finally_clause'), ('symbol', 'call'), ('str', '//='), ('str', '+='), ('symbol', 'false'), ('symbol', 'set_comprehension'), ('symbol', '_expression_within_for_in_clause'), ('symbol', 'tuple_pattern'), ('symbol', 'list_splat'), ('str', '*'), ('symbol', 'parenthesized_expression'), ('str', '-='), ('str', '['), ('symbol', 'unary_operator'), ('str', '&='), ('str', '//'), ('symbol', 'type'), ('symbol', 'float'), ('str', '!='), ('str', '**='), ('symbol', 'list_comprehension'), ('symbol', 'else_clause'), ('symbol', 'binary_operator'), ('str', '/='), ('symbol', 'identifier'), ('symbol', 'subscript'), ('str', '^='), ('str', 'in'), ('str', '<<'), ('symbol', 'keyword_argument'), ('str', '>='), ('str', '@='), ('symbol', 'conditional_expression'), ('symbol', 'pattern_list'), ('symbol', 'slice'), ('str', '<'), ('str', '.'), ('str', '*='), ('str', ','), ('symbol', 'list_pattern'), ('str', '>'), ('symbol', 'expression_list'), ('symbol', 'except_clause'), ('str', '%'), ('symbol', '_indent'), ('str', '|'), ('symbol', 'dictionary_comprehension'), ('str', '-'), ('symbol', '_right_hand_side'), ('str', '>>='), ('str', 'is'), ('symbol', 'list_splat_pattern'), ('symbol', 'set'), ('str', '>>')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR ,) 
    -----cset:  1 {('str', ',')} 
    -----ahead:  1 {('str', ',')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  1 {('blank', None)}
-------------------------------- CHOICE: 5  ahead_size: 6 --------------------------------
  MEMBER: (SYMBOL interpolation) 
    -----cset:  1 {('symbol', 'interpolation')} 
    -----ahead:  2 {('alias_str', '"'), ('symbol', 'interpolation')}
  MEMBER: (SYMBOL escape_interpolation) 
    -----cset:  1 {('symbol', 'escape_interpolation')} 
    -----ahead:  2 {('alias_str', '"'), ('symbol', 'escape_interpolation')}
  MEMBER: (SYMBOL escape_sequence) 
    -----cset:  1 {('symbol', 'escape_sequence')} 
    -----ahead:  2 {('alias_str', '"'), ('symbol', 'escape_sequence')}
  MEMBER: (SYMBOL not_escape_sequence) 
    -----cset:  1 {('symbol', 'not_escape_sequence')} 
    -----ahead:  2 {('alias_str', '"'), ('symbol', 'not_escape_sequence')}
  MEMBER: (SYMBOL string_content) 
    -----cset:  1 {('symbol', 'string_content')} 
    -----ahead:  2 {('alias_str', '"'), ('symbol', 'string_content')}
-------------------------------- CHOICE: 2  ahead_size: 4 --------------------------------
  MEMBER: (SYMBOL type_conversion) 
    -----cset:  1 {('symbol', 'type_conversion')} 
    -----ahead:  4 {('symbol', 'type_conversion'), ('blank', None), ('symbol', 'format_specifier'), ('str', '}')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  3 {('blank', None), ('symbol', 'format_specifier'), ('str', '}')}
-------------------------------- CHOICE: 2  ahead_size: 3 --------------------------------
  MEMBER: (SYMBOL format_specifier) 
    -----cset:  1 {('symbol', 'format_specifier')} 
    -----ahead:  2 {('symbol', 'format_specifier'), ('str', '}')}
  MEMBER: (BLANK) 
    -----cset:  1 {('blank', None)} 
    -----ahead:  2 {('blank', None), ('str', '}')}
-------------------------------- CHOICE: 2  ahead_size: 2 --------------------------------
  MEMBER: (STR {{) 
    -----cset:  1 {('str', '{{')} 
    -----ahead:  1 {('str', '{{')}
  MEMBER: (STR }}) 
    -----cset:  1 {('str', '}}')} 
    -----ahead:  1 {('str', '}}')}
