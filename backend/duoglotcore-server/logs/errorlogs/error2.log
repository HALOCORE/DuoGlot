=============== Initialization BEGIN ===============

# grm_preprocess py _external_symbols: ['_newline', '_indent', '_dedent', '_string_start', 'string_content', '_string_end']
# grm_preprocess py _aliased_symbols: {'identifier', 'list_splat_pattern', 'lambda', 'block', 'parenthesized_expression'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- binary_operator CHOICE: 13  ahead_size: 37 --------------------------------
  MEMBER: (PREC_LEFT 16 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('str', '+'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('symbol', 'dictionary_comprehension'), ('str', '+'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 16 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('str', '-'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('str', '-'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('str', '*'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('str', '*'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR @)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('str', '@'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('str', '@'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('str', '/'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('str', '/'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('str', '%'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('str', '%'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR //)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator'), ('str', '//')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator'), ('str', '//')}
  MEMBER: (PREC_RIGHT 19 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR **)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator'), ('str', '**')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('str', '**'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('str', '|'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('str', '|'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('str', '&'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('str', '&'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 14 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('str', '^'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('str', '^'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 15 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('str', '<<'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('str', '<<'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}
  MEMBER: (PREC_LEFT 15 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'false'), ('symbol', 'binary_operator'), ('symbol', 'parenthesized_expression'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'set'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'generator_expression'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'float'), ('symbol', 'identifier'), ('str', '>>'), ('symbol', 'concatenated_string'), ('symbol', 'dictionary_comprehension'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')} 
    -----ahead:  25 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'set'), ('symbol', 'generator_expression'), ('symbol', 'float'), ('symbol', 'dictionary_comprehension'), ('symbol', 'subscript'), ('symbol', 'none'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('alias_symbol', 'identifier'), ('symbol', 'call'), ('symbol', 'list'), ('symbol', 'attribute'), ('symbol', 'ellipsis'), ('symbol', 'dictionary'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('str', '>>'), ('symbol', 'concatenated_string'), ('symbol', 'integer'), ('symbol', 'set_comprehension'), ('symbol', 'string'), ('symbol', 'true'), ('symbol', 'unary_operator')}

# grm_preprocess js _external_symbols: ['_automatic_semicolon', '_template_chars', '_ternary_qmark']
# grm_preprocess js _aliased_symbols: {'statement_identifier', 'shorthand_property_identifier_pattern', 'string_fragment', 'identifier', 'property_identifier', 'call_expression', 'shorthand_property_identifier', 'namespace_export', 'member_expression', 'namespace_import', 'export_specifier', 'import_specifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- binary_expression CHOICE: 25  ahead_size: 61 --------------------------------
  MEMBER: (PREC_LEFT logical_and (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('str', '&&'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('str', '&&'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT logical_or (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('str', '||'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('str', '||'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_shift (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('str', '>>'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('str', '>>'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_shift (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >>>)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('str', '>>>'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('str', '>>>'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_shift (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('str', '<<'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('str', '<<'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT bitwise_and (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('str', '&'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('str', '&'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT bitwise_xor (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('str', '^'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('str', '^'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT bitwise_or (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('str', '|'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('str', '|'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_plus (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('str', '+'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('str', '+'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_plus (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('str', '-'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('str', '-'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_times (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('str', '*'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('str', '*'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_times (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('str', '/'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('str', '/'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_times (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('str', '%'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('str', '%'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_exp (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR **)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('str', '**'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('str', '**'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('str', '<'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('str', '<'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('str', '<='), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('str', '<='), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_equality (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('str', '=='), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('str', '=='), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_equality (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ===)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('str', '==='), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('str', '==='), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_equality (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('str', '!='), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('str', '!='), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_equality (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR !==)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('str', '!=='), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('str', '!=='), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('str', '>='), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('str', '>='), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('str', '>'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('str', '>'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT ternary (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ??)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('str', '??'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('str', '??'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR instanceof)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('str', 'instanceof'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('str', 'instanceof'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR in)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('str', 'in'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'class'), ('symbol', 'generator_function'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'this'), ('symbol', 'await_expression'), ('symbol', 'assignment_expression'), ('symbol', 'undefined'), ('symbol', 'arrow_function'), ('symbol', 'jsx_fragment'), ('symbol', 'call_expression'), ('symbol', 'member_expression'), ('symbol', 'regex'), ('symbol', 'yield_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'object'), ('symbol', 'update_expression'), ('symbol', 'jsx_element'), ('symbol', 'augmented_assignment_expression'), ('alias_symbol', 'identifier'), ('str', 'in'), ('symbol', 'super'), ('symbol', 'meta_property'), ('symbol', 'import'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'number'), ('symbol', 'string'), ('symbol', 'new_expression'), ('symbol', 'true'), ('symbol', 'array'), ('symbol', 'null'), ('symbol', 'function')}

# grm_preprocess cpp _external_symbols: ['raw_string_literal']
# grm_preprocess cpp _aliased_symbols: {'statement_identifier', 'preproc_ifdef', 'array_declarator', 'pointer_declarator', 'field_identifier', 'parenthesized_declarator', 'unary_expression', 'argument_list', 'binary_expression', 'call_expression', 'parenthesized_expression', 'dependent_name', 'preproc_else', 'namespace_identifier', 'preproc_elif', 'preproc_if', 'reference_declarator', 'parameter_pack_expansion', 'declaration', 'attributed_statement', 'function_declarator', 'attributed_declarator', 'function_definition', 'qualified_identifier', 'type_identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- preproc_binary_expression CHOICE: 18  ahead_size: 26 --------------------------------
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('str', '+'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('str', '+'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('str', '-'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('str', '-'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('str', '*'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('str', '*'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('str', '/'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('str', '/'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('str', '%'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('str', '%'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 1 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('str', '||'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('str', '||'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 2 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('str', '&&'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('str', '&&'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 3 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('str', '|'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('str', '|'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 4 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('str', '^'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('str', '^'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 5 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('str', '&'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('str', '&'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('str', '=='), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('str', '=='), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('str', '!='), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '!='), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR >)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('str', '>'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('str', '>'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR >=)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('str', '>='), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('str', '>='), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR <=)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('str', '<='), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('str', '<='), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR <)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('str', '<'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('str', '<'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('str', '<<'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('str', '<<'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('symbol', 'identifier'), ('str', '>>'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')} 
    -----ahead:  9 {('symbol', 'identifier'), ('str', '>>'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'preproc_defined'), ('alias_symbol', 'call_expression'), ('alias_symbol', 'unary_expression')}
-------------------------------- binary_expression CHOICE: 18  ahead_size: 50 --------------------------------
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('str', '+'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('str', '+'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('str', '-'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('str', '-'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('str', '*'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('str', '*'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('str', '/'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('str', '/'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('str', '%'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('str', '%'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 1 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('str', '||'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('str', '||'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 2 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('str', '&&'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('str', '&&'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 3 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('str', '|'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('str', '|'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 4 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('str', '^'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('str', '^'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 5 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('str', '&'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('str', '&'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('str', '=='), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('str', '=='), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('str', '!='), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('str', '!='), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('str', '>'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('str', '>'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('str', '>='), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('str', '>='), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('str', '<='), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('str', '<='), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('str', '<'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('str', '<'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('str', '<<'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('str', '<<'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('str', '>>'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'parenthesized_expression'), ('symbol', 'number_literal'), ('symbol', 'cast_expression'), ('symbol', 'char_literal'), ('symbol', 'unary_expression'), ('symbol', 'co_await_expression'), ('symbol', 'nullptr'), ('symbol', 'lambda_expression'), ('symbol', 'this'), ('symbol', 'raw_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'template_function'), ('symbol', 'call_expression'), ('symbol', 'update_expression'), ('symbol', 'sizeof_expression'), ('symbol', 'delete_expression'), ('symbol', 'string_literal'), ('symbol', 'compound_literal_expression'), ('symbol', 'field_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'identifier'), ('str', '>>'), ('symbol', 'conditional_expression'), ('symbol', 'concatenated_string'), ('symbol', 'binary_expression'), ('symbol', 'new_expression'), ('symbol', 'qualified_identifier'), ('symbol', 'true'), ('symbol', 'user_defined_literal'), ('symbol', 'null')}

# grm_preprocess cs _external_symbols: ['_preproc_directive_end']
# grm_preprocess cs _aliased_symbols: {'base_list', 'prefix_unary_expression', 'integer_literal', 'verbatim_string_literal', 'label_name', 'binary_expression', 'parameter_modifier', 'parenthesized_expression'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- binary_pattern CHOICE: 2  ahead_size: 12 --------------------------------
  MEMBER: (PREC_LEFT 8 (SEQ (FIELD left (SYMBOL _pattern)) (FIELD operator (STR and)) (FIELD right (SYMBOL _pattern)))) 
    -----cset:  11 {('symbol', 'var_pattern'), ('symbol', 'discard'), ('symbol', 'recursive_pattern'), ('symbol', 'parenthesized_pattern'), ('symbol', 'type_pattern'), ('str', 'and'), ('symbol', 'declaration_pattern'), ('symbol', 'relational_pattern'), ('symbol', 'binary_pattern'), ('symbol', 'constant_pattern'), ('symbol', 'negated_pattern')} 
    -----ahead:  11 {('symbol', 'var_pattern'), ('symbol', 'discard'), ('symbol', 'recursive_pattern'), ('symbol', 'parenthesized_pattern'), ('symbol', 'type_pattern'), ('symbol', 'declaration_pattern'), ('symbol', 'binary_pattern'), ('str', 'and'), ('symbol', 'relational_pattern'), ('symbol', 'constant_pattern'), ('symbol', 'negated_pattern')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _pattern)) (FIELD operator (STR or)) (FIELD right (SYMBOL _pattern)))) 
    -----cset:  11 {('symbol', 'binary_pattern'), ('symbol', 'var_pattern'), ('symbol', 'discard'), ('symbol', 'recursive_pattern'), ('symbol', 'parenthesized_pattern'), ('symbol', 'type_pattern'), ('symbol', 'declaration_pattern'), ('symbol', 'relational_pattern'), ('str', 'or'), ('symbol', 'constant_pattern'), ('symbol', 'negated_pattern')} 
    -----ahead:  11 {('symbol', 'var_pattern'), ('symbol', 'discard'), ('symbol', 'recursive_pattern'), ('symbol', 'parenthesized_pattern'), ('symbol', 'type_pattern'), ('symbol', 'declaration_pattern'), ('symbol', 'binary_pattern'), ('str', 'or'), ('symbol', 'relational_pattern'), ('symbol', 'constant_pattern'), ('symbol', 'negated_pattern')}
-------------------------------- binary_expression CHOICE: 19  ahead_size: 72 --------------------------------
  MEMBER: (PREC_LEFT 5 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('str', '&&'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('str', '&&'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 4 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('str', '||'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('str', '||'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('str', '>>'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('str', '>>'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('str', '<<'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('str', '<<'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 8 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('str', '&'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('str', '&'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('str', '^'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('str', '^'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('str', '|'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('str', '|'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('str', '+'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('str', '+'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('str', '-'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('str', '-'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('str', '*'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('str', '*'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('str', '/'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('str', '/'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('str', '%'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('str', '%'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('str', '<'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('str', '<'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('str', '<='), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('str', '<='), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('str', '=='), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('str', '=='), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('str', '!='), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('str', '!='), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('str', '>='), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('str', '>='), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('str', '>'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('str', '>'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
  MEMBER: (PREC_RIGHT 3 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ??)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'cast_expression'), ('symbol', 'integer_literal'), ('symbol', 'null_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'this_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'query_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('symbol', 'is_pattern_expression'), ('str', '??'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global')} 
    -----ahead:  54 {('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'cast_expression'), ('symbol', 'null_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'await_expression'), ('symbol', 'as_expression'), ('symbol', 'verbatim_string_literal'), ('symbol', 'assignment_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'range_expression'), ('symbol', 'with_expression'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'ref_expression'), ('symbol', 'throw_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'checked_expression'), ('symbol', 'boolean_literal'), ('symbol', 'string_literal'), ('symbol', 'prefix_unary_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'tuple_expression'), ('str', '??'), ('symbol', 'conditional_access_expression'), ('symbol', 'conditional_expression'), ('symbol', 'array_creation_expression'), ('symbol', 'real_literal'), ('symbol', 'base_expression'), ('symbol', 'global'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'integer_literal'), ('symbol', 'element_binding_expression'), ('symbol', 'lambda_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'default_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'character_literal'), ('symbol', 'size_of_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'this_expression'), ('symbol', 'type_of_expression'), ('symbol', 'query_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'invocation_expression'), ('symbol', 'identifier'), ('symbol', 'binary_expression'), ('symbol', 'is_expression'), ('symbol', 'generic_name')}
-------------------------------- preproc_binary_expression CHOICE: 4  ahead_size: 11 --------------------------------
  MEMBER: (PREC_LEFT 4 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  8 {('str', '||'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('alias_symbol', 'prefix_unary_expression'), ('alias_symbol', 'verbatim_string_literal'), ('alias_symbol', 'integer_literal')} 
    -----ahead:  8 {('str', '||'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('alias_symbol', 'prefix_unary_expression'), ('alias_symbol', 'verbatim_string_literal'), ('alias_symbol', 'integer_literal')}
  MEMBER: (PREC_LEFT 5 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  8 {('symbol', 'identifier'), ('str', '&&'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('alias_symbol', 'prefix_unary_expression'), ('alias_symbol', 'verbatim_string_literal'), ('alias_symbol', 'integer_literal')} 
    -----ahead:  8 {('str', '&&'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('alias_symbol', 'prefix_unary_expression'), ('alias_symbol', 'verbatim_string_literal'), ('alias_symbol', 'integer_literal')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  8 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '=='), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('alias_symbol', 'prefix_unary_expression'), ('alias_symbol', 'verbatim_string_literal'), ('alias_symbol', 'integer_literal')} 
    -----ahead:  8 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '=='), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('alias_symbol', 'prefix_unary_expression'), ('alias_symbol', 'verbatim_string_literal'), ('alias_symbol', 'integer_literal')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  8 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '!='), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('alias_symbol', 'prefix_unary_expression'), ('alias_symbol', 'verbatim_string_literal'), ('alias_symbol', 'integer_literal')} 
    -----ahead:  8 {('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '!='), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('alias_symbol', 'prefix_unary_expression'), ('alias_symbol', 'verbatim_string_literal'), ('alias_symbol', 'integer_literal')}

# grm_preprocess java _external_symbols: []
# grm_preprocess java _aliased_symbols: {'identifier', 'type_identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- binary_expression CHOICE: 19  ahead_size: 50 --------------------------------
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('str', '>'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('str', '>'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('str', '<'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('str', '<'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('str', '>='), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('str', '>='), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('str', '<='), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('str', '<='), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('str', '=='), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('str', '=='), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('str', '!='), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('str', '!='), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 5 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('str', '&&'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('str', '&&'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 4 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('str', '||'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('str', '||'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('str', '+'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('str', '+'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('str', '-'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('str', '-'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('str', '*'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('str', '*'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('str', '/'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('str', '/'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 8 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('str', '&'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('str', '&'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('str', '|'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('str', '|'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('str', '^'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('str', '^'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('str', '%'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('str', '%'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('str', '<<'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('str', '<<'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('str', '>>'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('str', '>>'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >>>)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('str', '>>>'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'switch_expression'), ('symbol', 'parenthesized_expression'), ('str', '>>>'), ('symbol', 'ternary_expression'), ('symbol', 'cast_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'unary_expression'), ('symbol', 'instanceof_expression'), ('symbol', 'null_literal'), ('symbol', 'lambda_expression'), ('symbol', 'field_access'), ('symbol', 'object_creation_expression'), ('symbol', 'this'), ('symbol', 'assignment_expression'), ('symbol', 'array_access'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'octal_integer_literal'), ('symbol', 'hex_integer_literal'), ('symbol', 'method_reference'), ('symbol', 'update_expression'), ('symbol', 'binary_integer_literal'), ('alias_symbol', 'identifier'), ('symbol', 'string_literal'), ('symbol', 'method_invocation'), ('symbol', 'identifier'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_integer_literal'), ('symbol', 'binary_expression'), ('symbol', 'true'), ('symbol', 'hex_floating_point_literal')}
=============== Initialization END ===============
 * Serving Flask app "server_trans" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: on
=============== Initialization BEGIN ===============

# grm_preprocess py _external_symbols: ['_newline', '_indent', '_dedent', '_string_start', 'string_content', '_string_end']
# grm_preprocess py _aliased_symbols: {'lambda', 'list_splat_pattern', 'block', 'identifier', 'parenthesized_expression'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- binary_operator CHOICE: 13  ahead_size: 37 --------------------------------
  MEMBER: (PREC_LEFT 16 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('str', '+'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('str', '+'), ('symbol', 'identifier')}
  MEMBER: (PREC_LEFT 16 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('str', '-'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('str', '-'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('str', '*')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('str', '*'), ('symbol', 'set_comprehension'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR @)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('str', '@')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier'), ('str', '@')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('str', '/'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('symbol', 'unary_operator'), ('str', '/'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('str', '%'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('str', '%'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}
  MEMBER: (PREC_LEFT 17 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR //)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('str', '//'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('str', '//'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}
  MEMBER: (PREC_RIGHT 19 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR **)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('str', '**'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('str', '**'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('str', '|'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('str', '|'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('str', '&'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('str', '&'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}
  MEMBER: (PREC_LEFT 14 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('str', '^'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('str', '^'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}
  MEMBER: (PREC_LEFT 15 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('symbol', 'dictionary'), ('str', '<<'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('str', '<<'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}
  MEMBER: (PREC_LEFT 15 (SEQ (FIELD left (SYMBOL primary_expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL primary_expression)))) 
    -----cset:  25 {('symbol', 'call'), ('symbol', 'set_comprehension'), ('symbol', 'false'), ('str', '>>'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'identifier'), ('symbol', 'none'), ('symbol', 'ellipsis')} 
    -----ahead:  25 {('symbol', 'call'), ('symbol', 'false'), ('str', '>>'), ('symbol', 'dictionary'), ('symbol', 'binary_operator'), ('symbol', 'list_comprehension'), ('symbol', 'concatenated_string'), ('symbol', 'float'), ('symbol', 'generator_expression'), ('symbol', 'string'), ('symbol', 'list'), ('symbol', 'integer'), ('symbol', 'attribute'), ('symbol', 'parenthesized_expression'), ('symbol', 'true'), ('symbol', 'subscript'), ('symbol', 'tuple'), ('symbol', 'none'), ('symbol', 'ellipsis'), ('symbol', 'set_comprehension'), ('symbol', 'unary_operator'), ('symbol', 'set'), ('alias_symbol', 'identifier'), ('symbol', 'dictionary_comprehension'), ('symbol', 'identifier')}

# grm_preprocess js _external_symbols: ['_automatic_semicolon', '_template_chars', '_ternary_qmark']
# grm_preprocess js _aliased_symbols: {'call_expression', 'shorthand_property_identifier', 'import_specifier', 'shorthand_property_identifier_pattern', 'identifier', 'member_expression', 'export_specifier', 'namespace_import', 'string_fragment', 'property_identifier', 'statement_identifier', 'namespace_export'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- binary_expression CHOICE: 25  ahead_size: 61 --------------------------------
  MEMBER: (PREC_LEFT logical_and (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('str', '&&'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('str', '&&'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT logical_or (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('str', '||'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('str', '||'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_shift (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('str', '>>'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('str', '>>'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_shift (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >>>)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('str', '>>>'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('str', '>>>'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_shift (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('str', '<<'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('str', '<<'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT bitwise_and (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('str', '&'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('str', '&'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT bitwise_xor (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('str', '^'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('str', '^'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT bitwise_or (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('str', '|'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('str', '|'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_plus (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('str', '+'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('str', '+'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_plus (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('str', '-'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('str', '-'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_times (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('str', '*'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('str', '*'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_times (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('str', '/'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('str', '/'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_times (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('str', '%'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('str', '%'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_exp (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR **)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('str', '**'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('str', '**'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('str', '<'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('str', '<'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('str', '<='), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('str', '<='), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_equality (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('str', '=='), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('str', '=='), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_equality (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ===)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('str', '==='), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('str', '==='), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_equality (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('str', '!='), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('str', '!='), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_equality (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR !==)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('str', '!=='), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('str', '!=='), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('str', '>='), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('str', '>='), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('str', '>'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('str', '>'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT ternary (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ??)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex'), ('str', '??')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex'), ('str', '??')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR instanceof)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('str', 'instanceof'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('str', 'instanceof'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}
  MEMBER: (PREC_LEFT binary_relation (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR in)) (FIELD right (SYMBOL expression)))) 
    -----cset:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('str', 'in'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')} 
    -----ahead:  37 {('symbol', 'false'), ('symbol', 'meta_property'), ('symbol', 'array'), ('symbol', 'update_expression'), ('symbol', 'yield_expression'), ('symbol', 'subscript_expression'), ('symbol', 'member_expression'), ('symbol', 'string'), ('symbol', 'await_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'jsx_self_closing_element'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'generator_function'), ('symbol', 'jsx_element'), ('symbol', 'import'), ('symbol', 'new_expression'), ('str', 'in'), ('symbol', 'object'), ('symbol', 'arrow_function'), ('symbol', 'undefined'), ('symbol', 'augmented_assignment_expression'), ('symbol', 'null'), ('symbol', 'function'), ('symbol', 'class'), ('symbol', 'unary_expression'), ('symbol', 'template_string'), ('symbol', 'super'), ('symbol', 'call_expression'), ('symbol', 'number'), ('symbol', 'binary_expression'), ('alias_symbol', 'identifier'), ('symbol', 'assignment_expression'), ('symbol', 'ternary_expression'), ('symbol', 'jsx_fragment'), ('symbol', 'identifier'), ('symbol', 'regex')}

# grm_preprocess cpp _external_symbols: ['raw_string_literal']
# grm_preprocess cpp _aliased_symbols: {'function_definition', 'namespace_identifier', 'field_identifier', 'argument_list', 'preproc_ifdef', 'unary_expression', 'preproc_if', 'preproc_else', 'parameter_pack_expansion', 'declaration', 'type_identifier', 'pointer_declarator', 'preproc_elif', 'array_declarator', 'binary_expression', 'attributed_declarator', 'parenthesized_expression', 'reference_declarator', 'attributed_statement', 'parenthesized_declarator', 'call_expression', 'function_declarator', 'qualified_identifier', 'dependent_name', 'statement_identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- preproc_binary_expression CHOICE: 18  ahead_size: 26 --------------------------------
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '+'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '+'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '-'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('str', '-'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '*'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('str', '*'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('str', '/'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('str', '/'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('str', '%'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('str', '%'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 1 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '||'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '||'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 2 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('str', '&&'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('str', '&&'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 3 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '|'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('str', '|'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 4 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('str', '^'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('str', '^'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 5 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '&'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '&'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '=='), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '=='), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '!='), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '!='), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR >)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('str', '>'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '>'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR >=)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '>='), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '>='), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR <=)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '<='), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '<='), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR <)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '<'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '<'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '<<'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '<<'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  9 {('alias_symbol', 'unary_expression'), ('symbol', 'char_literal'), ('str', '>>'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')} 
    -----ahead:  9 {('alias_symbol', 'unary_expression'), ('str', '>>'), ('symbol', 'char_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'call_expression'), ('symbol', 'preproc_defined')}
-------------------------------- binary_expression CHOICE: 18  ahead_size: 50 --------------------------------
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('str', '+'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('str', '+'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('str', '-'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('str', '-'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('str', '*'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('str', '*'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('str', '/'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('str', '/'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('str', '%'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('str', '%'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 1 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('str', '||'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('str', '||'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 2 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('str', '&&'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('str', '&&'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 3 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('str', '|'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('str', '|'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 4 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('str', '^'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('str', '^'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 5 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('str', '&'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('str', '&'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('str', '=='), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('str', '=='), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('str', '!='), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('str', '!='), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('str', '>'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('str', '>'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('str', '>='), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('str', '>='), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('str', '<='), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('str', '<='), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('str', '<'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('str', '<'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('str', '<<'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('str', '<<'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  33 {('symbol', 'false'), ('str', '>>'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')} 
    -----ahead:  33 {('symbol', 'false'), ('str', '>>'), ('symbol', 'update_expression'), ('symbol', 'pointer_expression'), ('symbol', 'subscript_expression'), ('symbol', 'delete_expression'), ('symbol', 'conditional_expression'), ('symbol', 'raw_string_literal'), ('symbol', 'concatenated_string'), ('symbol', 'field_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'template_function'), ('symbol', 'nullptr'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'new_expression'), ('symbol', 'parameter_pack_expansion'), ('symbol', 'null'), ('symbol', 'co_await_expression'), ('symbol', 'compound_literal_expression'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'user_defined_literal'), ('symbol', 'sizeof_expression'), ('symbol', 'string_literal'), ('symbol', 'call_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'char_literal'), ('symbol', 'assignment_expression'), ('symbol', 'number_literal'), ('symbol', 'identifier'), ('symbol', 'qualified_identifier')}

# grm_preprocess cs _external_symbols: ['_preproc_directive_end']
# grm_preprocess cs _aliased_symbols: {'base_list', 'prefix_unary_expression', 'integer_literal', 'verbatim_string_literal', 'binary_expression', 'label_name', 'parenthesized_expression', 'parameter_modifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- binary_pattern CHOICE: 2  ahead_size: 12 --------------------------------
  MEMBER: (PREC_LEFT 8 (SEQ (FIELD left (SYMBOL _pattern)) (FIELD operator (STR and)) (FIELD right (SYMBOL _pattern)))) 
    -----cset:  11 {('symbol', 'binary_pattern'), ('symbol', 'recursive_pattern'), ('symbol', 'var_pattern'), ('symbol', 'declaration_pattern'), ('symbol', 'constant_pattern'), ('symbol', 'type_pattern'), ('str', 'and'), ('symbol', 'parenthesized_pattern'), ('symbol', 'negated_pattern'), ('symbol', 'relational_pattern'), ('symbol', 'discard')} 
    -----ahead:  11 {('symbol', 'declaration_pattern'), ('symbol', 'binary_pattern'), ('symbol', 'recursive_pattern'), ('symbol', 'var_pattern'), ('symbol', 'constant_pattern'), ('symbol', 'type_pattern'), ('str', 'and'), ('symbol', 'parenthesized_pattern'), ('symbol', 'negated_pattern'), ('symbol', 'relational_pattern'), ('symbol', 'discard')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _pattern)) (FIELD operator (STR or)) (FIELD right (SYMBOL _pattern)))) 
    -----cset:  11 {('symbol', 'binary_pattern'), ('symbol', 'recursive_pattern'), ('symbol', 'var_pattern'), ('symbol', 'declaration_pattern'), ('symbol', 'constant_pattern'), ('symbol', 'type_pattern'), ('symbol', 'parenthesized_pattern'), ('symbol', 'negated_pattern'), ('symbol', 'relational_pattern'), ('symbol', 'discard'), ('str', 'or')} 
    -----ahead:  11 {('symbol', 'declaration_pattern'), ('str', 'or'), ('symbol', 'binary_pattern'), ('symbol', 'recursive_pattern'), ('symbol', 'var_pattern'), ('symbol', 'constant_pattern'), ('symbol', 'type_pattern'), ('symbol', 'parenthesized_pattern'), ('symbol', 'negated_pattern'), ('symbol', 'relational_pattern'), ('symbol', 'discard')}
-------------------------------- binary_expression CHOICE: 19  ahead_size: 72 --------------------------------
  MEMBER: (PREC_LEFT 5 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('str', '&&'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('str', '&&'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 4 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('str', '||'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('str', '||'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('str', '>>'), ('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('str', '>>'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('str', '<<'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('str', '<<'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 8 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('str', '&'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('str', '&'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('str', '^'), ('symbol', 'element_access_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('str', '^'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('str', '|'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('str', '|'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('str', '+'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('str', '+'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('str', '-'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('str', '-'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('str', '*'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('str', '*'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('str', '/'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('str', '/'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('str', '%'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('str', '%'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('str', '<'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('str', '<'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR <=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('str', '<='), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('str', '<='), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('str', '=='), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('str', '=='), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('str', '!='), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('str', '!='), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >=)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('str', '>='), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('str', '>='), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR >)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('str', '>'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('str', '>'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
  MEMBER: (PREC_RIGHT 3 (SEQ (FIELD left (SYMBOL _expression)) (FIELD operator (STR ??)) (FIELD right (SYMBOL _expression)))) 
    -----cset:  54 {('symbol', 'array_creation_expression'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'checked_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'element_binding_expression'), ('symbol', 'null_literal'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'postfix_unary_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'assignment_expression'), ('symbol', 'query_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'conditional_access_expression'), ('str', '??')} 
    -----ahead:  54 {('symbol', 'array_creation_expression'), ('symbol', 'checked_expression'), ('symbol', 'parenthesized_expression'), ('symbol', 'is_expression'), ('symbol', 'with_expression'), ('symbol', 'boolean_literal'), ('symbol', 'anonymous_object_creation_expression'), ('symbol', 'element_access_expression'), ('symbol', 'null_literal'), ('symbol', 'postfix_unary_expression'), ('symbol', 'type_of_expression'), ('symbol', 'string_literal'), ('symbol', 'binary_expression'), ('symbol', 'ref_type_expression'), ('symbol', 'anonymous_method_expression'), ('symbol', 'tuple_expression'), ('symbol', 'query_expression'), ('symbol', 'conditional_access_expression'), ('str', '??'), ('symbol', 'invocation_expression'), ('symbol', 'conditional_expression'), ('symbol', 'interpolated_string_expression'), ('symbol', 'await_expression'), ('symbol', 'ref_value_expression'), ('symbol', 'character_literal'), ('symbol', 'generic_name'), ('symbol', 'implicit_array_creation_expression'), ('symbol', 'ref_expression'), ('symbol', 'implicit_stack_alloc_array_creation_expression'), ('symbol', 'base_expression'), ('symbol', 'implicit_object_creation_expression'), ('symbol', 'integer_literal'), ('symbol', 'verbatim_string_literal'), ('symbol', 'throw_expression'), ('symbol', 'range_expression'), ('symbol', 'switch_expression'), ('symbol', 'initializer_expression'), ('symbol', 'member_access_expression'), ('symbol', 'as_expression'), ('symbol', 'size_of_expression'), ('symbol', 'cast_expression'), ('symbol', 'default_expression'), ('symbol', 'is_pattern_expression'), ('symbol', 'make_ref_expression'), ('symbol', 'this_expression'), ('symbol', 'object_creation_expression'), ('symbol', 'lambda_expression'), ('symbol', 'real_literal'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'global'), ('symbol', 'stack_alloc_array_creation_expression'), ('symbol', 'prefix_unary_expression'), ('symbol', 'element_binding_expression')}
-------------------------------- preproc_binary_expression CHOICE: 4  ahead_size: 11 --------------------------------
  MEMBER: (PREC_LEFT 4 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  8 {('alias_symbol', 'integer_literal'), ('alias_symbol', 'verbatim_string_literal'), ('str', '||'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'prefix_unary_expression')} 
    -----ahead:  8 {('alias_symbol', 'integer_literal'), ('alias_symbol', 'verbatim_string_literal'), ('str', '||'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'prefix_unary_expression')}
  MEMBER: (PREC_LEFT 5 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  8 {('str', '&&'), ('alias_symbol', 'integer_literal'), ('alias_symbol', 'verbatim_string_literal'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'prefix_unary_expression')} 
    -----ahead:  8 {('str', '&&'), ('alias_symbol', 'integer_literal'), ('alias_symbol', 'verbatim_string_literal'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('alias_symbol', 'prefix_unary_expression')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  8 {('alias_symbol', 'integer_literal'), ('alias_symbol', 'verbatim_string_literal'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '=='), ('alias_symbol', 'prefix_unary_expression')} 
    -----ahead:  8 {('alias_symbol', 'integer_literal'), ('alias_symbol', 'verbatim_string_literal'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '=='), ('alias_symbol', 'prefix_unary_expression')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL _preproc_expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL _preproc_expression)))) 
    -----cset:  8 {('alias_symbol', 'integer_literal'), ('alias_symbol', 'verbatim_string_literal'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '!='), ('alias_symbol', 'prefix_unary_expression')} 
    -----ahead:  8 {('alias_symbol', 'integer_literal'), ('alias_symbol', 'verbatim_string_literal'), ('symbol', 'boolean_literal'), ('alias_symbol', 'binary_expression'), ('symbol', 'identifier'), ('alias_symbol', 'parenthesized_expression'), ('str', '!='), ('alias_symbol', 'prefix_unary_expression')}

# grm_preprocess java _external_symbols: []
# grm_preprocess java _aliased_symbols: {'identifier', 'type_identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
-------------------------------- binary_expression CHOICE: 19  ahead_size: 50 --------------------------------
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('str', '>'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('str', '>'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('str', '<'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('str', '<'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('str', '>='), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('str', '>='), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 10 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('str', '<='), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('str', '<='), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ==)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('str', '=='), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('str', '=='), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 9 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR !=)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('str', '!='), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('str', '!='), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 5 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR &&)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('str', '&&'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('str', '&&'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 4 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ||)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('str', '||'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('str', '||'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR +)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('str', '+'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('str', '+'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 12 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR -)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('str', '-'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('str', '-'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR *)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('str', '*'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('str', '*'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR /)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('str', '/'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('str', '/'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 8 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR &)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('str', '&'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('str', '&'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 6 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR |)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('str', '|'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('str', '|'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 7 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR ^)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('str', '^'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('str', '^'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 13 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR %)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('str', '%'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('str', '%'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR <<)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('str', '<<'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('str', '<<'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >>)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('str', '>>'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('str', '>>'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
  MEMBER: (PREC_LEFT 11 (SEQ (FIELD left (SYMBOL expression)) (FIELD operator (STR >>>)) (FIELD right (SYMBOL expression)))) 
    -----cset:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('str', '>>>'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')} 
    -----ahead:  32 {('symbol', 'false'), ('symbol', 'update_expression'), ('symbol', 'method_reference'), ('symbol', 'array_creation_expression'), ('symbol', 'decimal_floating_point_literal'), ('symbol', 'class_literal'), ('symbol', 'character_literal'), ('symbol', 'parenthesized_expression'), ('symbol', 'this'), ('symbol', 'true'), ('symbol', 'octal_integer_literal'), ('symbol', 'null_literal'), ('symbol', 'decimal_integer_literal'), ('symbol', 'instanceof_expression'), ('symbol', 'switch_expression'), ('symbol', 'hex_integer_literal'), ('str', '>>>'), ('symbol', 'binary_integer_literal'), ('symbol', 'unary_expression'), ('symbol', 'cast_expression'), ('symbol', 'string_literal'), ('symbol', 'object_creation_expression'), ('symbol', 'array_access'), ('symbol', 'binary_expression'), ('symbol', 'lambda_expression'), ('symbol', 'hex_floating_point_literal'), ('alias_symbol', 'identifier'), ('symbol', 'method_invocation'), ('symbol', 'ternary_expression'), ('symbol', 'assignment_expression'), ('symbol', 'identifier'), ('symbol', 'field_access')}
=============== Initialization END ===============
=============== Initialization BEGIN ===============

# grm_preprocess py _external_symbols: ['_newline', '_indent', '_dedent', '_string_start', 'string_content', '_string_end']
# grm_preprocess py _aliased_symbols: {'block', 'parenthesized_expression', 'list_splat_pattern', 'lambda', 'identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess js _external_symbols: ['_automatic_semicolon', '_template_chars', '_ternary_qmark']
# grm_preprocess js _aliased_symbols: {'import_specifier', 'call_expression', 'shorthand_property_identifier_pattern', 'statement_identifier', 'export_specifier', 'namespace_export', 'member_expression', 'property_identifier', 'string_fragment', 'shorthand_property_identifier', 'namespace_import', 'identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess cpp _external_symbols: ['raw_string_literal']
# grm_preprocess cpp _aliased_symbols: {'preproc_else', 'field_identifier', 'parameter_pack_expansion', 'namespace_identifier', 'unary_expression', 'reference_declarator', 'parenthesized_declarator', 'call_expression', 'attributed_declarator', 'qualified_identifier', 'declaration', 'preproc_ifdef', 'dependent_name', 'statement_identifier', 'binary_expression', 'array_declarator', 'function_definition', 'function_declarator', 'attributed_statement', 'preproc_if', 'parenthesized_expression', 'pointer_declarator', 'type_identifier', 'argument_list', 'preproc_elif'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess cs _external_symbols: ['_preproc_directive_end']
# grm_preprocess cs _aliased_symbols: {'verbatim_string_literal', 'prefix_unary_expression', 'integer_literal', 'base_list', 'parenthesized_expression', 'binary_expression', 'parameter_modifier', 'label_name'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess java _external_symbols: []
# grm_preprocess java _aliased_symbols: {'type_identifier', 'identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
=============== Initialization END ===============
=============== Initialization BEGIN ===============

# grm_preprocess py _external_symbols: ['_newline', '_indent', '_dedent', '_string_start', 'string_content', '_string_end']
# grm_preprocess py _aliased_symbols: {'parenthesized_expression', 'lambda', 'identifier', 'block', 'list_splat_pattern'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess js _external_symbols: ['_automatic_semicolon', '_template_chars', '_ternary_qmark']
# grm_preprocess js _aliased_symbols: {'statement_identifier', 'member_expression', 'string_fragment', 'identifier', 'namespace_export', 'shorthand_property_identifier', 'export_specifier', 'import_specifier', 'shorthand_property_identifier_pattern', 'property_identifier', 'call_expression', 'namespace_import'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess cpp _external_symbols: ['raw_string_literal']
# grm_preprocess cpp _aliased_symbols: {'function_declarator', 'call_expression', 'namespace_identifier', 'attributed_declarator', 'declaration', 'array_declarator', 'unary_expression', 'parenthesized_declarator', 'preproc_else', 'function_definition', 'argument_list', 'qualified_identifier', 'pointer_declarator', 'dependent_name', 'statement_identifier', 'parenthesized_expression', 'parameter_pack_expansion', 'preproc_elif', 'type_identifier', 'field_identifier', 'reference_declarator', 'attributed_statement', 'preproc_ifdef', 'binary_expression', 'preproc_if'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess cs _external_symbols: ['_preproc_directive_end']
# grm_preprocess cs _aliased_symbols: {'verbatim_string_literal', 'parenthesized_expression', 'integer_literal', 'prefix_unary_expression', 'parameter_modifier', 'binary_expression', 'base_list', 'label_name'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess java _external_symbols: []
# grm_preprocess java _aliased_symbols: {'identifier', 'type_identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
=============== Initialization END ===============
=============== Initialization BEGIN ===============

# grm_preprocess py _external_symbols: ['_newline', '_indent', '_dedent', '_string_start', 'string_content', '_string_end']
# grm_preprocess py _aliased_symbols: {'identifier', 'list_splat_pattern', 'parenthesized_expression', 'block', 'lambda'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess js _external_symbols: ['_automatic_semicolon', '_template_chars', '_ternary_qmark']
# grm_preprocess js _aliased_symbols: {'shorthand_property_identifier', 'import_specifier', 'identifier', 'property_identifier', 'string_fragment', 'call_expression', 'export_specifier', 'member_expression', 'namespace_import', 'shorthand_property_identifier_pattern', 'namespace_export', 'statement_identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess cpp _external_symbols: ['raw_string_literal']
# grm_preprocess cpp _aliased_symbols: {'binary_expression', 'field_identifier', 'array_declarator', 'parenthesized_expression', 'reference_declarator', 'statement_identifier', 'attributed_declarator', 'parameter_pack_expansion', 'function_definition', 'argument_list', 'declaration', 'type_identifier', 'dependent_name', 'preproc_if', 'preproc_elif', 'preproc_ifdef', 'call_expression', 'pointer_declarator', 'namespace_identifier', 'unary_expression', 'function_declarator', 'qualified_identifier', 'parenthesized_declarator', 'preproc_else', 'attributed_statement'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess cs _external_symbols: ['_preproc_directive_end']
# grm_preprocess cs _aliased_symbols: {'parameter_modifier', 'label_name', 'binary_expression', 'parenthesized_expression', 'prefix_unary_expression', 'integer_literal', 'base_list', 'verbatim_string_literal'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...

# grm_preprocess java _external_symbols: []
# grm_preprocess java _aliased_symbols: {'identifier', 'type_identifier'}
# add _direct_cset to each prod...
# add _sym_ahead_set to each prod...
=============== Initialization END ===============
