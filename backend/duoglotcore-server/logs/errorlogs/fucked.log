

============================ Parsing Source ============================
(module (expression_statement (assignment left: (identifier) right: (true))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (pass_statement))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (identifier))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_content)) (identifier) (identifier)))) (return_statement (identifier)))) (return_statement (binary_operator left: (identifier) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_content)) right: (identifier))))))))
---------------------------
(py.module 0 (py.expression_statement 1 (py.assignment 2 (py.identifier 3 "bar") "=" (py.true 4 "True"))) (py.function_definition 5 "def" (py.identifier 6 "baz") (py.parameters 7 "(" (py.identifier 8 "x") "," (py.identifier 9 "y") "," (py.identifier 10 "z") ")") ":" (py.block 11 (py.pass_statement 12 "pass"))) (py.function_definition 13 "def" (py.identifier 14 "foo") (py.parameters 15 "(" (py.identifier 16 "x") "," (py.identifier 17 "y") ")") ":" (py.block 18 (py.expression_statement 19 (py.assignment 20 (py.identifier 21 "a") "=" (py.identifier 22 "x"))) (py.expression_statement 23 (py.assignment 24 (py.identifier 25 "z") "=" (py.binary_operator 26 (py.identifier 27 "x") "+" (py.identifier 28 "y")))) (py.if_statement 29 "if" (py.identifier 30 "bar") ":" (py.block 31 (py.expression_statement 32 (py.call 33 (py.identifier 34 "baz") (py.argument_list 35 "(" (py.string 36 "\"" (py.string_content 37 "hello") "\"") "," (py.identifier 38 "x") "," (py.identifier 39 "y") ")"))) (py.return_statement 40 "return" (py.identifier 41 "z")))) (py.return_statement 42 "return" (py.binary_operator 43 (py.identifier 44 "x") "-" (py.identifier 45 "y"))))) (py.function_definition 46 "def" (py.identifier 47 "hello") (py.parameters 48 "(" (py.identifier 49 "bam") ")") ":" (py.block 50 (py.expression_statement 51 (py.call 52 (py.identifier 53 "print") (py.argument_list 54 "(" (py.binary_operator 55 (py.string 56 "\"" (py.string_content 57 "hi") "\"") "+" (py.identifier 58 "bam")) ")"))))))
-------------------------
["py.module", 0, ["py.expression_statement", 1, ["py.assignment", 2, ["py.identifier", 3, "\"bar\""], "\"=\"", ["py.true", 4, "\"True\""]]], ["py.function_definition", 5, "\"def\"", ["py.identifier", 6, "\"baz\""], ["py.parameters", 7, "\"(\"", ["py.identifier", 8, "\"x\""], "\",\"", ["py.identifier", 9, "\"y\""], "\",\"", ["py.identifier", 10, "\"z\""], "\")\""], "\":\"", ["py.block", 11, ["py.pass_statement", 12, "\"pass\""]]], ["py.function_definition", 13, "\"def\"", ["py.identifier", 14, "\"foo\""], ["py.parameters", 15, "\"(\"", ["py.identifier", 16, "\"x\""], "\",\"", ["py.identifier", 17, "\"y\""], "\")\""], "\":\"", ["py.block", 18, ["py.expression_statement", 19, ["py.assignment", 20, ["py.identifier", 21, "\"a\""], "\"=\"", ["py.identifier", 22, "\"x\""]]], ["py.expression_statement", 23, ["py.assignment", 24, ["py.identifier", 25, "\"z\""], "\"=\"", ["py.binary_operator", 26, ["py.identifier", 27, "\"x\""], "\"+\"", ["py.identifier", 28, "\"y\""]]]], ["py.if_statement", 29, "\"if\"", ["py.identifier", 30, "\"bar\""], "\":\"", ["py.block", 31, ["py.expression_statement", 32, ["py.call", 33, ["py.identifier", 34, "\"baz\""], ["py.argument_list", 35, "\"(\"", ["py.string", 36, "\"\\\"\"", ["py.string_content", 37, "\"hello\""], "\"\\\"\""], "\",\"", ["py.identifier", 38, "\"x\""], "\",\"", ["py.identifier", 39, "\"y\""], "\")\""]]], ["py.return_statement", 40, "\"return\"", ["py.identifier", 41, "\"z\""]]]], ["py.return_statement", 42, "\"return\"", ["py.binary_operator", 43, ["py.identifier", 44, "\"x\""], "\"-\"", ["py.identifier", 45, "\"y\""]]]]], ["py.function_definition", 46, "\"def\"", ["py.identifier", 47, "\"hello\""], ["py.parameters", 48, "\"(\"", ["py.identifier", 49, "\"bam\""], "\")\""], "\":\"", ["py.block", 50, ["py.expression_statement", 51, ["py.call", 52, ["py.identifier", 53, "\"print\""], ["py.argument_list", 54, "\"(\"", ["py.binary_operator", 55, ["py.string", 56, "\"\\\"\"", ["py.string_content", 57, "\"hi\""], "\"\\\"\""], "\"+\"", ["py.identifier", 58, "\"bam\""]], "\")\""]]]]]]

***************************** Unparse Source ***************************** 
bar = True def baz ( x , y , z ) : pass def foo ( x , y ) : a = x z = x + y if bar : baz ( " hello " , x , y ) return z return x - y def hello ( bam ) : print ( " hi " + bam )

***************************** Translate ***************************** 
Warning: rules not found for py.true
Warning: rules not found for py.pass_statement
['js.program', 0, '" "', ['js.expression_statement', 0, ['js.assignment_expression', 0, ['js.identifier', 0, '"bar"'], '=', ['py.true', 4, '"True"']], ';'], ['js.function_declaration', 0, 'async', 'function', ['js.identifier', 0, '"baz"'], ['js.formal_parameters', 0, '(', ['js.identifier', 0, '"x"'], ',', ['js.identifier', 0, '"y"'], ',', ['js.identifier', 0, '"z"'], ',', ')'], ['js.statement_block', 0, '__FAILED__'], '" "'], ['js.function_declaration', 0, 'async', 'function', ['js.identifier', 0, '"foo"'], ['js.formal_parameters', 0, '(', ['js.identifier', 0, '"x"'], ',', ['js.identifier', 0, '"y"'], ',', ')'], ['js.statement_block', 0, '{', ['js.expression_statement', 0, ['js.assignment_expression', 0, ['js.identifier', 0, '"a"'], '=', ['js.identifier', 0, '"x"']], ';'], ['js.expression_statement', 0, ['js.assignment_expression', 0, ['js.identifier', 0, '"z"'], '=', ['js.binary_expression', 0, ['js.identifier', 0, '"x"'], '&&', ['js.identifier', 0, '"y"']]], ';'], ['js.if_statement', 0, '__FAILED__'], ['js.return_statement', 0, 'return', ['js.binary_expression', 0, ['js.identifier', 0, '"x"'], '&&', ['js.identifier', 0, '"y"']], ';'], '}', '" "'], '" "'], ['js.function_declaration', 0, 'async', 'function', ['js.identifier', 0, '"hello"'], ['js.formal_parameters', 0, '(', ['js.identifier', 0, '"bam"'], ',', ')'], ['js.statement_block', 0, '{', ['js.expression_statement', 0, ['js.call_expression', 0, ['js.identifier', 0, '"print"'], ['js.arguments', 0, '(', ['js.binary_expression', 0, ['js.string', 0, '"', ['js.string_fragment', 0, '"hi"'], '"'], '&&', ['js.identifier', 0, '"bam"']], ')']], ';'], '}', '" "'], '" "']]

***************************** Unparse(Translated) *****************************
  bar = True ; async function baz ( x , y , z , ) __FAILED__   async function foo ( x , y , ) { a = x ; z = x && y ; __FAILED__ return x && y ; }     async function hello ( bam , ) { print ( " hi " && bam ) ; }    
